#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.2 (Stable, Full)
# รองรับ SSH / OpenVPN / Dropbear / V2Ray (3x-ui / Xray-core)
# แก้บั๊ก nginx หลัง Reinstall: /server/ ทำงานเสถียร
# เมนู: 1) Install  2) Uninstall (พร้อม reboot)  0) Exit
# =====================================================

set -euo pipefail

VERSION="V.1.0.2"

# ---------- Colors ----------
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; CYAN='\033[0;36m'; NC='\033[0m'

# ---------- Paths ----------
WWW_DIR="/var/www/html/server"
CONF_FILE="/etc/showon.conf"

ONLINE_SH="/usr/local/bin/online-check.sh"
SYSINFO_SH="/usr/local/bin/sysinfo.sh"

ONLINE_SVC="/etc/systemd/system/online-check.service"
ONLINE_TMR="/etc/systemd/system/online-check.timer"
SYSINFO_SVC="/etc/systemd/system/sysinfo.service"
SYSINFO_TMR="/etc/systemd/system/sysinfo.timer"

NGINX_SITE="/etc/nginx/sites-available/server_checker"
NGINX_LINK="/etc/nginx/sites-enabled/server_checker"

# =====================================================
# Helpers
# =====================================================

say_ok(){   echo -e "${GREEN}[SUCCESS]${NC} $*"; }
say_info(){ echo -e "${CYAN}[INFO]${NC} $*"; }
say_warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
say_err(){  echo -e "${RED}[ERROR]${NC} $*"; }

ip_addr(){ hostname -I | awk '{print $1}' | sed -e 's/[[:space:]]//g'; }

ensure_pkg(){
  say_info "Installing dependencies..."
  apt update -y >/dev/null 2>&1 || true
  apt install -y curl jq net-tools psmisc nginx iproute2 >/dev/null 2>&1
}

clean_nginx_82_dups(){
  # เผื่อเคยมีไฟล์อื่นที่ listen 82 อยู่ ลบทิ้งก่อน
  say_info "Cleaning duplicate nginx configs on port 82 (if any)..."
  if grep -Rsl --include='*' -e "listen 82" /etc/nginx/sites-available/ /etc/nginx/sites-enabled/ 2>/dev/null | grep -v "server_checker" >/dev/null 2>&1; then
    grep -Rsl -e "listen 82" /etc/nginx/sites-available/ /etc/nginx/sites-enabled/ \
      | grep -v "server_checker" \
      | xargs -r rm -f
  fi
}

write_nginx_config(){
  say_info "Writing nginx site for /server/ ..."
  rm -f "$NGINX_SITE" "$NGINX_LINK" 2>/dev/null || true

  # ใช้ root /var/www/html + location /server/ (alias) เพื่อกัน path เพี้ยนหลัง reinstall
  cat >"$NGINX_SITE" <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    # root หลัก = /var/www/html (ไม่ชี้ตรงไปที่ /server เพื่อกันชนกันกับ path อื่น)
    root /var/www/html;
    index index.html;

    # ให้ /server/ map ไปยังโฟลเดอร์ /var/www/html/server เสมอ
    location /server/ {
        alias /var/www/html/server/;
        index index.html;
        autoindex on;
    }
}
EOF

  ln -sf "$NGINX_SITE" "$NGINX_LINK"
  nginx -t
  systemctl restart nginx
  systemctl enable nginx >/dev/null 2>&1 || true
}

prime_www(){
  mkdir -p "$WWW_DIR"
  chmod -R 755 "$WWW_DIR"
  # กัน 403/404 ตอนเว็บโหลดครั้งแรก
  [ -f "$WWW_DIR/online_app.json" ] || echo '{"onlines":0,"limite":0,"ssh":0,"openvpn":0,"dropbear":0,"v2ray":0}' > "$WWW_DIR/online_app.json"
  [ -f "$WWW_DIR/sysinfo.json" ]     || echo '{"uptime":"-", "cpu_usage":"0", "ram_used":"0", "ram_total":"0", "disk_used":"0", "disk_total":"0"}' > "$WWW_DIR/sysinfo.json"
}

write_index_html(){
  cat >"$WWW_DIR/index.html" <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>ShowOn Dashboard V.1.0.2</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<style>
  :root { color-scheme: dark; }
  body { background:#0b0b0b; color:#e6ffe6; font-family: system-ui, Arial, sans-serif; margin: 24px; }
  h1 { color:#77ff77; margin: 0 0 12px 0; }
  .sub { color:#a0f3a0; margin-bottom: 20px; font-size: 14px; }
  .grid { display:grid; grid-template-columns: repeat(auto-fit,minmax(280px,1fr)); gap:16px; }
  .card { background:#141414; border:1px solid #1f3; border-radius:12px; padding:16px; box-shadow: 0 0 32px rgba(0,255,120,0.06) inset; }
  .card h2 { margin:0 0 8px 0; color:#9aff9a; font-size: 18px; }
  .kv { display:grid; grid-template-columns: 160px 1fr; gap:8px; font-size: 14px; }
  .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace; color:#c8ffd0; }
  .pill { display:inline-block; padding:4px 10px; border-radius:999px; background:#0f331a; border:1px solid #2adf6a; color:#b9ffd0; font-size:12px; margin-left:8px; }
  .bad { background:#3a0b0b; border-color:#ff5a5a; color:#ffd0d0; }
  footer { margin-top: 22px; color:#88ffb0; font-size: 12px; opacity: .8; }
</style>
</head>
<body>
  <h1>ShowOn Dashboard <span class="pill">V.1.0.2</span></h1>
  <div class="sub">Auto-refresh ทุก 5 วินาที</div>

  <div class="grid">
    <div class="card">
      <h2>Online Users</h2>
      <div id="onlineBox" class="kv mono">กำลังโหลด...</div>
    </div>
    <div class="card">
      <h2>System Info</h2>
      <div id="sysBox" class="kv mono">กำลังโหลด...</div>
    </div>
  </div>

  <footer>
    Endpoint:
    <span class="pill">/server/online_app.json</span>
    <span class="pill">/server/sysinfo.json</span>
  </footer>

<script>
async function safeJSON(url){
  try{
    const r = await fetch(url, {cache:'no-store'});
    if(!r.ok) throw new Error(r.status);
    return await r.json();
  }catch(e){ return null; }
}

function renderOnline(d){
  const el = document.getElementById('onlineBox');
  if(!d){ el.innerHTML = '<span class="pill bad">โหลดไม่ได้</span>'; return; }
  el.innerHTML = `
    <div>รวมออนไลน์</div><div>${d.onlines ?? 0} / ${d.limite ?? 0}</div>
    <div>SSH</div><div>${d.ssh ?? 0}</div>
    <div>OpenVPN</div><div>${d.openvpn ?? 0}</div>
    <div>Dropbear</div><div>${d.dropbear ?? 0}</div>
    <div>V2Ray</div><div>${d.v2ray ?? 0}</div>
  `;
}

function renderSys(d){
  const el = document.getElementById('sysBox');
  if(!d){ el.innerHTML = '<span class="pill bad">โหลดไม่ได้</span>'; return; }
  const cpu = (d.cpu_usage ?? "0");
  el.innerHTML = `
    <div>Uptime</div><div>${d.uptime ?? '-'}</div>
    <div>CPU Usage</div><div>${cpu}%</div>
    <div>RAM</div><div>${d.ram_used ?? 0} / ${d.ram_total ?? 0} MB</div>
    <div>Disk</div><div>${d.disk_used ?? 0} / ${d.disk_total ?? 0}</div>
  `;
}

async function refresh(){
  const online = await safeJSON('online_app.json');
  renderOnline(online);
  const sys = await safeJSON('sysinfo.json');
  renderSys(sys);
}
refresh();
setInterval(refresh, 5000);
</script>
</body>
</html>
EOF
  chmod 644 "$WWW_DIR/index.html"
}

write_online_script(){
  cat >"$ONLINE_SH" <<'EOF'
#!/bin/bash
set -euo pipefail

WWW_DIR="/var/www/html/server"
# โหลด config ถ้ามี (PANEL_URL / USERNAME / PASSWORD / LIMITE)
[ -f /etc/showon.conf ] && source /etc/showon.conf || true
: "${LIMITE:=2000}"

# -------- SSH --------
ssh_on=$(ss -nt state established 2>/dev/null | grep -E ':22 ' | wc -l || echo 0)

# -------- OpenVPN --------
ovpn_on=0
if [ -f /etc/openvpn/server/openvpn-status.log ]; then
  ovpn_on=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || echo 0)
fi

# -------- Dropbear --------
drop_on=$(pgrep dropbear 2>/dev/null | wc -l || echo 0)

# -------- V2Ray --------
v2_on=0
# ถ้ามี 3x-ui
if [ -n "${PANEL_URL:-}" ]; then
  COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"${USERNAME:-}\",\"password\":\"${PASSWORD:-}\"}" \
    | grep 3x-ui | awk '{print $7}' || true)
  if [ -n "$COOKIE" ]; then
    v2_on=$(curl -sk -b "3x-ui=$COOKIE" -X POST \
      "$PANEL_URL/panel/inbound/onlines" \
      -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
      | jq '.obj | length' 2>/dev/null || echo 0)
  fi
else
  # ถ้าเป็น xray-core ปกติ (เดาแบบหยาบ: นับ process)
  v2_on=$(ss -ntp 2>/dev/null | grep -c xray || echo 0)
fi

onlines=$(( ssh_on + ovpn_on + drop_on + v2_on ))

# -------- Save JSON --------
jq -n \
  --argjson onlines "$onlines" \
  --argjson limite "${LIMITE:-2000}" \
  --argjson ssh "$ssh_on" \
  --argjson openvpn "$ovpn_on" \
  --argjson dropbear "$drop_on" \
  --argjson v2ray "$v2_on" \
  '{onlines:$onlines, limite:$limite, ssh:$ssh, openvpn:$openvpn, dropbear:$dropbear, v2ray:$v2ray}' \
  > "$WWW_DIR/online_app.json"
EOF
  chmod +x "$ONLINE_SH"
}

write_sysinfo_script(){
  cat >"$SYSINFO_SH" <<'EOF'
#!/bin/bash
set -euo pipefail

WWW_DIR="/var/www/html/server"

# uptime
upt=$(uptime -p 2>/dev/null | sed 's/^up //;s/,//g' || echo "-")

# cpu usage (user+system)
cpu=$(LC_ALL=C top -bn1 | awk -F'[, ]+' '/Cpu\(s\)/{printf "%.0f", 100-$8}')

# ram (MB)
read -r _ total used free _ < <(free -m | awk '/Mem:/{print $1,$2,$3,$4,$5}')
ram_used="$used"
ram_total="$total"

# disk (root)
disk_used=$(df -h / | awk 'NR==2{print $3}')
disk_total=$(df -h / | awk 'NR==2{print $2}')

jq -n \
  --arg uptime "$upt" \
  --arg cpu_usage "$cpu" \
  --arg ram_used "$ram_used" \
  --arg ram_total "$ram_total" \
  --arg disk_used "$disk_used" \
  --arg disk_total "$disk_total" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_used:$ram_used|tonumber, ram_total:$ram_total|tonumber, disk_used:$disk_used, disk_total:$disk_total}' \
  > "$WWW_DIR/sysinfo.json"
EOF
  chmod +x "$SYSINFO_SH"
}

write_services_and_timers(){
  # online-check
  cat >"$ONLINE_SVC" <<EOF
[Unit]
Description=Online Users JSON Generator (ShowOn)
After=network.target

[Service]
ExecStart=$ONLINE_SH
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

  cat >"$ONLINE_TMR" <<'EOF'
[Unit]
Description=Run online-check.service every 1 min (ShowOn)

[Timer]
OnBootSec=10
OnUnitActiveSec=60

[Install]
WantedBy=timers.target
EOF

  # sysinfo
  cat >"$SYSINFO_SVC" <<EOF
[Unit]
Description=System Info JSON Generator (ShowOn)
After=network.target

[Service]
ExecStart=$SYSINFO_SH
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SYSINFO_TMR" <<'EOF'
[Unit]
Description=Run sysinfo.service every 1 min (ShowOn)

[Timer]
OnBootSec=15
OnUnitActiveSec=60

[Install]
WantedBy=timers.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.timer sysinfo.timer >/dev/null 2>&1 || true
}

first_run_generators(){
  # รันครั้งแรกทันที เพื่อให้หน้าเว็บมีข้อมูลตั้งแต่แรก
  bash "$ONLINE_SH" || true
  bash "$SYSINFO_SH" || true
}

# =====================================================
# Install / Uninstall
# =====================================================

install_script(){
  say_info "Installing ShowOn ($VERSION)..."
  ensure_pkg
  clean_nginx_82_dups

  # รับค่า config
  echo
  say_info "ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  read -rp "PANEL URL (เช่น https://IP:88) : " PANEL_URL
  read -rp "USERNAME : " USERNAME
  read -rp "PASSWORD : " PASSWORD
  read -rp "Limit User Online : " LIMITE

  # บันทึก config
  cat >"$CONF_FILE" <<EOF
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"
LIMITE="${LIMITE:-2000}"
EOF
  chmod 600 "$CONF_FILE"

  prime_www
  write_index_html
  write_online_script
  write_sysinfo_script
  write_services_and_timers
  write_nginx_config
  first_run_generators

  say_ok "Installation completed."
  echo "Open: http://$(ip_addr):82/server/"
  read -rp "Press Enter to return to menu..." _
}

uninstall_script(){
  say_warn "Uninstalling ShowOn ..."

  # stop + disable
  systemctl stop online-check.service online-check.timer sysinfo.service sysinfo.timer 2>/dev/null || true
  systemctl disable online-check.service online-check.timer sysinfo.service sysinfo.timer 2>/dev/null || true

  # remove services
  rm -f "$ONLINE_SVC" "$ONLINE_TMR" "$SYSINFO_SVC" "$SYSINFO_TMR"

  # remove scripts
  rm -f "$ONLINE_SH" "$SYSINFO_SH" "$CONF_FILE"

  # remove web
  rm -rf "$WWW_DIR"

  # remove nginx
  rm -f "$NGINX_SITE" "$NGINX_LINK"
  systemctl daemon-reload
  nginx -t >/dev/null 2>&1 || true
  systemctl restart nginx || true

  say_ok "Uninstall completed."
  read -rp "Press Enter to reboot..." _
  reboot
}

# =====================================================
# Menu
# =====================================================

show_menu(){
  clear
  echo -e "==============================="
  echo -e "   ShowOn Script Manager $VERSION"
  echo -e "==============================="
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0,1,2]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    0) exit 0 ;;
    *) say_err "Invalid choice..."; sleep 1 ;;
  esac
}

while true; do show_menu; done
