#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.5 (Full, with Network Traffic)
# Author: TspKchn (script assembly by assistant)
# =====================================================
# Notes:
# - Supports 3x-ui (various versions, including >=2.8.x) and Xray-core direct installs.
# - Generates /server JSONs: online_app.json, sysinfo.json, netinfo.json
# - vnStat for host network totals; V2Ray traffic via 3x-ui API if available.
# - Nginx serves /server/ at port 82; index.html shows data refreshed every 5s.
# - Robust uninstall without reboot; avoids nginx dangling includes.
# - Menu:
#     1) Install Script
#     2) Uninstall Script
#     3) Update Script (pull from GitHub raw Install)
#     4) Check Debug Log
#     0) Exit
# =====================================================

set -euo pipefail

VERSION="V.1.0.5"
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ---------- Colors ----------
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; NC="\e[0m"

# ---------- Paths ----------
WWW_DIR="/var/www/html/server"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYS="/usr/local/bin/sysinfo.sh"
SCRIPT_VNST="/usr/local/bin/vnstat-traffic.sh"
SCRIPT_V2TR="/usr/local/bin/v2ray-traffic.sh"

SERV_ONLINE="/etc/systemd/system/online-check.service"
SERV_SYS="/etc/systemd/system/sysinfo.service"
SERV_VNST="/etc/systemd/system/vnstat-traffic.service"
SERV_V2TR="/etc/systemd/system/v2ray-traffic.service"

SHOWON_CMD="/usr/local/bin/showon"

# ---------- Helpers ----------
log() { echo -e "${CYAN}[INFO]${NC} $*"; }
ok()  { echo -e "${GREEN}[OK]${NC} $*"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
err() { echo -e "${RED}[ERROR]${NC} $*"; }

append_debug() {
  mkdir -p "$(dirname "$DEBUG_LOG")"
  local ts; ts="$(date '+[%F %T]')"
  echo "$ts $*" >> "$DEBUG_LOG"
}

trim() { sed -e 's/^[ \t]*//' -e 's/[ \t]*$//'; }

require_cmd() {
  command -v "$1" >/dev/null 2>&1 || { err "Missing required command: $1"; exit 1; }
}

pause() { read -rp "Press Enter to return to menu..." _; show_menu; }

# ---------- Update Checker ----------
check_update() {
  local latest
  latest="$(curl -fsSL "$REPO_RAW" | grep -m1 '^VERSION=' | cut -d'"' -f2 || true)"
  if [[ -n "${latest:-}" && "$latest" != "$VERSION" ]]; then
    echo -e "${YELLOW}[UPDATE AVAILABLE]${NC} Latest: ${latest} (Current: ${VERSION})"
    read -rp "Press Enter to update now, or Ctrl+C to cancel..." _
    if curl -fsSL "$REPO_RAW" -o /root/Install; then
      chmod +x /root/Install
      ok "Updated to ${latest}"
      echo -e "${CYAN}[INFO]${NC} Run 'showon' again to load the new version."
      exit 0
    else
      warn "Failed to download update."
    fi
  else
    ok "You are using the latest version."
  fi
}

# ---------- Nginx Writer ----------
write_nginx() {
  log "Writing nginx site for /server/ ..."
  mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled || true

  # Remove old "server_checker" or "showon" styles to avoid conflicts
  rm -f /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker || true

  cat >/etc/nginx/sites-available/showon <<'NGINX'
server {
    listen 82 default_server;
    server_name _;

    # Redirect root to /server/
    location = / {
        return 302 /server/;
    }

    # Serve everything under /server/
    location /server/ {
        alias /var/www/html/server/;
        index index.html;
        autoindex off;
        charset utf-8;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    }

    # Allow direct read of JSONs
    location ~* \.(json)$ {
        default_type application/json;
        add_header Access-Control-Allow-Origin *;
    }
}
NGINX

  ln -sf /etc/nginx/sites-available/showon /etc/nginx/sites-enabled/showon

  if nginx -t >/dev/null 2>&1; then
    systemctl reload nginx || systemctl restart nginx || true
    ok "Nginx ready at :82 (/server/)"
  else
    err "nginx -t failed; please check /etc/nginx/nginx.conf includes."
    # Try to recover by removing stray includes to non-existing paths
    sed -i 's#^\s*include\s\+/etc/nginx/sites-enabled/showon;# #g' /etc/nginx/nginx.conf || true
    if nginx -t >/dev/null 2>&1; then
      systemctl restart nginx || true
      ok "Nginx recovered."
    else
      warn "Nginx still has issues. Continue installation anyway."
    fi
  fi
}

# ---------- HTML (index) ----------
write_index() {
  mkdir -p "$WWW_DIR"
  chmod 755 "$WWW_DIR"

  cat >"$WWW_DIR/index.html" <<'HTML'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>ShowOn Dashboard V.1.0.5</title>
<meta name="viewport" content="width=device-width,initial-scale=1" />
<style>
  body{background:#0e0e0e;color:#fff;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:0;padding:24px}
  h1{margin:0 0 12px;color:#0ff}
  .muted{color:#aaa}
  .grid{display:grid;grid-template-columns:1fr;gap:16px}
  @media(min-width:900px){.grid{grid-template-columns:1fr 1fr}}
  .card{background:#1b1b1b;border:1px solid #2b2b2b;border-radius:12px;padding:16px}
  table{width:100%;border-collapse:collapse;margin-top:10px}
  th,td{border:1px solid #333;padding:8px;text-align:center}
  th{background:#222}
  .ok{color:#8aff8a}.bad{color:#ff6b6b}
  .mono{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}
  .row{display:flex;gap:16px;flex-wrap:wrap}
  .pill{background:#222;border:1px solid #333;border-radius:999px;padding:6px 10px}
</style>
</head>
<body>
  <h1>ShowOn Dashboard <span class="muted">V.1.0.5</span></h1>
  <div class="grid">

    <div class="card">
      <h2>Online Summary</h2>
      <div class="row mono" id="summary-row">
        <span class="pill">Onlines: <b id="onlines">-</b></span>
        <span class="pill">Limit: <b id="limite">-</b></span>
        <span class="pill">SSH: <b id="ssh">-</b></span>
        <span class="pill">OpenVPN: <b id="openvpn">-</b></span>
        <span class="pill">Dropbear: <b id="dropbear">-</b></span>
        <span class="pill">V2Ray: <b id="v2ray">-</b></span>
      </div>
    </div>

    <div class="card">
      <h2>System &amp; Disk</h2>
      <div class="mono" id="sys">
        Loading...
      </div>
    </div>

    <div class="card">
      <h2>Network Traffic (Host via vnstat)</h2>
      <div class="mono" id="vnstat">Loading...</div>
    </div>

    <div class="card">
      <h2>V2Ray Traffic (from 3x-ui)</h2>
      <div class="mono" id="v2traf">Loading...</div>
    </div>

  </div>

<script>
const Q = sel => document.querySelector(sel);
const fmtBytes = n => {
  if (n === null || n === undefined) return '-';
  const u = ['B','KB','MB','GB','TB','PB']; let i=0; let x = Number(n);
  while (x >= 1024 && i < u.length-1) { x/=1024; i++; }
  return x.toFixed(2)+' '+u[i];
};

async function loadSummary(){
  try{
    const r = await fetch('./online_app.json?_='+Date.now());
    const a = await r.json();
    const d = Array.isArray(a) ? a[0] : a;
    Q('#onlines').textContent = d.onlines ?? '-';
    Q('#limite').textContent = d.limite ?? '-';
    Q('#ssh').textContent = d.ssh ?? '-';
    Q('#openvpn').textContent = d.openvpn ?? '-';
    Q('#dropbear').textContent = d.dropbear ?? '-';
    Q('#v2ray').textContent = d.v2ray ?? '-';
  }catch(e){
    Q('#onlines').textContent = 'Err';
  }
}

async function loadSys(){
  try{
    const r = await fetch('./sysinfo.json?_='+Date.now());
    const d = await r.json();
    Q('#sys').innerHTML = `
      Uptime: ${d.uptime}<br>
      CPU: ${d.cpu_usage}<br>
      RAM: ${d.ram_usage}<br>
      Disk: ${d.disk_usage}
    `;
  }catch(e){
    Q('#sys').textContent = 'Error loading sysinfo';
  }
}

async function loadNet(){
  try{
    const r = await fetch('./netinfo.json?_='+Date.now());
    const d = await r.json();
    if(d && d.vnstat){
      Q('#vnstat').textContent = `RX: ${fmtBytes(d.vnstat.rx)}   TX: ${fmtBytes(d.vnstat.tx)}`;
    }else{
      Q('#vnstat').textContent = 'No vnstat data';
    }
    if(d && d.v2ray){
      const parts = [];
      if(d.v2ray.down !== undefined) parts.push('Down: '+fmtBytes(d.v2ray.down));
      if(d.v2ray.up   !== undefined) parts.push('Up: '+fmtBytes(d.v2ray.up));
      Q('#v2traf').textContent = parts.length? parts.join('   ') : 'No V2Ray traffic data';
    }else{
      Q('#v2traf').textContent = 'No V2Ray traffic data';
    }
  }catch(e){
    Q('#vnstat').textContent = 'Error loading netinfo';
    Q('#v2traf').textContent = 'Error loading netinfo';
  }
}

function loop(){
  loadSummary();
  loadSys();
  loadNet();
}
loop();
setInterval(loop, 5000);
</script>
</body>
</html>
HTML

  chmod 644 "$WWW_DIR/index.html"
  chown www-data:www-data "$WWW_DIR/index.html" || true
}

# ---------- Generate online-check.sh ----------
write_online_check() {
  cat >"$SCRIPT_ONLINE" <<'EOS'
#!/bin/bash
set -euo pipefail
CONF="/etc/showon.conf"
source "$CONF"

JSON_OUT="$WWW_DIR/online_app.json"
: > "$JSON_OUT.tmp"

SSH_ON=0; OVPN_ON=0; DB_ON=0; V2_ON=0

# SSH online by established TCP to :22 (unique remote IPs)
SSH_ON=$(ss -nt state established | awk '$3 ~ /:22$/ {print $5}' | cut -d: -f1 | sort -u | wc -l | awk '{print $1+0}')

# OpenVPN — count CLIENT_LIST lines if status file exists
if [[ -f /etc/openvpn/server/openvpn-status.log ]]; then
  OVPN_ON=$(grep -a -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || echo 0)
fi

# Dropbear — count processes
DB_ON=$(pgrep -x dropbear | wc -l | awk '{print $1+0}')

# V2Ray – 3x-ui multi-version logic
if [[ -n "${PANEL_BASE:-}" && -n "${XUI_USER:-}" && -n "${XUI_PASS:-}" ]]; then
  COOKIE_FILE="/tmp/showon_cookie"
  # Always relogin to keep it fresh
  curl -sk -c "$COOKIE_FILE" -X POST "$PANEL_BASE/login" \
       -d "username=$XUI_USER&password=$XUI_PASS" >/dev/null 2>&1 || true

  # Try new endpoint (2.7+): POST /panel/api/inbounds/onlines with {}
  ONLINE_JSON=$(curl -sk -b "$COOKIE_FILE" -H "Content-Type: application/json" \
    -X POST "$PANEL_BASE/panel/api/inbounds/onlines" -d "{}" 2>/dev/null || echo "")

  if echo "$ONLINE_JSON" | jq -e '.success == true' >/dev/null 2>&1; then
    # Optional sanity via lastOnline narrowing (<60s)
    DETAILS=$(curl -sk -b "$COOKIE_FILE" "$PANEL_BASE/panel/api/inbounds/list" 2>/dev/null || echo "")
    NOW=$(date +%s%3N)
    # Count those whose email present in onlines AND lastOnline within 60s
    V2_ON=$(jq --argjson now "$NOW" '
      .obj as $list
      | ($list | map(.clientStats) | add) as $stats
      | (inputs? // [])
    ' <(echo "$DETAILS") <(echo "$ONLINE_JSON" | jq -r '.obj') 2>/dev/null || echo 0)

    # If the above pipeline is complex, fallback to simple length
    if [[ -z "${V2_ON:-}" || "$V2_ON" == "null" || "$V2_ON" == "" ]]; then
      V2_ON=$(echo "$ONLINE_JSON" | jq '.obj | length' 2>/dev/null || echo 0)
    fi
  else
    # Older version: /panel/inbound/onlines (no JSON body required)
    ONLINE2=$(curl -sk -b "$COOKIE_FILE" -X POST "$PANEL_BASE/panel/inbound/onlines" \
      -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" 2>/dev/null || echo "")
    if echo "$ONLINE2" | jq -e '.obj' >/dev/null 2>&1; then
      V2_ON=$(echo "$ONLINE2" | jq '.obj | length' 2>/dev/null || echo 0)
    else
      V2_ON=0
    fi
  fi
fi

TOTAL=$(( SSH_ON + OVPN_ON + DB_ON + V2_ON ))
jq -n --arg onlines "$TOTAL" \
      --arg limite "${LIMIT:-2000}" \
      --arg ssh "$SSH_ON" \
      --arg openvpn "$OVPN_ON" \
      --arg dropbear "$DB_ON" \
      --arg v2ray "$V2_ON" \
      '[{onlines:($onlines|tonumber), limite:($limite|tonumber), ssh:($ssh|tonumber), openvpn:($openvpn|tonumber), dropbear:($dropbear|tonumber), v2ray:($v2ray|tonumber)}]' \
      > "$JSON_OUT.tmp"

mv -f "$JSON_OUT.tmp" "$JSON_OUT"
echo "[$(date '+%F %T')][ONLINE] online: $(cat "$JSON_OUT")" >> "$DEBUG_LOG"
EOS
  chmod +x "$SCRIPT_ONLINE"
}

# ---------- Generate sysinfo.sh ----------
write_sysinfo() {
  cat >"$SCRIPT_SYS" <<'EOS'
#!/bin/bash
set -euo pipefail
CONF="/etc/showon.conf"
source "$CONF"

OUT="$WWW_DIR/sysinfo.json"
: > "$OUT.tmp"

uptime_str=$(uptime -p | sed 's/^up //')
cpu_usage=$(LANG=C top -bn1 | awk -F'[, ]+' '/Cpu\(s\)/{print 100-$8"%"}')
ram_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3" / "$2}')

jq -n --arg uptime "$uptime_str" \
      --arg cpu_usage "$cpu_usage" \
      --arg ram_usage "$ram_usage" \
      --arg disk_usage "$disk_usage" \
      '{uptime:$uptime,cpu_usage:$cpu_usage,ram_usage:$ram_usage,disk_usage:$disk_usage}' > "$OUT.tmp"

mv -f "$OUT.tmp" "$OUT"
EOS
  chmod +x "$SCRIPT_SYS"
}

# ---------- Generate vnstat-traffic.sh ----------
write_vnstat() {
  cat >"$SCRIPT_VNST" <<'EOS'
#!/bin/bash
set -euo pipefail
CONF="/etc/showon.conf"
source "$CONF"

OUT="$WWW_DIR/netinfo.json"
: > "$OUT.tmp"

# vnstat summary (all interfaces combined): we sum the currently reported totals
# vnstati - not used; we parse `vnstat --json`
if command -v vnstat >/dev/null 2>&1; then
  JSON=$(vnstat --json 2>/dev/null || echo "")
  RX=0; TX=0
  if [[ -n "$JSON" ]]; then
    # sum traffic from "interfaces" > "traffic" > "total" fields
    RX=$(echo "$JSON" | jq '[.interfaces[].traffic.total.rx] | add' 2>/dev/null || echo 0)
    TX=$(echo "$JSON" | jq '[.interfaces[].traffic.total.tx] | add' 2>/dev/null || echo 0)
  fi
else
  RX=0; TX=0
fi

# Merge into existing netinfo.json if exists, to also keep V2Ray section written by v2ray-traffic.sh
if [[ -f "$OUT" ]]; then
  # Update vnstat only
  jq --argjson rx "${RX:-0}" --argjson tx "${TX:-0}" '
    .vnstat = {rx:$rx, tx:$tx}
  ' "$OUT" > "$OUT.tmp" 2>/dev/null || echo "{\"vnstat\":{\"rx\":$RX,\"tx\":$TX}}" > "$OUT.tmp"
else
  echo "{\"vnstat\":{\"rx\":$RX,\"tx\":$TX}}" > "$OUT.tmp"
fi

mv -f "$OUT.tmp" "$OUT"
echo "[$(date '+%F %T')][NET] vnstat: rx=$RX tx=$TX" >> "$DEBUG_LOG"
EOS
  chmod +x "$SCRIPT_VNST"
}

# ---------- Generate v2ray-traffic.sh ----------
write_v2ray_traffic() {
  cat >"$SCRIPT_V2TR" <<'EOS'
#!/bin/bash
set -euo pipefail
CONF="/etc/showon.conf"
source "$CONF"

OUT="$WWW_DIR/netinfo.json"
: > "$OUT.tmp"

# Default: no v2ray traffic
UP=0; DOWN=0; HAVE=false

if [[ -n "${PANEL_BASE:-}" && -n "${XUI_USER:-}" && -n "${XUI_PASS:-}" ]]; then
  COOKIE_FILE="/tmp/showon_cookie"
  curl -sk -c "$COOKIE_FILE" -X POST "$PANEL_BASE/login" \
       -d "username=$XUI_USER&password=$XUI_PASS" >/dev/null 2>&1 || true

  # Newer endpoint has totals per inbound
  LIST=$(curl -sk -b "$COOKIE_FILE" "$PANEL_BASE/panel/api/inbounds/list" 2>/dev/null || echo "")
  if echo "$LIST " | jq -e '.success == true' >/dev/null 2>&1; then
    DOWN=$(echo "$LIST" | jq '[.obj[].down] | add' 2>/dev/null || echo 0)
    UP=$(echo "$LIST" | jq   '[.obj[].up]   | add' 2>/dev/null || echo 0)
    HAVE=true
  else
    # Older endpoint not guaranteed to expose up/down; skip
    HAVE=false
  fi
fi

if [[ -f "$OUT" ]]; then
  if $HAVE; then
    jq --argjson up "${UP:-0}" --argjson down "${DOWN:-0}" '
      .v2ray = {up:$up, down:$down}
    ' "$OUT" > "$OUT.tmp" 2>/dev/null || echo "{\"v2ray\":{\"up\":$UP,\"down\":$DOWN}}" > "$OUT.tmp"
  else
    # Preserve vnstat block; remove v2ray block to avoid showing 0 confusingly
    jq 'del(.v2ray)' "$OUT" > "$OUT.tmp" 2>/dev/null || echo "{}" > "$OUT.tmp"
  fi
else
  if $HAVE; then
    echo "{\"v2ray\":{\"up\":$UP,\"down\":$DOWN}}" > "$OUT.tmp"
  else
    echo "{}" > "$OUT.tmp"
  fi
fi

mv -f "$OUT.tmp" "$OUT"
echo "[$(date '+%F %T')][NET] v2ray: up=$UP down=$DOWN have=$HAVE" >> "$DEBUG_LOG"
EOS
  chmod +x "$SCRIPT_V2TR"
}

# ---------- Services ----------
write_services() {
  cat >"$SERV_ONLINE" <<EOF
[Unit]
Description=ShowOn Online Users JSON Generator
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc "while true; do $SCRIPT_ONLINE; sleep 5; done"
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERV_SYS" <<EOF
[Unit]
Description=ShowOn System Info JSON Generator
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc "while true; do $SCRIPT_SYS; sleep 5; done"
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERV_VNST" <<EOF
[Unit]
Description=ShowOn vnstat Traffic JSON Generator
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc "while true; do $SCRIPT_VNST; sleep 5; done"
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERV_V2TR" <<EOF
[Unit]
Description=ShowOn V2Ray Traffic JSON Generator (3x-ui)
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc "while true; do $SCRIPT_V2TR; sleep 5; done"
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
}

# ---------- Installer ----------
install_script() {
  echo -e "==============================="
  echo -e "   ShowOn Script Manager ${VERSION}"
  echo -e "=============================="

  log "Updating system packages..."
  apt update -y >/dev/null || true
  apt upgrade -y >/dev/null || true

  log "Installing dependencies..."
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates vnstat >/dev/null

  systemctl enable --now vnstat >/dev/null 2>&1 || true

  # Ask 3x-ui config (optional)
  echo -e "${CYAN}[INFO]${NC} ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  echo "  👉 กรุณา 'วางลิงก์หน้าล็อกอินทั้งเส้น' เช่น:"
  echo "     https://IP:PORT/SomeRandomPath  หรือ  http://domain:port/"
  read -rp "3X-UI URL (copy login link): " PANEL_URL_RAW
  PANEL_URL_RAW="$(echo "${PANEL_URL_RAW:-}" | trim)"
  if [[ -n "$PANEL_URL_RAW" ]]; then
    # Normalize: remove trailing spaces, ensure no trailing // multiples
    PANEL_BASE="$(echo "$PANEL_URL_RAW" | sed 's#//*$#/#' | sed 's#/$##')"
    echo "Using URL: $PANEL_BASE"
    read -rp "3X-UI Username: " XUI_USER
    read -rp "3X-UI Password: " XUI_PASS
  else
    PANEL_BASE=""
    XUI_USER=""; XUI_PASS=""
  fi

  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT="${LIMIT:-2000}"

  mkdir -p "$WWW_DIR"
  chmod 755 "$WWW_DIR"

  # Save config
  cat >"$CONF_FILE" <<EOF
VERSION="$VERSION"
WWW_DIR="$WWW_DIR"
LIMIT="$LIMIT"
DEBUG_LOG="$DEBUG_LOG"
PANEL_BASE="$PANEL_BASE"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"
EOF
  chmod 600 "$CONF_FILE"

  # Try login (if provided) to validate
  if [[ -n "$PANEL_BASE" && -n "$XUI_USER" && -n "$XUI_PASS" ]]; then
    COOKIE="/tmp/showon_cookie"
    if curl -sk -c "$COOKIE" -X POST "$PANEL_BASE/login" \
         -d "username=$XUI_USER&password=$XUI_PASS" >/dev/null 2>&1; then
      ok "Login to 3x-ui OK"
    else
      warn "Cannot login to 3x-ui now; continuing without V2Ray features."
    fi
  fi

  write_nginx
  write_index
  write_online_check
  write_sysinfo
  write_vnstat
  write_v2ray_traffic
  write_services

  systemctl daemon-reload
  systemctl enable --now online-check.service >/dev/null 2>&1 || true
  systemctl enable --now sysinfo.service >/dev/null 2>&1 || true
  systemctl enable --now vnstat-traffic.service >/dev/null 2>&1 || true
  systemctl enable --now v2ray-traffic.service >/dev/null 2>&1 || true

  ok "Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  pause
}

# ---------- Uninstaller ----------
uninstall_script() {
  log "Uninstalling ShowOn Script..."

  # Stop & disable services safely
  for S in v2ray-traffic vnstat-traffic sysinfo online-check; do
    systemctl stop "$S.service" 2>/dev/null || true
    systemctl disable "$S.service" 2>/dev/null || true
  done

  # Remove service files
  rm -f "$SERV_V2TR" "$SERV_VNST" "$SERV_SYS" "$SERV_ONLINE"

  # Remove scripts & conf
  rm -f "$SCRIPT_V2TR" "$SCRIPT_VNST" "$SCRIPT_SYS" "$SCRIPT_ONLINE"
  rm -f "$CONF_FILE"
  rm -f "$SHOWON_CMD"

  # Remove web dir
  rm -rf "$WWW_DIR"

  # Remove nginx site
  rm -f /etc/nginx/sites-available/showon /etc/nginx/sites-enabled/showon

  # Daemon reload
  systemctl daemon-reload

  # Reload or restart nginx if running
  if systemctl is-active --quiet nginx; then
    systemctl reload nginx 2>/dev/null || systemctl restart nginx 2>/dev/null || true
  fi

  ok "Uninstalled completely."
  pause
}

# ---------- Update Script ----------
update_script() {
  log "Fetching latest Install from GitHub..."
  if curl -fsSL "$REPO_RAW" -o /root/Install; then
    chmod +x /root/Install
    ok "Install file updated."
  else
    err "Failed to download update."
  fi
  pause
}

# ---------- Debug Log Viewer ----------
check_debug() {
  echo "===== $DEBUG_LOG ====="
  if [[ -f "$DEBUG_LOG" ]]; then
    tail -n 200 "$DEBUG_LOG" || true
  else
    echo "(no debug yet)"
  fi
  pause
}

# ---------- ShowOn command wrapper ----------
ensure_showon_cmd() {
  cat >"$SHOWON_CMD" <<'WRAP'
#!/bin/bash
exec bash /root/Install
WRAP
  chmod +x "$SHOWON_CMD"
}

# ---------- Menu ----------
show_menu() {
  clear
  echo -e "==============================="
  echo -e "   ShowOn Script Manager ${VERSION}"
  echo -e "==============================="
  check_update
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0,1,2,3,4]: " choice
  case "${choice:-}" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    0) exit 0 ;;
    *) err "Invalid choice." ; sleep 1 ; show_menu ;;
  esac
}

# ---------- Entry ----------
ensure_showon_cmd
show_menu
