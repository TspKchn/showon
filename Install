#!/bin/bash
VERSION="V.1.0.0"
UPDATE_DATE="$(date '+%Y-%m-%d %H:%M:%S')"

GITHUB_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"
INSTALL_PATH="/usr/local/bin/install-online-check.sh"
MENU_PATH="/usr/local/bin/showon"

set -e

# ===== Function: Detect Panel Port =====
detect_panel() {
    PANEL_PORT=$(sqlite3 /etc/x-ui/x-ui.db "select port from setting;" 2>/dev/null | head -n1)
    if [ -z "$PANEL_PORT" ]; then
        if [ -f /usr/local/x-ui/bin/config.json ]; then
            PANEL_PORT=$(jq -r '.inbounds[0].port' /usr/local/x-ui/bin/config.json | head -n1)
        fi
    fi
    [[ -z "$PANEL_PORT" ]] && PANEL_PORT=88
    PANEL_IP=$(hostname -I | awk '{print $1}')
    PANEL_URL="https://${PANEL_IP}:${PANEL_PORT}"
    SHOW_URL="https://${PANEL_IP}:82/server/"
}

# ===== Function: Install Script =====
install_script() {
    echo "[INFO] Updating system..."
    apt update -y && apt upgrade -y
    apt install -y iproute2 curl jq net-tools nginx sqlite3

    echo "[INFO] Setting up Nginx..."
    mkdir -p /var/www/html/server

    # ลบ server_checker เก่าออกก่อน
    rm -f /etc/nginx/sites-enabled/server_checker /etc/nginx/sites-available/server_checker

    cat > /etc/nginx/sites-available/server_checker <<EOF
server {
    listen 82 default_server;
    listen [::]:82 default_server;

    root /var/www/html;
    index index.html;

    server_name _;

    location /server/ {
        autoindex on;
        default_type application/json;
    }
}
EOF

    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    nginx -t && systemctl restart nginx

    detect_panel
    echo "Detected X-UI Panel URL: $PANEL_URL"
    read -p "กรอก X-UI panel username: " USERNAME
    read -p "กรอก X-UI panel password: " PASSWORD

    # === online-check.sh ===
    cat > /usr/local/bin/online-check.sh <<EOF
#!/bin/bash
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"

while true; do
    echo "[DEBUG] Checking online users..."

    ssh_online=\$(ss -nt state established | grep -c ':22 ')
    openvpn_online=0
    [[ -f /etc/openvpn/server/openvpn-status.log ]] && openvpn_online=\$(grep -c '^CLIENT_LIST' /etc/openvpn/server/openvpn-status.log)
    dropbear_online=0
    pgrep dropbear >/dev/null && dropbear_online=\$(ps aux | grep dropbear | grep -v grep | wc -l)

    COOKIE=\$(curl -sk -c - -X POST "\$PANEL_URL/login" -H "Content-Type: application/json" -d "{\"username\":\"\$USERNAME\",\"password\":\"\$PASSWORD\"}" | awk '/3x-ui/ {print \$7}')
    v2ray_json=\$(curl -sk -b "3x-ui=\$COOKIE" "\$PANEL_URL/panel/inbound/onlines")
    v2ray_count=\$(echo "\$v2ray_json" | jq '.obj | length' 2>/dev/null || echo 0)

    total=\$((ssh_online + openvpn_online + dropbear_online + v2ray_count))

    JSON="{\"total\":\$total,\"ssh\":\$ssh_online,\"openvpn\":\$openvpn_online,\"dropbear\":\$dropbear_online,\"v2ray\":\$v2ray_count}"
    echo "\$JSON" > /var/www/html/server/online_app.json

    sleep 5
done
EOF

    chmod +x /usr/local/bin/online-check.sh

    # systemd
    cat > /etc/systemd/system/online-check.service <<EOF
[Unit]
Description=Online Users Checker
After=network.target

[Service]
ExecStart=/usr/local/bin/online-check.sh
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable --now online-check.service

    # === index.html ===
    cat > /var/www/html/server/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Show Online User</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
 body { font-family: Arial, sans-serif; margin: 20px; background: #f9f9f9; }
 h1 { text-align: center; }
 table { width: 100%; border-collapse: collapse; margin: 20px auto; background: #fff; }
 th, td { border: 1px solid #ddd; padding: 10px; text-align: center; }
 th { background: #eee; }
 canvas { margin: 20px auto; display: block; max-width: 800px; }
</style>
</head>
<body>
<h1>สถานะผู้ใช้ออนไลน์</h1>
<table>
  <tr><th>Total</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr>
  <tr><td id="total">0</td><td id="ssh">0</td><td id="openvpn">0</td><td id="dropbear">0</td><td id="v2ray">0</td></tr>
</table>
<canvas id="chart"></canvas>
<script>
const ctx = document.getElementById('chart').getContext('2d');
const chart = new Chart(ctx,{type:'bar',data:{labels:['SSH','OpenVPN','Dropbear','V2Ray'],datasets:[{label:'Online',data:[0,0,0,0]}]},options:{responsive:true,scales:{y:{beginAtZero:true}}}});
async function fetchData(){
 try{
   const res=await fetch('online_app.json?_='+Date.now()); const d=await res.json();
   document.getElementById('total').textContent=d.total;
   document.getElementById('ssh').textContent=d.ssh;
   document.getElementById('openvpn').textContent=d.openvpn;
   document.getElementById('dropbear').textContent=d.dropbear;
   document.getElementById('v2ray').textContent=d.v2ray;
   chart.data.datasets[0].data=[d.ssh,d.openvpn,d.dropbear,d.v2ray]; chart.update();
 }catch(e){console.error(e);}
}
setInterval(fetchData,5000); fetchData();
</script>
</body>
</html>
EOF

    echo "[SUCCESS] Installation completed!"
    echo "3X-UI Panel URL: $PANEL_URL"
    echo "Show Online URL: $SHOW_URL"
}

# ===== Function: Menu =====
menu() {
    detect_panel
    LATEST_VERSION=$(curl -fsSL $GITHUB_RAW | grep '^VERSION=' | awk -F= '{gsub(/"/,"",$2); print $2}')
    LATEST_UPDATE=$(curl -fsSL $GITHUB_RAW | grep '^UPDATE_DATE=' | awk -F= '{gsub(/"/,"",$2); print $2}')

    clear
    echo "===================================="
    echo "     Menu Script Show Online User"
    echo " Installed : $VERSION"
    echo " Last Update: $UPDATE_DATE"
    echo "------------------------------------"
    echo " 3X-UI Panel URL : $PANEL_URL"
    echo " Show Online URL : $SHOW_URL"
    echo "------------------------------------"
    echo " Latest GitHub Version: $LATEST_VERSION"
    echo " Latest Update Date   : $LATEST_UPDATE"
    echo "===================================="
    echo "1). Install Script"
    echo "2). Restart All Service"
    echo "3). Uninstall"
    echo "4). Update"
    echo "5). View Update Logs"
    echo "6). Fix Nginx"
    echo "0). Exit"
    echo "------------------------------------"
    read -p "Select option: " opt

    case $opt in
        1) install_script ;;
        2) systemctl restart online-check nginx ;;
        3) systemctl stop online-check nginx; rm -f /usr/local/bin/online-check.sh /etc/systemd/system/online-check.service; rm -rf /var/www/html/server ;;
        4) bash <(curl -fsSL $GITHUB_RAW) ;;
        5) journalctl -u online-check.service -n 50 --no-pager ;;
        6) nginx -t && systemctl restart nginx || (rm -f /etc/nginx/sites-enabled/server_checker && ln -s /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker && systemctl restart nginx) ;;
        0) exit 0 ;;
        *) echo "Invalid option"; sleep 1 ;;
    esac
    menu
}

# ===== Entry Point =====
if [[ "$0" == "$MENU_PATH" ]]; then
    menu
else
    install_script
    cat > $MENU_PATH <<EOF
#!/bin/bash
bash $INSTALL_PATH
EOF
    chmod +x $MENU_PATH
    echo "[INFO] Installed menu command: showon"
fi
