#!/bin/bash
# =====================================================
# Show Online User Script - V.1.0.0 (Stable Full Version)
# Author : ChatGPT
# OS     : Ubuntu 18.04 - 24.04
# =====================================================

VERSION="V.1.0.0"
INSTALL_DIR="/etc/showon"
WWW_DIR="/var/www/html/server"
SERVICE_FILE="/etc/systemd/system/online-check.service"
JSON_FILE="$WWW_DIR/online_app.json"

set -e

# -----------------------------
# Detect IP & Default Port
# -----------------------------
SERVER_IP=$(curl -s4 ifconfig.me || hostname -I | awk '{print $1}')
PANEL_PORT=88
SHOW_PORT=82

# -----------------------------
# Install dependencies
# -----------------------------
install_deps() {
  echo "[INFO] Updating system..."
  apt update -y && apt upgrade -y
  apt install -y curl jq bc sqlite3 net-tools nginx
}

# -----------------------------
# Setup Nginx
# -----------------------------
setup_nginx() {
  echo "[INFO] Setting up Nginx..."
  mkdir -p $WWW_DIR
  cat > /etc/nginx/sites-available/showon <<EOF
server {
    listen $SHOW_PORT default_server;
    root $WWW_DIR;
    index index.html;
    server_name _;

    location / {
        try_files \$uri \$uri/ =404;
    }
}
EOF
  ln -sf /etc/nginx/sites-available/showon /etc/nginx/sites-enabled/showon
  rm -f /etc/nginx/sites-enabled/default
  nginx -t && systemctl restart nginx
}

# -----------------------------
# Create index.html
# -----------------------------
create_index() {
cat > $WWW_DIR/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Show Online User</title>
  <style>
    body { font-family: Arial; background:#111; color:#eee; text-align:center; }
    .card { background:#222; padding:20px; margin:20px auto; border-radius:10px; width:80%; }
    h1 { color:#0ff; }
    table { width:100%; border-collapse: collapse; margin-top:10px; }
    th, td { padding:8px; border:1px solid #444; }
  </style>
  <script>
    async function loadData(){
      try {
        const res = await fetch('online_app.json?'+Date.now());
        const data = await res.json();
        document.getElementById('total').innerText = data.total;
        document.getElementById('ssh').innerText = data.ssh;
        document.getElementById('openvpn').innerText = data.openvpn;
        document.getElementById('dropbear').innerText = data.dropbear;
        document.getElementById('v2ray').innerText = data.v2ray;
        document.getElementById('cpu').innerText = data.cpu;
        document.getElementById('ram').innerText = data.ram;
        document.getElementById('uptime').innerText = data.uptime;
      } catch(e){ console.log("load error", e); }
    }
    setInterval(loadData, 5000); loadData();
  </script>
</head>
<body>
  <h1>Show Online User <span style="color:cyan;">V.1.0.0</span></h1>
  <div class="card">
    <h2>Online Summary</h2>
    <table>
      <tr><th>Total</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr>
      <tr><td id="total">0</td><td id="ssh">0</td><td id="openvpn">0</td><td id="dropbear">0</td><td id="v2ray">0</td></tr>
    </table>
  </div>
  <div class="card">
    <h2>System & Network</h2>
    <table>
      <tr><th>CPU</th><th>RAM</th><th>Uptime</th></tr>
      <tr><td id="cpu">-</td><td id="ram">-</td><td id="uptime">-</td></tr>
    </table>
  </div>
</body>
</html>
EOF
}

# -----------------------------
# Generate online-check script
# -----------------------------
create_checker() {
mkdir -p $INSTALL_DIR
cat > $INSTALL_DIR/online-check.sh <<'EOF'
#!/bin/bash
JSON="/var/www/html/server/online_app.json"

# ----------- SSH ------------
ssh_count=$(ss -tan | grep -c ':22 ' || echo 0)

# ----------- OpenVPN --------
ovpn_count=0
[[ -f /etc/openvpn/server/openvpn-status.log ]] && \
  ovpn_count=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || echo 0)

# ----------- Dropbear -------
drop_count=$(ps -ef | grep -i dropbear | grep -vc grep || echo 0)

# ----------- V2Ray/Xray -----
v2_on=0
DB="/etc/x-ui/x-ui.db"
if [[ -f "$DB" ]]; then
  ck=$(sqlite3 $DB "select value from settings where key='jwtSecret'" 2>/dev/null | head -n1)
  [[ -n "$ck" ]] && v2_on=$(curl -sk -X POST -b "3x-ui=$ck" https://127.0.0.1:88/panel/inbound/onlines \
      -H 'Content-Type: application/x-www-form-urlencoded' 2>/dev/null | jq '.obj|length' 2>/dev/null || echo 0)
fi
[[ "$v2_on" =~ ^[0-9]+$ ]] || v2_on=0

# ----------- System Info ----
cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print 100-$8"%"}')
ram=$(free -m | awk '/Mem:/ {printf "%.1f%%", $3/$2*100}')
uptime=$(uptime -p | sed 's/up //')

# ----------- Write JSON -----
total=$((ssh_count + ovpn_count + drop_count + v2_on))
cat > $JSON <<EOL
{
 "total": $total,
 "ssh": $ssh_count,
 "openvpn": $ovpn_count,
 "dropbear": $drop_count,
 "v2ray": $v2_on,
 "cpu": "$cpu",
 "ram": "$ram",
 "uptime": "$uptime"
}
EOL
EOF
chmod +x $INSTALL_DIR/online-check.sh
}

# -----------------------------
# Setup systemd
# -----------------------------
setup_service() {
cat > $SERVICE_FILE <<EOF
[Unit]
Description=Online User Checker
After=network.target

[Service]
ExecStart=/bin/bash $INSTALL_DIR/online-check.sh
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reexec
systemctl enable online-check
systemctl start online-check
}

# -----------------------------
# Menu
# -----------------------------
menu() {
clear
echo "===================================="
echo "     Menu Script Show Online User"
echo " Installed : $VERSION"
echo " Last Update: $(date '+%Y-%m-%d %H:%M:%S')"
echo "------------------------------------"
echo " 3X-UI Panel URL : http://$SERVER_IP:$PANEL_PORT"
echo " Show Online URL : http://$SERVER_IP:$SHOW_PORT/server/"
echo "------------------------------------"
echo "1). Install Script"
echo "2). Restart All Service"
echo "3). Uninstall"
echo "4). Update"
echo "5). Fix Nginx"
echo "0). Exit"
echo "------------------------------------"
read -p "Select option: " opt
case $opt in
  1) install_deps; setup_nginx; create_index; create_checker; setup_service; echo "[OK] Install Complete!";;
  2) systemctl restart nginx online-check; echo "[OK] Restarted";;
  3) systemctl stop online-check; systemctl disable online-check; rm -rf $INSTALL_DIR $WWW_DIR $SERVICE_FILE; systemctl restart nginx; echo "[OK] Uninstalled";;
  4) bash <(curl -fsSL https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install);;
  5) setup_nginx; systemctl restart nginx; echo "[OK] Nginx Fixed";;
  0) exit;;
  *) echo "Invalid choice";;
esac
}

menu
