#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.5 (Full)
# Author: TspKchn
# =====================================================

set -euo pipefail

# -----------------------------
# Version & Repo
# -----------------------------
VERSION="V.1.0.5"
REPO_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# -----------------------------
# Paths & Const
# -----------------------------
SHOWON_CMD="/usr/local/bin/showon"
CONF_FILE="/etc/showon.conf"
WWW_DIR="/var/www/html/server"
ONLINE_SH="/usr/local/bin/online-check.sh"
SYSINFO_SH="/usr/local/bin/sysinfo.sh"
SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"
DEBUG_LOG="/var/log/showon-debug.log"

# -----------------------------
# Colors
# -----------------------------
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; NC="\e[0m"

log() { echo -e "${CYAN}[INFO]${NC} $*"; }
ok()  { echo -e "${GREEN}[OK]${NC} $*"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
err() { echo -e "${RED}[ERROR]${NC} $*"; }

banner() {
  clear
  echo "==============================="
  echo "   ShowOn Script Manager ${VERSION}"
  echo "==============================="
}

# -----------------------------
# Update checker (menu 3)
# -----------------------------
update_script() {
  banner
  log "Updating Install script from GitHub..."
  if wget -q -O /root/Install "$REPO_URL"; then
    chmod +x /root/Install
    ok "Updated successfully. Run 'showon' again to load the new version."
  else
    err "Update failed. Please check your network or REPO_URL."
  fi
  read -rp "Press Enter..." _
  show_menu
}

# -----------------------------
# Debug viewer (menu 4)
# -----------------------------
check_debug() {
  banner
  if [ -f "$DEBUG_LOG" ]; then
    tail -n 200 "$DEBUG_LOG"
  else
    warn "No debug log found: $DEBUG_LOG"
  fi
  echo
  read -rp "Press Enter..." _
  show_menu
}

# -----------------------------
# Write nginx site
# -----------------------------
write_nginx() {
  log "Writing nginx site for /server/ ..."
  mkdir -p "$WWW_DIR"
  chown -R www-data:www-data "$WWW_DIR"
  chmod -R 755 "$WWW_DIR"

  # Clean duplicates port 82
  grep -Rl "listen 82" /etc/nginx/sites-enabled/ /etc/nginx/sites-available/ 2>/dev/null | while read -r f; do
    rm -f "$f" 2>/dev/null || true
  done

  cat >/etc/nginx/sites-available/server_checker <<'NGX'
server {
    listen 82 default_server;
    server_name _;

    # redirect / -> /server/
    location = / {
        return 302 /server/;
    }

    # serve /server/ -> /var/www/html/server/
    location /server/ {
        alias /var/www/html/server/;
        index index.html;
        autoindex on;
    }
}
NGX

  ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
  nginx -t && systemctl reload nginx
}

# -----------------------------
# Ask 3x-ui config (URL, user, pass, limit)
# Store in CONF_FILE
# -----------------------------
ask_and_write_conf() {
  banner
  echo -e "${CYAN}[INFO]${NC} ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  echo "  👉 กรุณา 'วางลิงก์หน้าล็อกอินทั้งเส้น' เช่น:"
  echo "     https://IP:PORT/SomeRandomPath  หรือ  http://domain:port/"
  read -rp "3X-UI URL (copy login link): " PANEL_BASE
  PANEL_BASE="${PANEL_BASE%/}"  # strip trailing /

  read -rp "3X-UI Username: " XUI_USER
  # ตามคำขอ: แสดงรหัสตอนพิมพ์ (ไม่ซ่อน)
  read -rp "3X-UI Password: " XUI_PASS

  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  mkdir -p "$(dirname "$CONF_FILE")"
  cat >"$CONF_FILE" <<EOF
VERSION="$VERSION"
WWW_DIR="$WWW_DIR"
LIMIT="$LIMIT"
DEBUG_LOG="$DEBUG_LOG"
PANEL_BASE="$PANEL_BASE"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"
EOF
  chmod 600 "$CONF_FILE"
}

# -----------------------------
# Login 3x-ui (set cookie)
# return 0 success, 1 fail
# -----------------------------
xui_login() {
  # ใช้ cookie temp ใน /run
  COOKIE="/run/showon_cookie"
  rm -f "$COOKIE" 2>/dev/null || true

  # ต้องมี PANEL_BASE, XUI_USER, XUI_PASS
  if [ -z "${PANEL_BASE:-}" ] || [ -z "${XUI_USER:-}" ] || [ -z "${XUI_PASS:-}" ]; then
    return 1
  fi

  # โพสต์ฟอร์ม login (3x-ui ใหม่/เก่า ใช้ฟอร์มรับได้)
  curl -sk -c "$COOKIE" -X POST "${PANEL_BASE}/login" \
    -d "username=${XUI_USER}&password=${XUI_PASS}" \
    -m 10 >/dev/null || true

  # ทดสอบ endpoint ที่ทุกเวอร์ชันมี: /panel/api/inbounds/list
  local okjson
  okjson=$(curl -sk -b "$COOKIE" "${PANEL_BASE}/panel/api/inbounds/list" -m 10 | jq -r '.success' 2>/dev/null || echo "false")
  if [ "$okjson" = "true" ]; then
    echo "[OK] Login success. Cookie acquired." | tee -a "$DEBUG_LOG"
    return 0
  fi

  echo "[WARN] Login may have failed (cannot reach /panel/api/inbounds/list)" | tee -a "$DEBUG_LOG"
  return 1
}

# -----------------------------
# Build index.html (simple dashboard)
# -----------------------------
write_index() {
  cat >"$WWW_DIR/index.html" <<HTML
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ShowOn Dashboard ${VERSION}</title>
  <style>
    body { background:#111; color:#fff; font-family:Arial,sans-serif; padding:20px; }
    h1 { color:#0f0; }
    .card { background:#222; padding:15px; margin-bottom:20px; border-radius:8px; }
    table { width:100%; border-collapse:collapse; margin-top:10px; }
    th, td { border:1px solid #444; padding:8px; text-align:center; }
    th { background:#333; }
    .spinner {border:4px solid #333;border-top:4px solid #0f0;border-radius:50%;width:20px;height:20px;animation:spin 1s linear infinite;margin:auto;}
    @keyframes spin {100% {transform:rotate(360deg);}}
    @media (max-width:600px){body{font-size:14px;} h1{font-size:18px;} table{font-size:12px;}}
  </style>
</head>
<body>
  <h1>ShowOn Dashboard <span style="color:#0ff;">${VERSION}</span></h1>

  <div class="card">
    <h2>Online Summary</h2>
    <table>
      <thead>
        <tr><th>Onlines</th><th>Limit</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr>
      </thead>
      <tbody>
        <tr id="summary"><td colspan="6"><div class="spinner"></div></td></tr>
      </tbody>
    </table>
  </div>

  <div class="card">
    <h2>System & Network</h2>
    <div id="system"><div class="spinner"></div></div>
  </div>

  <script>
    async function loadData() {
      try {
        const res = await fetch('./online_app.json?_='+Date.now());
        const d = await res.json();
        document.getElementById("summary").innerHTML =
          \`<td>\${d[0].onlines}</td><td>\${d[0].limite}</td><td>\${d[0].ssh}</td><td>\${d[0].openvpn}</td><td>\${d[0].dropbear}</td><td>\${d[0].v2ray}</td>\`;
      } catch { document.getElementById("summary").innerHTML = '<td colspan="6">Error</td>'; }

      try {
        const r2 = await fetch('./sysinfo.json?_='+Date.now());
        const s = await r2.json();
        document.getElementById("system").innerHTML =
          \`<b>Uptime:</b> \${s.uptime}<br>
           <b>CPU:</b> \${s.cpu_usage}<br>
           <b>RAM:</b> \${s.ram_usage}<br>
           <b>Disk:</b> \${s.disk_usage}\`;
      } catch { document.getElementById("system").innerHTML = 'Error'; }
    }
    loadData(); setInterval(loadData, 5000);
  </script>
</body>
</html>
HTML
  chmod 644 "$WWW_DIR/index.html"
  chown www-data:www-data "$WWW_DIR/index.html"
}

# -----------------------------
# Write sysinfo.sh
# -----------------------------
write_sysinfo_sh() {
  cat >"$SYSINFO_SH" <<'BASH'
#!/bin/bash
set -euo pipefail
CONF="/etc/showon.conf"
source "$CONF"

uptime=$(uptime -p | sed 's/^up //')
cpu_usage=$(top -bn1 | awk -F'[, ]+' '/Cpu\(s\)/{printf "%.1f%%", 100-$8}')
mem_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3 " / " $2}')

JSON=$(jq -n \
  --arg uptime "$uptime" \
  --arg cpu_usage "$cpu_usage" \
  --arg ram_usage "$mem_usage" \
  --arg disk_usage "$disk_usage" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}')

echo "$JSON" > "$WWW_DIR/sysinfo.json"
BASH
  chmod +x "$SYSINFO_SH"
}

# -----------------------------
# Write online-check.sh
# รองรับ 3x-ui ทุกเวอร์ชัน + Xray-core logs
# -----------------------------
write_online_sh() {
  cat >"$ONLINE_SH" <<'BASH'
#!/bin/bash
set -euo pipefail
CONF="/etc/showon.conf"
source "$CONF"

OUT="$WWW_DIR/online_app.json"
LOG="$DEBUG_LOG"
: > "$LOG" 2>/dev/null || true

log() { echo "[$(date '+%F %T')][ONLINE] $*" >>"$LOG"; }

# ---------- Count SSH/OpenVPN/Dropbear ----------
SSH_ON=$(ss -nt state established | awk '$3 ~ /:22$/ {c++} END{print c+0}')
OVPN_ON=0
if [ -f /etc/openvpn/server/openvpn-status.log ]; then
  OVPN_ON=$(grep -c 'CLIENT_LIST' /etc/openvpn/server/openvpn-status.log || true)
fi
DB_ON=$(pgrep dropbear | wc -l | awk '{print $1+0}')

V2_ON=0

# ---------- Try 3x-ui first ----------
COOKIE="/run/showon_cookie"
if [ -n "${PANEL_BASE:-}" ] && [ -n "${XUI_USER:-}" ] && [ -n "${XUI_PASS:-}" ]; then
  # ensure cookie exist (skip if already there)
  if ! curl -sk -b "$COOKIE" "${PANEL_BASE}/panel/api/inbounds/list" -m 5 >/dev/null 2>&1; then
    # login
    curl -sk -c "$COOKIE" -X POST "${PANEL_BASE}/login" \
      -d "username=${XUI_USER}&password=${XUI_PASS}" -m 10 >/dev/null || true
  fi

  # check onlines endpoint
  ONL=$(curl -sk -b "$COOKIE" -H "Content-Type: application/json" \
        -X POST "${PANEL_BASE}/panel/api/inbounds/onlines" -d "{}" -m 10)
  if echo "$ONL" | jq -e '.success' >/dev/null 2>&1; then
    # success case
    # get details for lastOnline
    DET=$(curl -sk -b "$COOKIE" "${PANEL_BASE}/panel/api/inbounds/list" -m 10)
    NOW=$(date +%s%3N)
    # filter only emails that appear in onlines AND lastOnline within 60s
    V2_ON=$(
      jq -n --argjson now "$NOW" --argjson window 60000 \
        --argjson onlines "$(echo "$ONL" | jq '.obj')" \
        --argjson det "$(echo "$DET" | jq '.obj[].clientStats')" '
        ( $onlines | map(.)) as $ol
        | [ $det[]? | .[]? | {email, lastOnline} ]
        | map(select( (.email as $e | $ol | index($e)) and (.lastOnline != null) and ($now - .lastOnline < $window) ))
        | length
        ' 2>/dev/null || echo 0
    )
  else
    echo "[$(date '+%F %T')][ONLINE] onlines endpoint not available or auth failed" >>"$LOG"
  fi
fi

# ---------- If V2 still 0, try xray-core logs ----------
if [ "$V2_ON" -eq 0 ]; then
  if [ -f /var/log/xray/access.log ]; then
    V2_ON=$(grep -ha "accepted" /var/log/xray/access.log 2>/dev/null | tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
  elif [ -d /var/log/xray ]; then
    V2_ON=$(grep -ha "accepted" /var/log/xray/*.log 2>/dev/null | tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
  fi
fi

TOTAL=$(( SSH_ON + OVPN_ON + DB_ON + V2_ON ))

JSON=$(jq -n \
  --arg onlines "$TOTAL" \
  --arg limite "${LIMIT:-2000}" \
  --arg ssh "$SSH_ON" \
  --arg openvpn "$OVPN_ON" \
  --arg dropbear "$DB_ON" \
  --arg v2ray "$V2_ON" \
  '[{onlines:($onlines|tonumber), limite:($limite|tonumber), ssh:($ssh|tonumber), openvpn:($openvpn|tonumber), dropbear:($dropbear|tonumber), v2ray:($v2ray|tonumber)}]'
)

echo "$JSON" > "$OUT"
log "online: $JSON"
BASH
  chmod +x "$ONLINE_SH"
}

# -----------------------------
# Services
# -----------------------------
write_services() {
  cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=ShowOn Online Users JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -lc 'while true; do $ONLINE_SH; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=ShowOn System Info JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -lc 'while true; do $SYSINFO_SH; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service
  systemctl enable --now sysinfo.service
}

# -----------------------------
# Install
# -----------------------------
install_script() {
  banner
  log "Installing ShowOn (${VERSION})..."
  log "Updating system packages..."
  apt update -y >/dev/null 2>&1 || true
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates >/dev/null 2>&1 || true

  # ถามค่า + เขียน conf
  ask_and_write_conf
  # โหลดค่าใช้ในขั้นตอนต่อไป
  source "$CONF_FILE" || true

  # ทดสอบ login ถ้าใส่ 3x-ui มา
  if [ -n "${PANEL_BASE:-}" ] && [ -n "${XUI_USER:-}" ] && [ -n "${XUI_PASS:-}" ]; then
    if xui_login; then
      ok "Login to 3x-ui OK"
    else
      warn "Cannot verify 3x-ui login right now (will retry in service)."
    fi
  else
    warn "No 3x-ui info provided. V2Ray count will rely on xray logs if available."
  fi

  write_nginx
  write_index
  write_sysinfo_sh
  write_online_sh
  write_services

  ok "Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  read -rp "Press Enter to return to menu..." _
  show_menu
}

# -----------------------------
# Uninstall
# -----------------------------
uninstall_script() {
  banner
  warn "Uninstalling ShowOn Script..."

  systemctl stop online-check.service sysinfo.service 2>/dev/null || true
  systemctl disable online-check.service sysinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_SYSINFO"
  rm -f "$ONLINE_SH" "$SYSINFO_SH"
  rm -f "$CONF_FILE"
  rm -rf "$WWW_DIR"
  rm -f /etc/nginx/sites-available/server_checker
  rm -f /etc/nginx/sites-enabled/server_checker

  systemctl daemon-reload
  systemctl reload nginx || true

  ok "Uninstalled completely (no reboot required)."
  read -rp "Press Enter to return to menu..." _
  show_menu
}

# -----------------------------
# showon command wrapper
# -----------------------------
ensure_showon_cmd() {
  cat >"$SHOWON_CMD" <<'WRAP'
#!/bin/bash
exec bash /root/Install
WRAP
  chmod +x "$SHOWON_CMD"
}

# -----------------------------
# Menu
# -----------------------------
show_menu() {
  banner

  # Auto-check update notice (non-blocking)
  LATEST=$(curl -fsSL "$REPO_URL" | grep -m1 '^VERSION=' | cut -d'"' -f2 || true)
  if [ -n "$LATEST" ] && [ "$LATEST" != "$VERSION" ]; then
    echo -e "${YELLOW}[UPDATE AVAILABLE]${NC} Latest: ${LATEST} (Current: ${VERSION})"
  else
    echo -e "${GREEN}[OK]${NC} You are using the latest version."
  fi

  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0,1,2,3,4]: " choice

  case "${choice:-}" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    0) exit 0 ;;
    *) err "Invalid choice..."; sleep 1; show_menu ;;
  esac
}

# -----------------------------
# Bootstrap
# -----------------------------
ensure_showon_cmd
show_menu
