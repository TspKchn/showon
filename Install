#!/bin/bash
# ============================================
# Script: Show Online User + System Info
# Version: V.1.0.0 (Stable Release)
# Author: ChatGPT + TspKchn
# ============================================

VERSION="V.1.0.0"
GITHUB_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

set -e

# -----------------------------
# Detect Panel IP & Port
# -----------------------------
detect_panel_url() {
  PANEL_IP=$(hostname -I | awk '{print $1}')

  # 1) DB check
  DB_PORT=$(sqlite3 /etc/x-ui/x-ui.db "select port from settings;" 2>/dev/null | head -n1 || echo "")
  
  if [ -n "$DB_PORT" ]; then
    PANEL_PORT=$DB_PORT
  elif [ -f /usr/local/x-ui/bin/config.json ]; then
    PANEL_PORT=$(jq -r '.inbounds[0].port' /usr/local/x-ui/bin/config.json 2>/dev/null || echo "88")
  else
    PANEL_PORT=88
  fi

  PANEL_URL="https://$PANEL_IP:$PANEL_PORT"
  echo "[INFO] Detect X-UI Panel URL: $PANEL_URL"
}

# -----------------------------
# Install dependencies
# -----------------------------
install_packages() {
  echo "[INFO] Updating system..."
  apt update -y && apt upgrade -y
  apt install -y curl jq net-tools iproute2 sqlite3 nginx
}

# -----------------------------
# Setup Nginx
# -----------------------------
setup_nginx() {
  echo "[INFO] Setting up Nginx..."

  # Remove old configs using port 82
  grep -l "listen 82" /etc/nginx/sites-enabled/* 2>/dev/null | while read f; do
    echo "[WARN] Removing duplicate config: $f"
    rm -f "$f"
  done
  grep -l "listen 82" /etc/nginx/sites-available/* 2>/dev/null | while read f; do
    echo "[WARN] Removing duplicate config: $f"
    rm -f "$f"
  done

  mkdir -p /var/www/html/server

  cat > /etc/nginx/sites-available/server_checker <<EOF
server {
    listen 82 default_server;
    listen [::]:82 default_server;

    root /var/www/html;
    index index.html;

    server_name _;

    location /server/ {
        autoindex on;
    }
}
EOF

  ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
  nginx -t && systemctl restart nginx
  echo "[INFO] Nginx reloaded successfully"
}

# -----------------------------
# Online Checker Service
# -----------------------------
setup_online_checker() {
  cat > /usr/local/bin/online-check.sh <<'EOF'
#!/bin/bash
set -e

PANEL_IP=$(hostname -I | awk '{print $1}')
PANEL_URL="https://$PANEL_IP:88"
USERNAME="admin"
PASSWORD="admin"

COOKIE=""

login_panel() {
  COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
    | grep 3x-ui | awk '{print $7}' || echo "")
}

get_v2ray_online() {
  [[ -z "$COOKIE" ]] && login_panel
  curl -sk -b "3x-ui=$COOKIE" -X POST "$PANEL_URL/panel/inbound/onlines" \
    -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
    | jq -r '.obj | length' 2>/dev/null || echo 0
}

while true; do
  SSH=$(ss -nt state established 2>/dev/null | grep -E ":22 " | wc -l)
  OVPN=0
  [ -f /etc/openvpn/server/openvpn-status.log ] && OVPN=$(grep -c "^CLIENT_LIST" /etc/openvpn/server/openvpn-status.log)

  DROPBEAR=0
  pgrep dropbear >/dev/null && DROPBEAR=$(ps aux | grep dropbear | grep -v grep | wc -l)

  V2RAY=$(get_v2ray_online)

  TOTAL=$((SSH + OVPN + DROPBEAR + V2RAY))

  JSON="{\"total\":$TOTAL,\"ssh\":$SSH,\"openvpn\":$OVPN,\"dropbear\":$DROPBEAR,\"v2ray\":$V2RAY}"
  echo "$JSON" > /var/www/html/server/online_app.json

  sleep 5
done
EOF

  chmod +x /usr/local/bin/online-check.sh

  cat > /etc/systemd/system/online-check.service <<EOF
[Unit]
Description=Online Users Checker
After=network.target

[Service]
ExecStart=/usr/local/bin/online-check.sh
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service
}

# -----------------------------
# SysInfo Generator
# -----------------------------
setup_sysinfo() {
  cat > /usr/local/bin/sysinfo-gen.sh <<'EOF'
#!/bin/bash
while true; do
  UPTIME=$(uptime -p | cut -d' ' -f2-)
  CPU=$(top -bn1 | grep "Cpu(s)" | awk '{print 100-$8"%"}')
  RAM=$(free -m | awk '/Mem:/ {print $3" / "$2" MB"}')
  DISK=$(df -h / | awk 'NR==2 {print $3" / "$2}')

  JSON="{\"uptime\":\"$UPTIME\",\"cpu_usage\":\"$CPU\",\"ram_usage\":\"$RAM\",\"disk_usage\":\"$DISK\"}"
  echo "$JSON" > /var/www/html/server/sysinfo.json

  sleep 5
done
EOF

  chmod +x /usr/local/bin/sysinfo-gen.sh

  cat > /etc/systemd/system/sysinfo-gen.service <<EOF
[Unit]
Description=System Info Generator
After=network.target

[Service]
ExecStart=/usr/local/bin/sysinfo-gen.sh
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now sysinfo-gen.service
}

# -----------------------------
# HTML Dashboard
# -----------------------------
setup_dashboard() {
  cat > /var/www/html/server/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>สถานะผู้ใช้ออนไลน์</title>
<style>
body { font-family: Arial, sans-serif; margin: 20px; background: #f4f4f4; }
h1 { text-align: center; }
table { width: 80%; margin: auto; border-collapse: collapse; background: #fff; }
th, td { border: 1px solid #ccc; padding: 10px; text-align: center; }
</style>
</head>
<body>
<h1>สถานะผู้ใช้ออนไลน์</h1>
<table>
<thead>
<tr><th>ทั้งหมด</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr>
</thead>
<tbody>
<tr><td id="total">0</td><td id="ssh">0</td><td id="openvpn">0</td><td id="dropbear">0</td><td id="v2ray">0</td></tr>
</tbody>
</table>
<h2 style="text-align:center">System Info</h2>
<ul style="width:60%;margin:auto;background:#fff;padding:10px;">
  <li id="uptime"></li>
  <li id="cpu"></li>
  <li id="ram"></li>
  <li id="disk"></li>
</ul>
<script>
async function fetchData(){
  let u = await fetch('online_app.json?_=' + Date.now()); let uj = await u.json();
  document.getElementById('total').textContent = uj.total;
  document.getElementById('ssh').textContent = uj.ssh;
  document.getElementById('openvpn').textContent = uj.openvpn;
  document.getElementById('dropbear').textContent = uj.dropbear;
  document.getElementById('v2ray').textContent = uj.v2ray;

  let s = await fetch('sysinfo.json?_=' + Date.now()); let sj = await s.json();
  document.getElementById('uptime').textContent = "Uptime: " + sj.uptime;
  document.getElementById('cpu').textContent = "CPU Usage: " + sj.cpu_usage;
  document.getElementById('ram').textContent = "RAM Usage: " + sj.ram_usage;
  document.getElementById('disk').textContent = "Disk Usage: " + sj.disk_usage;
}
setInterval(fetchData, 5000); fetchData();
</script>
</body>
</html>
EOF
}

# -----------------------------
# Show Menu
# -----------------------------
menu_showon() {
  clear
  NOW=$(date '+%Y-%m-%d %H:%M:%S')
  detect_panel_url

  LATEST=$(curl -fsSL https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/VERSION 2>/dev/null || echo "Unknown")
  LATEST_RAW=$(curl -sI https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install | grep -i '^last-modified:' | cut -d' ' -f2-)
  if [ -n "$LATEST_RAW" ]; then
    LATEST_DATE=$(date -d "$LATEST_RAW" '+%Y-%m-%d %H:%M:%S')
  else
    LATEST_DATE="Unknown"
  fi

  SERVER_IP=$(hostname -I | awk '{print $1}')

  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : $VERSION"
  echo " Last Update: $NOW"
  echo "------------------------------------"
  echo " 3X-UI Panel URL : $PANEL_URL"
  echo " Show Online URL : http://$SERVER_IP:82/server/"
  echo "------------------------------------"
  echo " Latest GitHub Version: $LATEST"
  echo " Latest Update Date   : $LATEST_DATE"
  echo "===================================="
  echo "1). Install Script"
  echo "2). Restart All Service"
  echo "3). Uninstall"
  echo "4). Update"
  echo "5). View Update Logs"
  echo "6). Fix Nginx"
  echo "0). Exit"
  echo "------------------------------------"
  read -p "Select option: " opt
  case $opt in
    1) install_packages; setup_nginx; setup_online_checker; setup_sysinfo; setup_dashboard ;;
    2) systemctl restart online-check sysinfo-gen nginx ;;
    3) systemctl disable --now online-check sysinfo-gen nginx; rm -rf /var/www/html/server ;;
    4) echo "[INFO] Updating showon script..."; curl -fsSL $GITHUB_RAW -o /usr/local/bin/showon; chmod +x /usr/local/bin/showon; echo "[DONE] Updated! run: showon"; exit 0 ;;
    5) journalctl -u online-check.service -n 50 --no-pager ;;
    6) nginx -t && systemctl restart nginx ;;
    0) exit ;;
    *) echo "Invalid option" ;;
  esac
}

# -----------------------------
# Entry
# -----------------------------
if [[ "$0" == *"showon"* ]]; then
  menu_showon
else
  install_packages
  setup_nginx
  setup_online_checker
  setup_sysinfo
  setup_dashboard
  cp "$0" /usr/local/bin/showon
  chmod +x /usr/local/bin/showon
  echo "[SUCCESS] Installed. Run 'showon' to open menu."
fi
