#!/usr/bin/env bash
# =========================================
# Show Online User - One Shot Installer
# Version: V.1.0.0
# Support: Ubuntu 18.04 – 24.04 (systemd)
# Author: you + assistant
# =========================================
set -euo pipefail

VERSION="V.1.0.0"
APP_ROOT="/var/www/html"
WEB_ROOT="$APP_ROOT/server"
STATE_DIR="/etc/showon"
BIN_DIR="/usr/local/bin"
SITE_NAME="showon"
NGINX_AVAIL="/etc/nginx/sites-available/$SITE_NAME"
NGINX_ENABLED="/etc/nginx/sites-enabled/$SITE_NAME"
ONLINE_JSON="$APP_ROOT/online_app.json"
SYS_JSON="$APP_ROOT/sys.json"
ENV_FILE="$STATE_DIR/panel.env"
MENU_BIN="$BIN_DIR/showon"
CHECK_BIN="$BIN_DIR/online-check.sh"
SERVICE_FILE="/etc/systemd/system/online-check.service"
TIMER_FILE="/etc/systemd/system/online-check.timer"

# ---------- helpers ----------
msg()  { echo -e "\e[92m[INFO]\e[0m $*"; }
warn() { echo -e "\e[93m[WARN]\e[0m $*"; }
err()  { echo -e "\e[91m[ERROR]\e[0m $*" >&2; }
press(){ read -rp "Press Enter to continue..."; }

need_root() {
  if [[ ${EUID:-0} -ne 0 ]]; then err "Run as root"; exit 1; fi
}

os_chk() {
  if ! command -v systemctl >/dev/null 2>&1; then
    err "systemd required"; exit 1
  fi
  if ! command -v apt >/dev/null 2>&1; then
    err "Debian/Ubuntu apt required"; exit 1
  fi
}

deps() {
  msg "Updating & installing dependencies..."
  apt-get update -y >/dev/null
  DEBIAN_FRONTEND=noninteractive apt-get install -y \
    nginx curl jq sqlite3 iproute2 net-tools bc >/dev/null
}

ip_of() {
  ip -4 route get 1.1.1.1 2>/dev/null | awk '/src/ {print $7; exit}'
}

detect_panel_port_from_db() {
  local DB1="/etc/x-ui/x-ui.db"
  local DB2="/usr/local/x-ui/bin/x-ui.db"
  local PORT=""
  for DB in "$DB1" "$DB2"; do
    if [[ -f "$DB" ]]; then
      PORT="$(sqlite3 "$DB" "SELECT value FROM settings WHERE key='webPort' LIMIT 1;" 2>/dev/null || true)"
      [[ -n "$PORT" ]] && { echo "$PORT"; return; }
    fi
  done
  echo ""
}

detect_panel_port_from_cfg() {
  local CFG1="/etc/x-ui/x-ui.json"
  local CFG2="/usr/local/x-ui/.x-ui/x-ui.json"
  local PORT=""
  for C in "$CFG1" "$CFG2"; do
    if [[ -f "$C" ]]; then
      PORT="$(jq -r '(.webPort // .port // empty)' "$C" 2>/dev/null || true)"
      [[ -n "$PORT" && "$PORT" != "null" ]] && { echo "$PORT"; return; }
    fi
  done
  echo ""
}

detect_panel_url() {
  local IP="${1}"
  # 1) DB → 2) config.json → 3) default 88
  local P="$(detect_panel_port_from_db)"
  [[ -z "$P" ]] && P="$(detect_panel_port_from_cfg)"
  [[ -z "$P" ]] && P="88"
  # protocol: ถ้าใบรับรองใช้งานได้ค่อยใช้ https มิฉะนั้น http
  local CPROTO="https"
  if ! curl -fsS --max-time 2 "https://$IP:$P/" >/dev/null 2>&1; then
    CPROTO="http"
  fi
  echo "$CPROTO://$IP:$P"
}

write_env() {
  mkdir -p "$STATE_DIR"
  cat > "$ENV_FILE" <<EOF
PANEL_URL="$1"
USERNAME="$2"
PASSWORD="$3"
EOF
}

read_env() {
  [[ -f "$ENV_FILE" ]] || return 1
  # shellcheck disable=SC1090
  . "$ENV_FILE"
}

# ---------- Nginx ----------
configure_nginx() {
  msg "Configuring Nginx (port 82)..."
  mkdir -p "$WEB_ROOT"
  # clean duplicates safely
  rm -f /etc/nginx/sites-enabled/default || true
  # remove legacy site names that may conflict
  find /etc/nginx/sites-enabled -maxdepth 1 -type l -name 'server_checker*' -exec rm -f {} \; || true

  cat > "$NGINX_AVAIL" <<'EOF'
server {
    listen 82 default_server;
    listen [::]:82 default_server;
    server_name _;

    # เว็บนี้อยู่ที่ /var/www/html/server
    root /var/www/html/server;
    index index.html;

    # ไฟล์ JSON ที่สคริปต์จะอัปเดต
    location = /online_app.json  { default_type application/json; alias /var/www/html/online_app.json; }
    location = /sys.json         { default_type application/json; alias /var/www/html/sys.json; }

    # ปิด autoindex
    location / { try_files $uri $uri/ =404; }
}
EOF

  ln -sf "$NGINX_AVAIL" "$NGINX_ENABLED"
  nginx -t
  systemctl enable nginx >/dev/null
  systemctl restart nginx
}

# ---------- HTML ----------
write_index() {
  cat > "$WEB_ROOT/index.html" <<'EOF'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Show Online User V1.0.0</title>
<style>
  :root{color-scheme:light dark;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}
  body{margin:0;padding:24px;background:#0b0f14;color:#e7eef7}
  h1{font-weight:700;margin:0 0 16px}
  .badge{display:inline-block;background:#0ea5e9;color:#001018;border-radius:10px;padding:2px 8px;margin-left:8px;font-size:12px}
  .grid{display:grid;grid-template-columns:1fr 1fr;gap:16px}
  .card{background:#0e1520;border:1px solid #1b2838;border-radius:12px;padding:16px;box-shadow:0 1px 0 #203347}
  table{width:100%;border-collapse:collapse}
  th,td{padding:10px 12px;border-bottom:1px solid #1b2838;text-align:left}
  th{background:#0f172a;color:#b6c2d9;font-weight:600}
  .muted{color:#9fb3c8}
  .kpi{font-size:40px;font-weight:800;margin:2px 0}
  .row{display:flex;gap:8px;flex-wrap:wrap}
  .pill{border:1px solid #1b2838;border-radius:20px;padding:6px 10px;background:#0b1420}
  footer{margin-top:20px;color:#8092a8;font-size:12px}
</style>
</head>
<body>
  <h1>Show Online User <span class="badge">V1.0.0</span></h1>

  <div class="grid">
    <div class="card">
      <h3>Online Summary</h3>
      <div id="kpi" class="kpi">0</div>
      <div class="row" id="tags"></div>
      <table style="margin-top:12px">
        <thead><tr><th>Total</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr></thead>
        <tbody id="summary"><tr><td colspan="5" class="muted">Loading…</td></tr></tbody>
      </table>
    </div>

    <div class="card">
      <h3>System & Network</h3>
      <table>
        <thead><tr><th>Metric</th><th>Value</th></tr></thead>
        <tbody id="sys"><tr><td colspan="2" class="muted">Loading…</td></tr></tbody>
      </table>
    </div>
  </div>

  <footer>Auto refresh every 5s • Theme follows system</footer>

<script>
const $ = s=>document.querySelector(s);
async function loadJSON(u){ const r=await fetch(u,{cache:'no-store'}); if(!r.ok) throw new Error(u); return r.json(); }
function fmtBytes(n){ n=Number(n||0); const u=['B','KB','MB','GB','TB']; let i=0; while(n>=1024&&i<u.length-1){n/=1024;i++;} return n.toFixed(2)+' '+u[i]; }

async function refresh(){
  try{
    const o = await loadJSON('/online_app.json');
    const s = await loadJSON('/sys.json');
    const total = Number(o.total||0), ssh=Number(o.ssh||0), ovpn=Number(o.openvpn||0), db=Number(o.dropbear||0), v2=Number(o.v2ray||0);

    $('#kpi').textContent = total;
    $('#tags').innerHTML = [
      `<span class="pill">SSH: ${ssh}</span>`,
      `<span class="pill">OpenVPN: ${ovpn}</span>`,
      `<span class="pill">Dropbear: ${db}</span>`,
      `<span class="pill">V2Ray: ${v2}</span>`
    ].join(' ');
    $('#summary').innerHTML = `<tr><td>${total}</td><td>${ssh}</td><td>${ovpn}</td><td>${db}</td><td>${v2}</td></tr>`;

    const cpu = s.cpu ?? '-', ram = s.ram ?? '-', swap=s.swap ?? '-', disk=s.disk ?? '-';
    const upb = fmtBytes(s.upload_bytes), dnb = fmtBytes(s.download_bytes);
    const upsp = fmtBytes(s.upload_speed), dnsp = fmtBytes(s.download_speed);
    $('#sys').innerHTML = `
      <tr><td>CPU</td><td>${cpu}</td></tr>
      <tr><td>RAM</td><td>${ram}</td></tr>
      <tr><td>Swap</td><td>${swap}</td></tr>
      <tr><td>Disk</td><td>${disk}</td></tr>
      <tr><td>Uptime</td><td>${s.uptime || '-'}</td></tr>
      <tr><td>IF</td><td>${s.iface || '-'}</td></tr>
      <tr><td>Upload (bytes)</td><td>${upb} @ ${upsp}/s</td></tr>
      <tr><td>Download (bytes)</td><td>${dnb} @ ${dnsp}/s</td></tr>`;
  }catch(e){
    console.error(e);
  }
}
refresh(); setInterval(refresh, 5000);
</script>
</body>
</html>
EOF
}

# ---------- online-check.sh ----------
write_checker() {
  cat > "$CHECK_BIN" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

APP_ROOT="/var/www/html"
ONLINE_JSON="$APP_ROOT/online_app.json"
SYS_JSON="$APP_ROOT/sys.json"
ENV_FILE="/etc/showon/panel.env"
LOOP="${1:-loop}"   # default run in loop; pass "once" to run once

# helpers
now() { date +%s; }
jqe() { jq -e "$@" >/dev/null 2>&1; } # exists?

# load env
if [[ -f "$ENV_FILE" ]]; then
  # shellcheck disable=SC1090
  . "$ENV_FILE"
else
  echo '{"total":0,"ssh":0,"openvpn":0,"dropbear":0,"v2ray":0}' > "$ONLINE_JSON"
fi

# detect interface (primary route)
IFACE="$(ip -4 route get 1.1.1.1 2>/dev/null | awk '{for(i=1;i<=NF;i++){if($i=="dev"){print $(i+1);exit}}}')"
[[ -z "${IFACE:-}" ]] && IFACE="eth0"

# traffic snapshot
read_rx() { cat /sys/class/net/"$IFACE"/statistics/rx_bytes 2>/dev/null || echo 0; }
read_tx() { cat /sys/class/net/"$IFACE"/statistics/tx_bytes 2>/dev/null || echo 0; }

login_cookie() {
  local URL="${PANEL_URL:-}"
  [[ -z "$URL" ]] && echo ""
  # try /login first
  local C; C="$(curl -sk -D - -o /dev/null -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
      "$URL/login" | awk -F'[:; ]+' '/Set-Cookie: 3x-ui=/{print $3}' | tail -n1)" || true
  if [[ -n "$C" ]]; then echo "$C"; return; fi
  # fallback to panel path POST /panel/inbound/onlines with zero content
  C="$(curl -sk -c - "$URL/panel/inbounds" | awk -F'[:; ]+' '/3x-ui=/{print $3}' | tail -n1)" || true
  echo "$C"
}

get_v2_onlines() {
  local URL="${PANEL_URL:-}" C="$1"
  [[ -z "$URL" || -z "$C" ]] && { echo 0; return; }
  # official endpoint used by UI:
  local J
  J="$(curl -sk -b "3x-ui=$C" -H 'X-Requested-With: XMLHttpRequest' \
        -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
        -X POST "$URL/panel/inbound/onlines" 2>/dev/null || true)"
  # expected: {"success":true,"msg":"","obj":["email1","email2",...]}
  local N
  N="$(echo "$J" | jq -r 'try (.obj|length) catch 0' 2>/dev/null || echo 0)"
  [[ -z "$N" || "$N" == "null" ]] && N=0
  echo "$N"
}

get_counts() {
  # SSH sessions on :22
  local SSHC; SSHC="$(ss -nt state established 2>/dev/null | grep -E ':22 ' | wc -l | tr -d ' ')"
  [[ -z "$SSHC" ]] && SSHC=0
  # OpenVPN from status log
  local OVPN=0; [[ -f /etc/openvpn/server/openvpn-status.log ]] && OVPN="$(grep -c '^CLIENT_LIST' /etc/openvpn/server/openvpn-status.log || true)"
  # Dropbear pids
  local DBR=0; pgrep dropbear >/dev/null 2>&1 && DBR="$(pgrep -c dropbear || true)"
  # V2Ray via 3x-ui
  local COOKIE=""; COOKIE="$(login_cookie)"
  local V2=0; V2="$(get_v2_onlines "$COOKIE")"
  local TOTAL=$((SSHC + OVPN + DBR + V2))
  echo "$TOTAL,$SSHC,$OVPN,$DBR,$V2"
}

write_online_json() {
  local TOTAL="$1" SSHC="$2" OVPN="$3" DBR="$4" V2="$5"
  printf '{"total":%s,"ssh":%s,"openvpn":%s,"dropbear":%s,"v2ray":%s}\n' \
    "$TOTAL" "$SSHC" "$OVPN" "$DBR" "$V2" > "$ONLINE_JSON".tmp
  mv -f "$ONLINE_JSON".tmp "$ONLINE_JSON"
}

fmt_pct() {
  local used=$1 total=$2
  [[ "$total" -eq 0 ]] && { echo "-"; return; }
  awk -v u="$used" -v t="$total" 'BEGIN{printf("%.2f%%", 100*u/t)}'
}

write_sys_json() {
  # CPU %
  local CPU="-"
  if command -v mpstat >/dev/null 2>&1; then
    CPU="$(mpstat 1 1 | awk '/Average/ && $3 ~ /all/ {printf("%.2f%%", 100 - $NF)}')"
  else
    local a b idle total
    read -r a b <<<"$(grep 'cpu ' /proc/stat | awk '{idle=$5; total=$2+$3+$4+$5+$6+$7+$8; print idle,total}')"
    sleep 0.5
    local a2 b2; read -r a2 b2 <<<"$(grep 'cpu ' /proc/stat | awk '{idle=$5; total=$2+$3+$4+$5+$6+$7+$8; print idle,total}')"
    local didle=$((a2-a)); local dtotal=$((b2-b))
    if (( dtotal > 0 )); then
      CPU="$(awk -v i="$didle" -v t="$dtotal" 'BEGIN{printf("%.2f%%", 100*(1 - i/t))}')"
    fi
  fi
  # RAM/SWAP
  local MT MU MS; MT="$(awk '/MemTotal/ {print $2}' /proc/meminfo)"; MU="$(awk '/MemAvailable/ {print $2}' /proc/meminfo)"; MS="$(awk '/SwapTotal/ {print $2}' /proc/meminfo)"
  local RAM=$(awk -v t="$MT" -v a="$MU" 'BEGIN{u=(t-a); printf("%.2f%%", (t>0?100*u/t:0))}')
  local SWAP=$(awk -v s="$MS" 'BEGIN{printf("%s", (s>0?"?":"0%"))}')
  # Disk
  local DISK="$(df -h / | awk 'NR==2{print $5 " (" $3 "/" $2 ")"}')"
  # Uptime
  local UP="$(uptime -p 2>/dev/null || true)"
  # IF speeds (simple — computed externally in loop)
  local RX=$(cat /tmp/.showon_rx 2>/dev/null || echo 0)
  local TX=$(cat /tmp/.showon_tx 2>/dev/null || echo 0)
  local RXS=$(cat /tmp/.showon_rxspd 2>/dev/null || echo 0)
  local TXS=$(cat /tmp/.showon_txspd 2>/dev/null || echo 0)
  cat > "$SYS_JSON".tmp <<J
{"cpu":"$CPU","ram":"$RAM","swap":"$SWAP","disk":"$DISK","uptime":"$UP","iface":"$IFACE","download_bytes":$RX,"upload_bytes":$TX,"download_speed":$RXS,"upload_speed":$TXS}
J
  mv -f "$SYS_JSON".tmp "$SYS_JSON"
}

tick_once() {
  # speeds
  local r1 t1 r2 t2; r1=$(read_rx); t1=$(read_tx); sleep 1; r2=$(read_rx); t2=$(read_tx)
  local dr=$((r2-r1)); local dt=$((t2-t1)); ((dr<0)) && dr=0; ((dt<0)) && dt=0
  echo "$r2" > /tmp/.showon_rx
  echo "$t2" > /tmp/.showon_tx
  echo "$dr" > /tmp/.showon_rxspd
  echo "$dt" > /tmp/.showon_txspd

  IFS=',' read -r TOT SSH OVPN DBR V2 <<<"$(get_counts)"
  write_online_json "$TOT" "$SSH" "$OVPN" "$DBR" "$V2"
  write_sys_json
}

main() {
  if [[ "${LOOP}" == "once" ]]; then
    tick_once; exit 0
  fi
  while :; do
    tick_once || true
    sleep 5
  done
}
main
EOF
  chmod +x "$CHECK_BIN"
}

# ---------- systemd ----------
write_service() {
  cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=Online User Checker
After=network-online.target nginx.service
Wants=network-online.target

[Service]
Type=simple
ExecStart=$CHECK_BIN
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  # timer (kick start + watchdog-ish)
  cat > "$TIMER_FILE" <<EOF
[Unit]
Description=Kick online-check every 1min (self-heal)

[Timer]
OnBootSec=1min
OnUnitInactiveSec=1min
Unit=online-check.service

[Install]
WantedBy=timers.target
EOF

  systemctl daemon-reload
  systemctl enable online-check.service >/dev/null
  systemctl restart online-check.service
  systemctl enable online-check.timer >/dev/null
  systemctl restart online-check.timer
}

# ---------- Menu (showon) ----------
write_menu() {
  cat > "$MENU_BIN" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
VERSION="V.1.0.0"
ENV_FILE="/etc/showon/panel.env"
WEB_URL="http://$(ip -4 route get 1.1.1.1 2>/dev/null | awk "/src/ {print \$7; exit}")/server/"
[[ -f "$ENV_FILE" ]] && . "$ENV_FILE" || PANEL_URL=""

header(){
  clear
  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : $VERSION"
  echo " Last Update: $(date '+%Y-%m-%d %H:%M:%S')"
  echo "------------------------------------"
  echo " 3X-UI Panel URL : ${PANEL_URL:-N/A}"
  echo " Show Online URL : http://$(ip -4 route get 1.1.1.1 | awk '/src/ {print $7; exit}')/server/"
  echo "------------------------------------"
}
install_flow(){
  echo -n "กรอก X-UI panel URL (เช่น https://IP:88 หรือ http://IP:88): "
  read -r PURL
  echo -n "กรอก X-UI panel username: "
  read -r U
  echo -n "กรอก X-UI panel password: "
  read -r P
  /usr/bin/env bash -c "PANEL_URL='$PURL' USERNAME='$U' PASSWORD='$P' bash /root/Install --do-install"
  echo "[DONE] Installed."
}
case "${1:-}" in
  --do-install) ;; # noop for internal call
  *) header
     echo " 1). Install Script"
     echo " 2). Restart All Service"
     echo " 3). Uninstall"
     echo " 4). Update"
     echo " 5). Fix Nginx"
     echo " 0). Exit"
     echo "------------------------------------"
     read -rp "Select option: " op
     case "$op" in
       1) install_flow ;;
       2) systemctl restart nginx online-check.service; echo "Restarted."; read -rp "Enter to continue..." ;;
       3) bash /root/Install --uninstall ;;
       4) bash /root/Install --update ;;
       5) bash /root/Install --fix-nginx ;;
       0) exit 0 ;;
       *) echo "Invalid choice."; exit 1 ;;
     esac
     exit 0;;
esac
EOF
  chmod +x "$MENU_BIN"
}

# ---------- Update / Uninstall / Fix ----------
do_fix_nginx() {
  configure_nginx
  systemctl restart nginx
  systemctl restart online-check.service
  msg "Nginx fixed."
}

do_uninstall() {
  systemctl disable --now online-check.timer online-check.service || true
  rm -f "$SERVICE_FILE" "$TIMER_FILE"
  systemctl daemon-reload
  rm -f "$NGINX_ENABLED" "$NGINX_AVAIL"
  nginx -t && systemctl reload nginx || true
  rm -rf "$STATE_DIR" "$WEB_ROOT" "$ONLINE_JSON" "$SYS_JSON"
  rm -f "$MENU_BIN" "$CHECK_BIN"
  msg "Uninstalled."
}

do_update() {
  local URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"
  curl -fsSL "$URL" -o /root/Install.new
  chmod +x /root/Install.new
  mv -f /root/Install.new /root/Install
  msg "Updated installer."
}

# ---------- Main installer ----------
main_install() {
  need_root; os_chk; deps
  # read or prepare PANEL_URL
  local IP="$(ip_of)"
  local DURL="$(detect_panel_url "$IP")"
  local PURL="${PANEL_URL:-$DURL}"
  local USER="${USERNAME:-}"
  local PASS="${PASSWORD:-}"

  if [[ -z "${USERNAME:-}" || -z "${PASSWORD:-}" ]]; then
    echo "Detected 3X-UI: $PURL"
    read -rp "กรอก X-UI panel username: " USER
    read -rp "กรอก X-UI panel password: " PASS
  fi
  write_env "$PURL" "$USER" "$PASS"

  configure_nginx
  write_index
  write_checker
  write_service
  write_menu

  # kick once to create JSONs
  "$CHECK_BIN" once || true

  msg "Install complete!"
}

# ---------- entry ----------
case "${1:-}" in
  --do-install) main_install ;;
  --fix-nginx)  do_fix_nginx ;;
  --uninstall)  do_uninstall ;;
  --update)     do_update ;;
  *)            # default show menu
                write_menu
                exec "$MENU_BIN"
                ;;
esac
