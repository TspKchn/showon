#!/bin/bash
# =====================================================
# ShowOn Installer V.1.0.3
# Online / Sysinfo / Traffic Dashboard
# รองรับ 3x-ui + Xray-core (2 แบบ)
# =====================================================

set -e
VERSION="V.1.0.3"

# สีข้อความ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

install_script() {
    echo -e "${CYAN}[INFO]${NC} Installing ShowOn ${VERSION}..."
    apt update -y && apt upgrade -y
    apt install -y curl jq net-tools psmisc nginx iproute2

    WWW_DIR="/var/www/html/server"
    mkdir -p "$WWW_DIR"
    chmod -R 755 "$WWW_DIR"

    # -----------------------------
    # nginx config
    # -----------------------------
    rm -f /etc/nginx/sites-enabled/server_checker /etc/nginx/sites-available/server_checker
    cat >/etc/nginx/sites-available/server_checker <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    root /var/www/html/server;
    index index.html;

    location / {
        autoindex on;
    }
}
EOF
    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    nginx -t && systemctl restart nginx

    # -----------------------------
    # online-check.service
    # -----------------------------
    cat >/usr/local/bin/online-check.sh <<'EOF'
#!/bin/bash
set -e
WWW_DIR="/var/www/html/server"

# Dummy counters
ssh_on=$(ss -nt state established | grep -E ':22 ' | wc -l)
openvpn_on=0
dropbear_on=$(pgrep dropbear | wc -l)
v2ray_on=0

# JSON export
JSON=$(jq -n \
  --arg onlines "$(( ssh_on + openvpn_on + dropbear_on + v2ray_on ))" \
  --arg limit "2000" \
  --arg ssh "$ssh_on" \
  --arg openvpn "$openvpn_on" \
  --arg dropbear "$dropbear_on" \
  --arg v2ray "$v2ray_on" \
  '{onlines:$onlines|tonumber, limite:$limit|tonumber, ssh:$ssh|tonumber, openvpn:$openvpn|tonumber, dropbear:$dropbear|tonumber, v2ray:$v2ray|tonumber}')

echo "$JSON" > "$WWW_DIR/online_app.json"
EOF
    chmod +x /usr/local/bin/online-check.sh

    cat >/etc/systemd/system/online-check.service <<'EOF'
[Unit]
Description=Online Users JSON Generator
After=network.target

[Service]
ExecStart=/usr/local/bin/online-check.sh
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

    cat >/etc/systemd/system/online-check.timer <<'EOF'
[Unit]
Description=Run online-check.service every 1 min

[Timer]
OnBootSec=10
OnUnitActiveSec=60

[Install]
WantedBy=timers.target
EOF
    systemctl enable --now online-check.timer
# -----------------------------
    # sysinfo.service
    # -----------------------------
    cat >/usr/local/bin/sysinfo.sh <<'EOF'
#!/bin/bash
set -e
WWW_DIR="/var/www/html/server"

uptime=$(uptime -p | cut -d' ' -f2-)
cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
ram_used=$(free -m | awk '/Mem:/ {print $3}')
ram_total=$(free -m | awk '/Mem:/ {print $2}')
disk_used=$(df -h / | awk 'NR==2 {print $3}')
disk_total=$(df -h / | awk 'NR==2 {print $2}')

JSON=$(jq -n \
  --arg uptime "$uptime" \
  --arg cpu "$cpu" \
  --arg ram_used "$ram_used" \
  --arg ram_total "$ram_total" \
  --arg disk_used "$disk_used" \
  --arg disk_total "$disk_total" \
  '{uptime:$uptime, cpu:$cpu|tonumber, ram_used:$ram_used|tonumber, ram_total:$ram_total|tonumber, disk_used:$disk_used, disk_total:$disk_total}')

echo "$JSON" > "$WWW_DIR/sysinfo.json"
EOF
    chmod +x /usr/local/bin/sysinfo.sh

    cat >/etc/systemd/system/sysinfo.service <<'EOF'
[Unit]
Description=System Info JSON Generator
After=network.target

[Service]
ExecStart=/usr/local/bin/sysinfo.sh
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

    cat >/etc/systemd/system/sysinfo.timer <<'EOF'
[Unit]
Description=Run sysinfo.service every 1 min

[Timer]
OnBootSec=15
OnUnitActiveSec=60

[Install]
WantedBy=timers.target
EOF
    systemctl enable --now sysinfo.timer

    # -----------------------------
    # traffic.service
    # -----------------------------
    cat >/usr/local/bin/traffic.sh <<'EOF'
#!/bin/bash
set -e
WWW_DIR="/var/www/html/server"

# network interface หลัก (แก้ได้ เช่น eth0 ens3)
iface=$(ip route show default | awk '/default/ {print $5}')

rx=$(cat /sys/class/net/$iface/statistics/rx_bytes)
tx=$(cat /sys/class/net/$iface/statistics/tx_bytes)

JSON=$(jq -n \
  --arg rx "$rx" \
  --arg tx "$tx" \
  '{download:$rx|tonumber, upload:$tx|tonumber}')

echo "$JSON" > "$WWW_DIR/traffic.json"
EOF
    chmod +x /usr/local/bin/traffic.sh

    cat >/etc/systemd/system/traffic.service <<'EOF'
[Unit]
Description=VPN Traffic JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash /usr/local/bin/traffic.sh
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

    cat >/etc/systemd/system/traffic.timer <<'EOF'
[Unit]
Description=Run traffic.service every 5 sec

[Timer]
OnBootSec=20
OnUnitActiveSec=5

[Install]
WantedBy=timers.target
EOF
    systemctl enable --now traffic.timer
# -----------------------------
    # index.html
    # -----------------------------
    cat >"$WWW_DIR/index.html" <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>ShowOn Dashboard</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
 body { font-family: Arial, sans-serif; margin:20px; background:#111; color:#eee; }
 h1 { color:#0f0; }
 table { border-collapse: collapse; width:100%; margin-bottom:20px; }
 td,th { border:1px solid #555; padding:8px; text-align:left; }
 #trafficChart { background:#222; padding:10px; border-radius:8px; }
</style>
</head>
<body>
  <h1>ShowOn Dashboard</h1>

  <h2>Online Users</h2>
  <pre id="online"></pre>

  <h2>System Info</h2>
  <pre id="sysinfo"></pre>

  <h2>Traffic</h2>
  <canvas id="trafficChart"></canvas>

<script>
async function loadData(){
  try {
    let online = await fetch("online_app.json").then(r=>r.json());
    document.getElementById("online").textContent = JSON.stringify(online,null,2);
  } catch(e){ document.getElementById("online").textContent="Error loading online_app.json"; }

  try {
    let sys = await fetch("sysinfo.json").then(r=>r.json());
    document.getElementById("sysinfo").textContent = JSON.stringify(sys,null,2);
  } catch(e){ document.getElementById("sysinfo").textContent="Error loading sysinfo.json"; }

  try {
    let t = await fetch("traffic.json").then(r=>r.json());
    const ctx = document.getElementById("trafficChart").getContext("2d");
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Traffic'],
        datasets: [
          {label: 'Download', data: [t.download], backgroundColor: 'blue'},
          {label: 'Upload', data: [t.upload], backgroundColor: 'green'}
        ]
      },
      options: {
        indexAxis: 'y',
        responsive: true,
        scales: { x: { beginAtZero: true, title:{display:true, text:'Bytes'} } }
      }
    });
  } catch(e){ document.getElementById("trafficChart").outerHTML="<p>Error loading traffic.json</p>"; }
}
loadData(); setInterval(loadData,5000);
</script>
</body>
</html>
EOF
    chmod 644 "$WWW_DIR/index.html"
    chown www-data:www-data "$WWW_DIR/index.html"

    echo -e "${GREEN}[SUCCESS]${NC} Installed ShowOn ${VERSION}"
    echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
    read -p "Press Enter to return to menu..." _
    show_menu
}

uninstall_script() {
    echo -e "${YELLOW}[INFO]${NC} Uninstalling ShowOn Script..."

    systemctl stop online-check.service sysinfo.service traffic.service 2>/dev/null
    systemctl disable online-check.service sysinfo.service traffic.service 2>/dev/null

    rm -f /etc/systemd/system/online-check.service
    rm -f /etc/systemd/system/online-check.timer
    rm -f /etc/systemd/system/sysinfo.service
    rm -f /etc/systemd/system/sysinfo.timer
    rm -f /etc/systemd/system/traffic.service
    rm -f /etc/systemd/system/traffic.timer

    rm -f /usr/local/bin/online-check.sh
    rm -f /usr/local/bin/sysinfo.sh
    rm -f /usr/local/bin/traffic.sh
    rm -f /etc/showon.conf

    rm -rf /var/www/html/server
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker

    systemctl daemon-reload
    systemctl restart nginx

    echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
    read -p "Press Enter to reboot..." _
    reboot
}

show_menu() {
    clear
    echo -e "==============================="
    echo -e "   ShowOn Script Manager ${VERSION}"
    echo -e "==============================="
    echo "1) Install Script"
    echo "2) Uninstall Script"
    echo "0) Exit"
    echo "==============================="
    read -p "Choose an option [0,1,2]: " choice
    case $choice in
        1) install_script ;;
        2) uninstall_script ;;
        0) exit 0 ;;
        *) echo -e "${RED}[ERROR]${NC} Invalid choice..."; sleep 2; show_menu ;;
    esac
}

# Create showon command
cat >/usr/local/bin/showon <<EOF
#!/bin/bash
bash "$(realpath "$0")"
EOF
chmod +x /usr/local/bin/showon

# Run menu
show_menu
