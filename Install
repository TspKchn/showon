#!/bin/bash
VERSION="V.1.0.0"
INSTALL_DATE=$(date '+%Y-%m-%d %H:%M:%S')
GITHUB_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"
SERVICE_NAME="online-check.service"
SHOWON_CMD="/usr/local/bin/showon"

# === DEPENDENCIES ===
install_deps() {
  echo "[INFO] Installing dependencies..."
  apt update -y && apt upgrade -y
  apt install -y curl jq net-tools iproute2 sqlite3 nginx bc || true
}

# === DETECT PANEL URL ===
detect_panel() {
  LOCAL_IP=$(hostname -I | awk '{print $1}')
  PANEL_PORT=$(sqlite3 /etc/x-ui/x-ui.db "SELECT port FROM panel LIMIT 1;" 2>/dev/null || echo "")
  [[ -z "$PANEL_PORT" ]] && PANEL_PORT=$(grep -oP '(?<="port":)[0-9]+' /usr/local/x-ui/bin/config.json 2>/dev/null | head -n1)
  [[ -z "$PANEL_PORT" ]] && PANEL_PORT=88
  PANEL_URL="https://${LOCAL_IP}:${PANEL_PORT}"
  SHOW_URL="https://${LOCAL_IP}:82/server/"
}

# === NGINX ===
setup_nginx() {
  echo "[INFO] Setting up Nginx..."
  mkdir -p /var/www/html/server
  cat >/etc/nginx/sites-available/server_checker <<EOF
server {
    listen 82 default_server;
    root /var/www/html/server;
    index index.html;
    location / {
        try_files \$uri \$uri/ =404;
    }
}
EOF
  ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
  nginx -t && systemctl restart nginx
}

# === ONLINE CHECK SCRIPT ===
setup_checker() {
  echo "[INFO] Setting up online-check service..."
  cat >/usr/local/bin/online-check.sh <<'EOF'
#!/bin/bash
set -e
PANEL_URL=$(grep "3X-UI Panel URL" /usr/local/bin/showon | awk '{print $6}')
USERNAME=$(grep "USERNAME=" /usr/local/bin/showon | awk -F'"' '{print $2}')
PASSWORD=$(grep "PASSWORD=" /usr/local/bin/showon | awk -F'"' '{print $2}')

while true; do
  COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" | grep 3x-ui | awk '{print $7}' | cut -d';' -f1)

  CLIENTS=$(curl -sk -b "3x-ui=$COOKIE" -X POST "$PANEL_URL/panel/inbound/onlines" \
    -H "Content-Type: application/x-www-form-urlencoded" | jq -r '.obj')

  ONLINE_COUNT=$(echo "$CLIENTS" | jq 'length')
  UP=$(cat /proc/net/dev | awk '/eth0/ {print $2}')
  DOWN=$(cat /proc/net/dev | awk '/eth0/ {print $10}')
  CPU=$(top -bn1 | grep "Cpu(s)" | awk '{print 100-$8"%"}')
  RAM=$(free -m | awk '/Mem/ {printf "%d/%dMB (%.0f%%)", $3,$2,$3*100/$2 }')
  UPTIME=$(uptime -p)

  cat >/var/www/html/server/online_app.json <<JSON
{"total":$ONLINE_COUNT,"upload":$UP,"download":$DOWN,
"cpu":"$CPU","ram":"$RAM","uptime":"$UPTIME"}
JSON

  cat >/var/www/html/server/index.html <<HTML
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Online Users</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
:root { --bg:#f4f4f9; --text:#000; --card:#fff; }
[data-theme="dark"] { --bg:#1e1e1e; --text:#fff; --card:#2c2c2c; }
body { font-family:Arial,sans-serif; background:var(--bg); color:var(--text); margin:20px; transition:0.3s;}
.card { background:var(--card); padding:20px; margin:10px; border-radius:10px; box-shadow:0 2px 5px rgba(0,0,0,0.1);}
#toggle { position:fixed; top:10px; right:10px; cursor:pointer; padding:8px 14px; border-radius:6px; background:#666; color:#fff; }
</style>
</head>
<body>
<button id="toggle">ðŸŒ“</button>
<div class="card"><h2>Online Clients: $ONLINE_COUNT</h2></div>
<div class="card"><canvas id="clientChart"></canvas></div>
<div class="card"><canvas id="trafficChart"></canvas></div>
<div class="card"><h3>System Info</h3>
<p><b>CPU:</b> $CPU</p><p><b>RAM:</b> $RAM</p><p><b>Uptime:</b> $UPTIME</p></div>
<script>
const prefersDark=window.matchMedia("(prefers-color-scheme: dark)").matches;
if(prefersDark) document.documentElement.setAttribute("data-theme","dark");
document.getElementById("toggle").onclick=()=>{document.documentElement.toggleAttribute("data-theme");};

// === Client Online (Horizontal Bar) ===
new Chart(document.getElementById('clientChart'),{type:'bar',
 data:{labels:['Clients'],datasets:[{label:'Online',data:[$ONLINE_COUNT],backgroundColor:'#ff9800'}]},
 options:{indexAxis:'y',scales:{x:{ticks:{color:'var(--text)'}},y:{ticks:{color:'var(--text)'}}},plugins:{legend:{labels:{color:'var(--text)'}}}}});

// === Upload / Download ===
new Chart(document.getElementById('trafficChart'),{type:'bar',
 data:{labels:['Upload','Download'],datasets:[{label:'Bytes',data:[$UP,$DOWN],backgroundColor:['#2196f3','#4caf50']}]},
 options:{scales:{x:{ticks:{color:'var(--text)'}},y:{ticks:{color:'var(--text)'}}},plugins:{legend:{labels:{color:'var(--text)'}}}}});
</script>
</body>
</html>
HTML
  sleep 5
done
EOF

  chmod +x /usr/local/bin/online-check.sh

  cat >/etc/systemd/system/$SERVICE_NAME <<EOF
[Unit]
Description=Online Users Checker
After=network.target

[Service]
ExecStart=/usr/local/bin/online-check.sh
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
  systemctl daemon-reexec
  systemctl enable $SERVICE_NAME --now
}

# === MENU ===
show_menu() {
  detect_panel
  LATEST_VERSION=$(curl -s $GITHUB_URL | grep -m1 '^VERSION=' | awk -F'"' '{print $2}')
  LATEST_DATE=$(curl -sI $GITHUB_URL | grep -i '^last-modified:' | sed 's/Last-Modified: //I')
  LATEST_DATE_FMT=$(date -d "$LATEST_DATE" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "")

  clear
  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : $VERSION"
  echo " Last Update: $INSTALL_DATE"
  echo "------------------------------------"
  echo " 3X-UI Panel URL : $PANEL_URL"
  echo " Show Online URL : $SHOW_URL"
  echo "------------------------------------"
  echo " Latest GitHub Version: $LATEST_VERSION"
  echo " Latest Update Date   : $LATEST_DATE_FMT"
  echo "===================================="
  echo "1). Install Script"
  echo "2). Restart All Service"
  echo "3). Uninstall"
  echo "4). Update"
  echo "5). View Update Logs"
  echo "6). Fix Nginx"
  echo "0). Exit"
  echo "------------------------------------"
  read -p "Select option: " choice
  case $choice in
    1) echo "[INFO] Starting Install..."; install_deps; setup_nginx; setup_checker; echo "[SUCCESS] Install complete!";;
    2) echo "[INFO] Restarting services..."; systemctl restart $SERVICE_NAME nginx;;
    3) echo "[INFO] Uninstalling..."; systemctl disable $SERVICE_NAME --now; rm -f /usr/local/bin/online-check.sh $SHOWON_CMD; echo "[SUCCESS] Uninstalled.";;
    4) echo "[INFO] Updating script..."; bash <(curl -fsSL $GITHUB_URL);;
    5) journalctl -u $SERVICE_NAME -n 50 --no-pager;;
    6) echo "[INFO] Fixing Nginx..."; nginx -t && systemctl restart nginx && echo "[OK] Nginx fixed." || echo "[ERR] Nginx config error.";;
    0) exit 0;;
    *) echo "[ERROR] Invalid choice: $choice";;
  esac
}

# === INSTALL MENU COMMAND ===
install_showon_cmd() {
  cat >$SHOWON_CMD <<EOF
#!/bin/bash
bash /root/Install
EOF
  chmod +x $SHOWON_CMD
}

# RUN
install_showon_cmd
show_menu
