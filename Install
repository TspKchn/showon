#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.3 (Full)
# Author: TspKchn
# =====================================================

VERSION="V.1.0.3"
REPO_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ==========================
# Colors
# ==========================
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
CYAN="\e[36m"
NC="\e[0m"

SHOWON_CMD="/usr/local/bin/showon"
WWW_DIR="/var/www/html/server"
SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYSINFO="/usr/local/bin/sysinfo.sh"
SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"
SERVICE_TRAFFIC="/etc/systemd/system/traffic.service"
CONF_FILE="/etc/showon.conf"

# ==========================
# Menu Function
# ==========================
show_menu() {
    clear
    echo -e "==============================="
    echo -e "   ShowOn Script Manager ${VERSION}"
    echo -e "==============================="

    # Check update
    LATEST_VERSION=$(curl -s "$REPO_URL" | grep -m1 "VERSION=" | cut -d'"' -f2)
    if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "$VERSION" ]]; then
        echo -e "${YELLOW}[UPDATE AVAILABLE]${NC} Latest: ${LATEST_VERSION} (Current: ${VERSION})"
        read -p "Press Enter to update now, or Ctrl+C to cancel..." _
        wget -q -O /root/Install "$REPO_URL"
        chmod +x /root/Install
        echo -e "${GREEN}[SUCCESS]${NC} Updated to ${LATEST_VERSION}"
        echo -e "${CYAN}[INFO]${NC} Please run 'showon' again to load the new version."
        exit 0
    else
        echo -e "${GREEN}[INFO]${NC} You are using the latest version."
    fi

    echo "1) Install Script"
    echo "2) Uninstall Script"
    echo "0) Exit"
    echo "==============================="
    read -p "Choose an option [0,1,2]: " choice

    case $choice in
        1) install_script ;;
        2) uninstall_script ;;
        0) exit 0 ;;
        *) echo -e "${RED}[ERROR] Invalid choice...${NC}" ; sleep 2 ; show_menu ;;
    esac
}

# ==========================
# Install Script
# ==========================
install_script() {
    echo -e "${CYAN}[INFO]${NC} Updating system..."
    apt update -y && apt upgrade -y

    echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
    apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates

    mkdir -p "$WWW_DIR"
    chmod -R 755 "$WWW_DIR"

    # -----------------------------
    # Detect Mode + Ask Config
    # -----------------------------
    if [ -f /etc/x-ui/x-ui.db ]; then
        # Mode 1: 3x-ui
        read -p "Enter 3x-ui IP (default 127.0.0.1): " PANEL_IP
        PANEL_IP=${PANEL_IP:-127.0.0.1}

        read -p "Enter 3x-ui Port (default 88): " PANEL_PORT
        PANEL_PORT=${PANEL_PORT:-88}

        PANEL_URL="https://${PANEL_IP}:${PANEL_PORT}"
        echo -e "${CYAN}[INFO]${NC} Using PANEL_URL = $PANEL_URL"

        read -p "Enter 3x-ui username: " USERNAME
        read -p "Enter 3x-ui password: " PASSWORD

        cat >"$CONF_FILE" <<EOF
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"
WWW_DIR="$WWW_DIR"
EOF
        chmod 600 "$CONF_FILE"

    elif [ -f /usr/local/etc/xray/config.json ] || [ -f /etc/xray/config.json ]; then
        # Mode 2/3: Xray-core → ไม่ต้องถามอะไร
        cat >"$CONF_FILE" <<EOF
WWW_DIR="$WWW_DIR"
EOF
        chmod 600 "$CONF_FILE"

    else
        echo -e "${YELLOW}[WARN]${NC} ไม่พบทั้ง 3x-ui หรือ Xray-core config.json"
        sleep 2
    fi

    # -----------------------------
    # Limit User Online
    # -----------------------------
    read -p "Limit User Online (default 2000): " LIMIT
    LIMIT=${LIMIT:-2000}
    echo "LIMIT=$LIMIT" >> "$CONF_FILE"

    # -----------------------------
    # online-check.sh
    # -----------------------------
    cat >"$SCRIPT_ONLINE" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf
LIMIT=${LIMIT:-2000}

# -------- SSH --------
_ons=$(ss -nt state established | grep -E ':22 ' | wc -l)

# -------- OpenVPN --------
_onop=0
[ -f /etc/openvpn/server/openvpn-status.log ] && \
  _onop=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || true)

# -------- Dropbear --------
_ondrp=$(pgrep dropbear | wc -l)

# -------- V2Ray/Xray --------
_onv2=0

if [ -f /etc/x-ui/x-ui.db ]; then
    COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
      | grep 3x-ui | awk '{print $7}' || true)

    if [ -n "$COOKIE" ]; then
        _onv2=$(curl -sk -b "3x-ui=$COOKIE" -X POST \
          "$PANEL_URL/panel/inbound/onlines" \
          -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
          | jq '.obj | length' 2>/dev/null || echo "0")
    fi

elif [ -f /usr/local/etc/xray/config.json ]; then
    LOG_DIR="/var/log/xray"
    if [ -d "$LOG_DIR" ]; then
        _onv2=$(grep "accepted" "$LOG_DIR"/*.log 2>/dev/null | \
            tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    fi

elif [ -f /etc/xray/config.json ]; then
    LOG_FILE="/var/log/xray/access.log"
    if [ -f "$LOG_FILE" ]; then
        _onv2=$(grep "accepted" "$LOG_FILE" 2>/dev/null | \
            tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    fi
fi

JSON=$(jq -n \
  --arg onlines "$(( _ons + _onop + _ondrp + _onv2 ))" \
  --arg ssh "$_ons" \
  --arg openvpn "$_onop" \
  --arg dropbear "$_ondrp" \
  --arg v2ray "$_onv2" \
  --arg limite "$LIMIT" \
  '[{onlines:$onlines|tonumber, limite:$limite|tonumber, ssh:$ssh|tonumber, openvpn:$openvpn|tonumber, dropbear:$dropbear|tonumber, v2ray:$v2ray|tonumber}]')

echo "$JSON" > "$WWW_DIR/online_app.json"
EOF
    chmod +x "$SCRIPT_ONLINE"

    # -----------------------------
    # sysinfo.sh
    # -----------------------------
    cat >"$SCRIPT_SYSINFO" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf

uptime=$(uptime -p | sed 's/up //')
cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8"%"}')
mem_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3 " / " $2}')

JSON=$(jq -n \
  --arg uptime "$uptime" \
  --arg cpu_usage "$cpu_usage" \
  --arg ram_usage "$mem_usage" \
  --arg disk_usage "$disk_usage" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}')

echo "$JSON" > "$WWW_DIR/sysinfo.json"
EOF
    chmod +x "$SCRIPT_SYSINFO"

    # -----------------------------
    # Services
    # -----------------------------
    cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=Online Users JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_ONLINE; sleep 5; done'
Restart=always
RestartSec=5
EOF

    cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=System Info JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_SYSINFO; sleep 5; done'
Restart=always
RestartSec=5
EOF

    # -----------------------------
    # Traffic Service
    # -----------------------------
    cat >"$SERVICE_TRAFFIC" <<'EOF'
[Unit]
Description=VPN Traffic JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c '
while true; do
  WWW_DIR="/var/www/html/server"

  ssh_down=0; ssh_up=0
  dropbear_down=0; dropbear_up=0
  openvpn_down=0; openvpn_up=0
  v2ray_down=0; v2ray_up=0

  if [ -f /etc/openvpn/server/openvpn-status.log ]; then
    openvpn_down=$(grep -a "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log | awk -F, "{sum+=\$4} END {print sum+0}")
    openvpn_up=$(grep -a "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log | awk -F, "{sum+=\$5} END {print sum+0}")
  fi

  if [ -f /etc/x-ui/x-ui.db ]; then
    source /etc/showon.conf
    COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
      | grep 3x-ui | awk "{print \$7}")
    if [ -n "$COOKIE" ]; then
      STATS=$(curl -sk -b "3x-ui=$COOKIE" "$PANEL_URL/panel/inbound/list")
      v2ray_down=$(echo "$STATS" | jq "[.obj[].down] | add")
      v2ray_up=$(echo "$STATS" | jq "[.obj[].up] | add")
    fi
  elif [ -f /usr/local/etc/xray/config.json ]; then
    LOG_DIR="/var/log/xray"
    if ls $LOG_DIR/*log >/dev/null 2>&1; then
      v2ray_down=$(grep -ha "" $LOG_DIR/*log | awk "{sum+=\$10} END {print sum+0}")
      v2ray_up=$(grep -ha "" $LOG_DIR/*log | awk "{sum+=\$11} END {print sum+0}")
    fi
  elif [ -f /etc/xray/config.json ]; then
    LOG_FILE="/var/log/xray/access.log"
    if [ -f "$LOG_FILE" ]; then
      v2ray_down=$(awk "{sum+=\$10} END {print sum+0}" "$LOG_FILE")
      v2ray_up=$(awk "{sum+=\$11} END {print sum+0}" "$LOG_FILE")
    fi
  fi

  JSON=$(jq -n \
    --argjson ssh_down "$ssh_down" \
    --argjson ssh_up "$ssh_up" \
    --argjson openvpn_down "$openvpn_down" \
    --argjson openvpn_up "$openvpn_up" \
    --argjson dropbear_down "$dropbear_down" \
    --argjson dropbear_up "$dropbear_up" \
    --argjson v2ray_down "$v2ray_down" \
    --argjson v2ray_up "$v2ray_up" \
    "{ssh:{down:\$ssh_down,up:\$ssh_up}, openvpn:{down:\$openvpn_down,up:\$openvpn_up}, dropbear:{down:\$dropbear_down,up:\$dropbear_up}, v2ray:{down:\$v2ray_down,up:\$v2ray_up}}")

  echo "$JSON" > "$WWW_DIR/traffic.json"
  sleep 5
done
'
Restart=always
RestartSec=5
EOF

    systemctl daemon-reexec
    systemctl enable --now online-check.service
    systemctl enable --now sysinfo.service
    systemctl enable --now traffic.service

    # -----------------------------
    # Nginx config
    # -----------------------------
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker

    cat >/etc/nginx/sites-available/server_checker <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }

    location /server/ {
        alias /var/www/html/server/;
        index index.html;
    }
}
EOF

    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    nginx -t && systemctl reload nginx

    # -----------------------------
    # index.html
    # -----------------------------
    cat >"$WWW_DIR/index.html" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>ShowOn Dashboard ${VERSION}</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { background:#111; color:#fff; font-family:Arial,sans-serif; padding:20px; }
    h1 { color:#0f0; }
    .card { background:#222; padding:15px; margin-bottom:20px; border-radius:8px; }
    table { width:100%; border-collapse:collapse; margin-top:10px; }
    th, td { border:1px solid #444; padding:8px; text-align:center; }
    th { background:#333; }
    .spinner {border:4px solid #333;border-top:4px solid #0f0;border-radius:50%;width:20px;height:20px;animation:spin 1s linear infinite;margin:auto;}
    @keyframes spin {100% {transform:rotate(360deg);}}
    @media (max-width:600px){body{font-size:14px;} h1{font-size:18px;} table{font-size:12px;}}
  </style>
</head>
<body>
  <h1>ShowOn Dashboard <span style="color:#0ff;">${VERSION}</span></h1>

  <div class="card">
    <h2>Online Summary</h2>
    <table>
      <thead>
        <tr><th>Onlines</th><th>Limit</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr>
      </thead>
      <tbody>
        <tr id="summary"><td colspan="6"><div class="spinner"></div></td></tr>
      </tbody>
    </table>
  </div>

  <div class="card">
    <h2>System & Network</h2>
    <div id="system"><div class="spinner"></div></div>
  </div>

  <div class="card">
    <h2>VPN Traffic</h2>
    <canvas id="trafficChart"></canvas>
  </div>

  <script>
    async function loadData() {
      try {
        const res = await fetch('./online_app.json?_='+Date.now());
        const d = await res.json();
        document.getElementById("summary").innerHTML =
          \`<td>\${d[0].onlines}</td><td>\${d[0].limite}</td><td>\${d[0].ssh}</td><td>\${d[0].openvpn}</td><td>\${d[0].dropbear}</td><td>\${d[0].v2ray}</td>\`;
      } catch { document.getElementById("summary").innerHTML = '<td colspan="6">Error</td>'; }

      try {
        const r2 = await fetch('./sysinfo.json?_='+Date.now());
        const s = await r2.json();
        document.getElementById("system").innerHTML =
          \`<b>Uptime:</b> \${s.uptime}<br>
           <b>CPU:</b> \${s.cpu_usage}<br>
           <b>RAM:</b> \${s.ram_usage}<br>
           <b>Disk:</b> \${s.disk_usage}\`;
      } catch { document.getElementById("system").innerHTML = 'Error'; }

      try {
        const r3 = await fetch('./traffic.json?_='+Date.now());
        const t = await r3.json();
        const labels = ['SSH','OpenVPN','Dropbear','V2Ray'];
        const downData = [t.ssh.down, t.openvpn.down, t.dropbear.down, t.v2ray.down];
        const upData   = [t.ssh.up,   t.openvpn.up,   t.dropbear.up,   t.v2ray.up];
        const ctx = document.getElementById('trafficChart').getContext('2d');
        if (window.trafficChart) window.trafficChart.destroy();
        window.trafficChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [
              { label: 'Download', data: downData, backgroundColor: 'rgba(0,123,255,0.7)' },
              { label: 'Upload',   data: upData,   backgroundColor: 'rgba(40,167,69,0.7)' }
            ]
          },
          options: {
            indexAxis: 'y',
            responsive: true,
            scales: {
              x: { beginAtZero: true, title: { display: true, text: 'Bytes' } }
            }
          }
        });
      } catch { 
        document.getElementById("trafficChart").outerHTML = '<p>Error loading traffic</p>'; 
      }
    }
    loadData(); setInterval(loadData,5000);
  </script>
</body>
</html>
EOF
    chmod 644 "$WWW_DIR/index.html"
    chown www-data:www-data "$WWW_DIR/index.html"

    # -----------------------------
    # Detect Mode Print
    # -----------------------------
    if [ -f /etc/x-ui/x-ui.db ]; then
        echo -e "${GREEN}[SUCCESS]${NC} Detected mode: 3x-ui"
    elif [ -f /usr/local/etc/xray/config.json ]; then
        echo -e "${GREEN}[SUCCESS]${NC} Detected mode: Xray-core (manual/binary install)"
    elif [ -f /etc/xray/config.json ]; then
        echo -e "${GREEN}[SUCCESS]${NC} Detected mode: Xray-core (deb package)"
    else
        echo -e "${YELLOW}[WARN]${NC} Detected mode: Unknown (not found)"
    fi

    echo -e "${GREEN}[SUCCESS]${NC} Installed ShowOn ${VERSION}"
    echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
    read -p "Press Enter to return to menu..." _
    show_menu
}
uninstall_script() {
    echo -e "${YELLOW}[INFO]${NC} Uninstalling ShowOn Script..."

    # Stop & disable all services
    systemctl stop online-check.service sysinfo.service traffic.service 2>/dev/null
    systemctl disable online-check.service sysinfo.service traffic.service 2>/dev/null

    # Remove service files
    rm -f /etc/systemd/system/online-check.service
    rm -f /etc/systemd/system/sysinfo.service
    rm -f /etc/systemd/system/traffic.service

    # Remove scripts & conf
    rm -f /usr/local/bin/online-check.sh
    rm -f /usr/local/bin/sysinfo.sh
    rm -f /etc/showon.conf

    # Remove web files & nginx config
    rm -rf /var/www/html/server
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker

    # Reload services
    systemctl daemon-reload
    systemctl restart nginx

    echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
    read -p "Press Enter to reboot..." _
    reboot
}

show_menu() {
    clear
    echo -e "==============================="
    echo -e "   ShowOn Script Manager ${VERSION}"
    echo -e "==============================="
    echo "1) Install Script"
    echo "2) Uninstall Script"
    echo "0) Exit"
    echo "==============================="
    read -p "Choose an option [0,1,2]: " choice
    case $choice in
        1) install_script ;;
        2) uninstall_script ;;
        0) exit 0 ;;
        *) echo -e "${RED}[ERROR]${NC} Invalid choice..."; sleep 2; show_menu ;;
    esac
}

# Create showon command
cat >/usr/local/bin/showon <<EOF
#!/bin/bash
bash "$(realpath "$0")"
EOF
chmod +x /usr/local/bin/showon

# Run menu
show_menu
