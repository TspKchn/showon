#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.5 (Full, Verbose)
# Author: TspKchn
# =====================================================

set -euo pipefail

VERSION="V.1.0.5"
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"   # ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π Update
SHOWON_CMD="/usr/local/bin/showon"

# ---------- Colors ----------
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; NC="\e[0m"

# ---------- Paths / Files ----------
WWW_DIR="/var/www/html/server"
NGX_AVAIL="/etc/nginx/sites-available/server_checker"
NGX_ENABL="/etc/nginx/sites-enabled/server_checker"

CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYSINFO="/usr/local/bin/sysinfo.sh"
SCRIPT_NETINFO="/usr/local/bin/netinfo.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"
SERVICE_NETINFO="/etc/systemd/system/netinfo.service"

# ---------- Helpers ----------
log(){ echo -e "$1" | tee -a "$DEBUG_LOG" >/dev/null; }

confirm(){ read -r -p "$1 [y/N]: " _a; [[ "${_a:-N}" =~ ^[Yy]$ ]]; }

press_enter(){ read -p "Press Enter to return to menu..." _; }

# =====================================================
# Menu
# =====================================================
show_menu(){
  clear
  echo -e "==============================="
  echo -e "   ShowOn Script Manager ${VERSION}"
  echo -e "==============================="
  echo -e "${GREEN}[OK]${NC} You are using the latest version."
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -p "Choose an option [0,1,2,3,4]: " choice
  case "${choice:-0}" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR] Invalid choice${NC}"; sleep 1; show_menu ;;
  esac
}

# =====================================================
# Update Script (‡∏à‡∏≤‡∏Å GitHub RAW)
# =====================================================
update_script(){
  echo -e "${CYAN}[INFO]${NC} Updating from GitHub RAW..."
  tmpf="$(mktemp)"
  if curl -fsSL "$REPO_RAW" -o "$tmpf"; then
    chmod +x "$tmpf"
    mv -f "$tmpf" /root/Install
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏ó‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á showon ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡∏°‡∏≤‡∏ó‡∏µ‡πà /root/Install ‡πÄ‡∏™‡∏°‡∏≠
    mkdir -p "$(dirname "$SHOWON_CMD")"
    cat >"$SHOWON_CMD" <<'EOF'
#!/bin/bash
exec bash /root/Install
EOF
    chmod +x "$SHOWON_CMD"
    echo -e "${GREEN}[SUCCESS]${NC} Updated. Run: ${CYAN}showon${NC}"
  else
    echo -e "${RED}[ERROR]${NC} Cannot fetch $REPO_RAW"
  fi
  press_enter; show_menu
}

# =====================================================
# Check Debug Log
# =====================================================
check_debug(){
  echo -e "${CYAN}[INFO]${NC} Tail last 200 lines of ${DEBUG_LOG}"
  echo "----------------------------------------"
  if [ -f "$DEBUG_LOG" ]; then
    tail -n 200 "$DEBUG_LOG"
  else
    echo "No debug log yet."
  fi
  echo "----------------------------------------"
  press_enter; show_menu
}

# =====================================================
# Install Script
# =====================================================
install_script(){
  : > "$DEBUG_LOG" || true
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..." | tee -a "$DEBUG_LOG"

  # --- deps ---
  echo -e "${CYAN}[INFO]${NC} Updating system packages..." | tee -a "$DEBUG_LOG"
  apt update -y >>"$DEBUG_LOG" 2>&1 || true
  echo -e "${CYAN}[INFO]${NC} Installing dependencies..." | tee -a "$DEBUG_LOG"
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates vnstat >>"$DEBUG_LOG" 2>&1

  mkdir -p "$WWW_DIR"; chmod 755 "$WWW_DIR"

  # --- Prompt config for 3x-ui (‡∏ß‡∏≤‡∏á URL ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡πâ‡∏ô) ---
  echo -e "${CYAN}[INFO]${NC} ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 3x-ui (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏î Enter ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ)"
  echo "  üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ '‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡πâ‡∏ô' ‡πÄ‡∏ä‡πà‡∏ô:"
  echo "     https://IP:PORT/SomeRandomPath  ‡∏´‡∏£‡∏∑‡∏≠  http://domain:port/"
  read -p "3X-UI URL (copy login link): " PANEL_RAW
  read -p "3X-UI Username: " XUI_USER
  read -p "3X-UI Password: " XUI_PASS
  read -p "Limit User Online (Default: 2000): " LIMIT
  LIMIT="${LIMIT:-2000}"

  # ‡∏õ‡∏£‡∏±‡∏ö URL ‡πÄ‡∏õ‡πá‡∏ô base ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó https?://host:port/path ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡∏î /login ‡∏ó‡πâ‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î / ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ 1 ‡∏ä‡∏¥‡πâ‡∏ô
  PANEL_BASE="$(echo "${PANEL_RAW}" | sed -E 's#/login$##' | sed -E 's#/*$##')"
  if [[ -z "${PANEL_BASE}" ]]; then PANEL_BASE=""; fi

  # Write conf
  cat >"$CONF_FILE" <<EOF
VERSION="$VERSION"
WWW_DIR="$WWW_DIR"
LIMIT="$LIMIT"
DEBUG_LOG="$DEBUG_LOG"

# 3x-ui (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á)
PANEL_BASE="$PANEL_BASE"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"
EOF
  chmod 600 "$CONF_FILE"

  # --- Try login to 3x-ui (optional) ---
  if [[ -n "$PANEL_BASE" && -n "$XUI_USER" && -n "$XUI_PASS" ]]; then
    echo -e "${CYAN}[INFO]${NC} Testing login to 3x-ui..." | tee -a "$DEBUG_LOG"
    if curl -sk -c /tmp/showon_cookie -X POST "$PANEL_BASE/login" \
        -d "username=$XUI_USER&password=$XUI_PASS" \
        | grep -q '"success":true'; then
      echo -e "${GREEN}[OK]${NC} Login to 3x-ui OK" | tee -a "$DEBUG_LOG"
    else
      echo -e "${YELLOW}[WARN]${NC} Login failed. V2Ray online count will rely on log/Xray only." | tee -a "$DEBUG_LOG"
    fi
  else
    echo -e "${YELLOW}[WARN]${NC} 3x-ui info not provided. Skipping panel login." | tee -a "$DEBUG_LOG"
  fi

  # --- Write nginx site ---
  echo -e "${CYAN}[INFO]${NC} Writing nginx site for /server/ ..." | tee -a "$DEBUG_LOG"
  mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
  cat >"$NGX_AVAIL" <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    # ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ root ‡πÅ‡∏•‡πâ‡∏ß redirect ‡πÑ‡∏õ /server/
    location = / {
        return 302 /server/;
    }

    # ‡πÉ‡∏´‡πâ /server/ ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ /var/www/html/server/
    location /server/ {
        alias /var/www/html/server/;
        index index.html;
        autoindex on;
    }
}
EOF
  ln -sf "$NGX_AVAIL" "$NGX_ENABL"
  nginx -t && systemctl reload nginx
  echo -e "${GREEN}[OK]${NC} Nginx ready at :82 (/server/)" | tee -a "$DEBUG_LOG"

  # --- Write scripts ---
  write_online_script
  write_sysinfo_script
  write_netinfo_script

  # --- Write services ---
  write_services

  # --- Write index.html (‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏£‡∏ö) ---
  write_index

  echo -e "${GREEN}[OK]${NC} Installed ShowOn ${VERSION}" | tee -a "$DEBUG_LOG"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  press_enter; show_menu
}

# =====================================================
# Uninstall Script (clean, no reboot)
# =====================================================
uninstall_script(){
  echo -e "${YELLOW}[INFO]${NC} Uninstalling ShowOn Script..." | tee -a "$DEBUG_LOG"

  systemctl stop online-check.service sysinfo.service netinfo.service 2>/dev/null || true
  systemctl disable online-check.service sysinfo.service netinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_SYSINFO" "$SERVICE_NETINFO"
  rm -f "$SCRIPT_ONLINE" "$SCRIPT_SYSINFO" "$SCRIPT_NETINFO"
  rm -f "$CONF_FILE"
  rm -rf "$WWW_DIR"
  rm -f "$NGX_AVAIL" "$NGX_ENABL"

  systemctl daemon-reload
  systemctl reload nginx || true

  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely." | tee -a "$DEBUG_LOG"
  press_enter; show_menu
}

# =====================================================
# Write: online-check.sh
# =====================================================
write_online_script(){
  cat >"$SCRIPT_ONLINE" <<'EOF'
#!/bin/bash
set -euo pipefail

CONF="/etc/showon.conf"
source "$CONF"

JSON_OUT="${WWW_DIR}/online_app.json"

# Debug helper
say(){ echo "[$(date +'%F %T')][ONLINE] $*" >>"$DEBUG_LOG"; }

# SSH
SSH_ON=$(ss -nt state established | awk '$3 ~ /:22$/ {c++} END{print c+0}')

# OpenVPN
OVPN_ON=0
if [ -f /etc/openvpn/server/openvpn-status.log ]; then
  OVPN_ON=$(grep -ac "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || true)
fi

# Dropbear
DB_ON=$(pgrep dropbear | wc -l | awk '{print $1+0}')

# V2Ray default
V2_ON=0

# Detect 3x-ui Panel via API (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
# ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ endpoint /panel/api/inbounds/onlines (POST {}) ‡∏ñ‡πâ‡∏≤ success
# ‡πÅ‡∏•‡πâ‡∏ß cross-check ‡∏î‡πâ‡∏ß‡∏¢ lastOnline (‡∏à‡∏≤‡∏Å /panel/api/inbounds/list) ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 60s ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
if [[ -n "${PANEL_BASE:-}" && -n "${XUI_USER:-}" && -n "${XUI_PASS:-}" ]]; then
  # ensure cookie (login once; cookie ‡∏≠‡∏≤‡∏¢‡∏∏‡∏¢‡∏≤‡∏ß‡∏û‡∏±‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á)
  if ! curl -sk -b /tmp/showon_cookie "$PANEL_BASE/panel/" -o /dev/null; then
    curl -sk -c /tmp/showon_cookie -X POST "$PANEL_BASE/login" \
      -d "username=$XUI_USER&password=$XUI_PASS" >/dev/null 2>&1 || true
  fi
  ONLINES_JSON=$(curl -sk -b /tmp/showon_cookie \
    -H "Content-Type: application/json" \
    -X POST "$PANEL_BASE/panel/api/inbounds/onlines" -d "{}" \
    || echo "")
  # ‡∏ñ‡πâ‡∏≤ endpoint ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤ ‡πÜ
  if ! echo "$ONLINES_JSON" | grep -q '"success":true'; then
    ONLINES_JSON=$(curl -sk -b /tmp/showon_cookie \
      -X POST "$PANEL_BASE/panel/inbound/onlines" \
      -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
      || echo "")
  fi

  # ‡πÑ‡∏î‡πâ list ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (string array) ‡πÑ‡∏´‡∏°
  if echo "$ONLINES_JSON" | grep -q '"success":true'; then
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î clientStats ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á lastOnline
    DETAILS=$(curl -sk -b /tmp/showon_cookie "$PANEL_BASE/panel/api/inbounds/list" || echo "")
    NOW=$(date +%s%3N)
    # onlines ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô array
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å email ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ lastOnline ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 60000 ms
    V2_ON=0
    for EMAIL in $(echo "$ONLINES_JSON" | jq -r '.obj[]? // empty'); do
      LAST=$(echo "$DETAILS" | jq ".obj[].clientStats[] | select(.email==\"$EMAIL\") | .lastOnline")
      if [[ "$LAST" != "null" && "$LAST" =~ ^[0-9]+$ ]]; then
        DIFF=$(( NOW - LAST ))
        if [ "$DIFF" -lt 60000 ]; then
          V2_ON=$(( V2_ON + 1 ))
        fi
      fi
    done
    say "3x-ui onlines filtered => V2=${V2_ON}"
  else
    say "3x-ui onlines endpoint not available (version diff?)"
  fi
fi

# Xray-core (manual/binary)
/bin/true
if [ "$V2_ON" -eq 0 ] && [ -f /usr/local/etc/xray/config.json ]; then
  LOG_DIR="/var/log/xray"
  if compgen -G "$LOG_DIR/*log" > /dev/null; then
    # ‡∏ô‡∏±‡∏ö source IP ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÜ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì tail ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡πâ‡∏≤‡∏¢)
    V2_ON=$(grep -ha "accepted" $LOG_DIR/*log 2>/dev/null | tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    say "Xray(manual) parsed logs => V2=${V2_ON}"
  fi
fi

# Xray-core (deb)
/bin/true
if [ "$V2_ON" -eq 0 ] && [ -f /etc/xray/config.json ]; then
  LOG_FILE="/var/log/xray/access.log"
  if [ -f "$LOG_FILE" ]; then
    V2_ON=$(grep -ha "accepted" "$LOG_FILE" 2>/dev/null | tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    say "Xray(deb) parsed log => V2=${V2_ON}"
  fi
fi

TOTAL=$(( SSH_ON + OVPN_ON + DB_ON + V2_ON ))

JSON=$(jq -n --arg onlines "$TOTAL" \
            --arg limite "$LIMIT" \
            --arg ssh "$SSH_ON" \
            --arg openvpn "$OVPN_ON" \
            --arg dropbear "$DB_ON" \
            --arg v2ray "$V2_ON" \
            '[{onlines:($onlines|tonumber), limite:($limite|tonumber), ssh:($ssh|tonumber), openvpn:($openvpn|tonumber), dropbear:($dropbear|tonumber), v2ray:($v2ray|tonumber)}]')

mkdir -p "$WWW_DIR"
echo "$JSON" > "$JSON_OUT"

say "online: $(echo "$JSON" | tr -d '\n')"
EOF
  chmod +x "$SCRIPT_ONLINE"
}

# =====================================================
# Write: sysinfo.sh
# =====================================================
write_sysinfo_script(){
  cat >"$SCRIPT_SYSINFO" <<'EOF'
#!/bin/bash
set -euo pipefail
source /etc/showon.conf

OUT="$WWW_DIR/sysinfo.json"
say(){ echo "[$(date +'%F %T')][SYS] $*" >>"$DEBUG_LOG"; }

uptime=$(uptime -p | sed 's/^up //')
cpu_usage=$(awk -v FS="[, ]+" '/Cpu\(s\)/ {printf("%.1f%%", 100-$8)}' <(LANG=C top -bn1))
mem_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3 " / " $2}')

JSON=$(jq -n --arg uptime "$uptime" \
             --arg cpu_usage "$cpu_usage" \
             --arg ram_usage "$mem_usage" \
             --arg disk_usage "$disk_usage" \
             '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}')

mkdir -p "$WWW_DIR"
echo "$JSON" > "$OUT"
say "sysinfo: $(echo "$JSON" | tr -d '\n')"
EOF
  chmod +x "$SCRIPT_SYSINFO"
}

# =====================================================
# Write: netinfo.sh  (vnstat + 3x-ui netTraffic)
# =====================================================
write_netinfo_script(){
  cat >"$SCRIPT_NETINFO" <<'EOF'
#!/bin/bash
set -euo pipefail
source /etc/showon.conf

OUT="$WWW_DIR/netinfo.json"
say(){ echo "[$(date +'%F %T')][NET] $*" >>"$DEBUG_LOG"; }

# vnstat totals (rx/tx bytes)
# ‡πÉ‡∏ä‡πâ --json ‡∏™‡∏£‡∏∏‡∏õ rx/tx ‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
VN_RX=0; VN_TX=0
if command -v vnstat >/dev/null 2>&1; then
  VN_JSON=$(vnstat --json 2>/dev/null || true)
  if [ -n "$VN_JSON" ]; then
    VN_RX=$(echo "$VN_JSON" | jq '[.interfaces[].traffic.total.rx] | add' 2>/dev/null || echo 0)
    VN_TX=$(echo "$VN_JSON" | jq '[.interfaces[].traffic.total.tx] | add' 2>/dev/null || echo 0)
  fi
fi

# 3x-ui netTraffic ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ
XUI_UP=0; XUI_DOWN=0
if [[ -n "${PANEL_BASE:-}" && -n "${XUI_USER:-}" && -n "${XUI_PASS:-}" ]]; then
  # ensure cookie
  if ! curl -sk -b /tmp/showon_cookie "$PANEL_BASE/panel/" -o /dev/null; then
    curl -sk -c /tmp/showon_cookie -X POST "$PANEL_BASE/login" \
      -d "username=$XUI_USER&password=$XUI_PASS" >/dev/null 2>&1 || true
  fi
  ST=$(curl -sk -b /tmp/showon_cookie "$PANEL_BASE/panel/api/server/status" || echo "")
  if echo "$ST" | grep -q '"success":true'; then
    XUI_UP=$(echo "$ST" | jq '.obj.netTraffic.sent' 2>/dev/null || echo 0)
    XUI_DOWN=$(echo "$ST" | jq '.obj.netTraffic.recv' 2>/dev/null || echo 0)
  fi
fi

JSON=$(jq -n \
  --argjson vn_rx "$VN_RX" \
  --argjson vn_tx "$VN_TX" \
  --argjson xui_up "$XUI_UP" \
  --argjson xui_down "$XUI_DOWN" \
  '{vnstat:{rx: $vn_rx, tx: $vn_tx}, v2ray:{up: $xui_up, down: $xui_down}}')

mkdir -p "$WWW_DIR"
echo "$JSON" > "$OUT"
say "netinfo: $(echo "$JSON" | tr -d '\n')"
EOF
  chmod +x "$SCRIPT_NETINFO"
}

# =====================================================
# Write: systemd services
# =====================================================
write_services(){
  cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=ShowOn Online Users JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=ShowOn System Info JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/sysinfo.sh; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_NETINFO" <<EOF
[Unit]
Description=ShowOn Network Traffic JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/netinfo.sh; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service
  systemctl enable --now sysinfo.service
  systemctl enable --now netinfo.service
}

# =====================================================
# Write: index.html
# =====================================================
write_index(){
  cat >"$WWW_DIR/index.html" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>ShowOn Dashboard ${VERSION}</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<style>
  body { background:#0f1115; color:#e8f0ff; font-family:system-ui,Arial,sans-serif; margin:0; padding:24px; }
  h1 { margin:0 0 16px; color:#7cf37c; }
  .grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(260px,1fr)); gap:16px; }
  .card { background:#151924; border:1px solid #22283a; border-radius:12px; padding:16px; }
  .card h2 { margin:0 0 10px; color:#86b7ff; font-size:18px; }
  table { width:100%; border-collapse:collapse; }
  th,td { border:1px solid #2a3046; padding:8px; text-align:center; }
  th { background:#1b2133; }
  .muted { color:#97a3b6; }
  .ok { color:#7cf37c; } .warn{color:#ffd16a;} .err{color:#ff7a7a;}
  .small{font-size:12px;}
</style>
</head>
<body>
  <h1>ShowOn Dashboard <span class="muted">${VERSION}</span></h1>

  <div class="grid">
    <div class="card">
      <h2>Online Summary</h2>
      <table>
        <thead><tr><th>Total</th><th>Limit</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr></thead>
        <tbody><tr id="sumrow"><td colspan="6" class="muted">Loading...</td></tr></tbody>
      </table>
      <div class="small muted">Updated every 5s</div>
    </div>

    <div class="card">
      <h2>System</h2>
      <div id="sys">Loading...</div>
    </div>

    <div class="card">
      <h2>Network Traffic</h2>
      <div id="net">Loading...</div>
      <div class="small muted">vnstat totals + 3x-ui netTraffic (if available)</div>
    </div>
  </div>

<script>
async function safeJSON(url){
  const r = await fetch(url + "?_=" + Date.now());
  if(!r.ok) throw new Error(r.status);
  return r.json();
}
function fmtBytes(n){ if(n<1024) return n+" B"; const k=1024; const u=["KB","MB","GB","TB","PB"]; let i=-1; do{n/=k;i++;}while(n>=k && i<u.length-1); return n.toFixed(2)+" "+u[i]; }

async function tick(){
  try{
    const a = await safeJSON('./online_app.json');
    const d = a[0];
    document.getElementById('sumrow').innerHTML =
      \`<td>\${d.onlines}</td><td>\${d.limite}</td><td>\${d.ssh}</td><td>\${d.openvpn}</td><td>\${d.dropbear}</td><td>\${d.v2ray}</td>\`;
  }catch(e){ document.getElementById('sumrow').innerHTML = '<td colspan="6" class="err">Error</td>'; }

  try{
    const s = await safeJSON('./sysinfo.json');
    document.getElementById('sys').innerHTML =
      \`<div><b>Uptime:</b> \${s.uptime}</div>
       <div><b>CPU:</b> \${s.cpu_usage}</div>
       <div><b>RAM:</b> \${s.ram_usage}</div>
       <div><b>Disk:</b> \${s.disk_usage}</div>\`;
  }catch(e){ document.getElementById('sys').innerHTML = '<span class="err">Error</span>'; }

  try{
    const n = await safeJSON('./netinfo.json');
    const vn = n.vnstat || {rx:0,tx:0};
    const vx = n.v2ray || {up:0,down:0};
    document.getElementById('net').innerHTML =
      \`<div><b>vnstat RX:</b> \${fmtBytes(vn.rx)} | <b>TX:</b> \${fmtBytes(vn.tx)}</div>
       <div><b>3x-ui Sent:</b> \${fmtBytes(vx.up)} | <b>Recv:</b> \${fmtBytes(vx.down)}</div>\`;
  }catch(e){ document.getElementById('net').innerHTML = '<span class="err">Error</span>'; }
}
tick(); setInterval(tick, 5000);
</script>
</body>
</html>
EOF
  chmod 644 "$WWW_DIR/index.html"
}

# =====================================================
# Ensure "showon" command points to /root/Install
# =====================================================
ensure_showon_cmd(){
  mkdir -p "$(dirname "$SHOWON_CMD")"
  cat >"$SHOWON_CMD" <<'EOF'
#!/bin/bash
exec bash /root/Install
EOF
  chmod +x "$SHOWON_CMD"
}

# =====================================================
# Bootstrap: write self to /root/Install & run menu
# =====================================================
# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å /root/Install ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏õ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡πà‡∏á showon
if [ "${BASH_SOURCE[0]}" != "/root/Install" ]; then
  mkdir -p /root
  cp -f "${BASH_SOURCE[0]}" /root/Install
fi
ensure_showon_cmd

show_menu
