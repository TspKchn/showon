#!/bin/bash
# =====================================================
# Show Online User Script - V.1.0.7
# Author: ChatGPT
# =====================================================

VERSION="V.1.0.7"
GITHUB_REPO="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"
INSTALL_PATH="/usr/local/bin/showon"

set -e

# ---------- Detect X-UI Panel URL ----------
detect_panel_url() {
    local ip=$(hostname -I | awk '{print $1}')
    local port=""

    if command -v sqlite3 &>/dev/null && [ -f /etc/x-ui/x-ui.db ]; then
        port=$(sqlite3 /etc/x-ui/x-ui.db "SELECT port FROM settings LIMIT 1;" 2>/dev/null || echo "")
    fi

    if [ -z "$port" ] && [ -f /usr/local/x-ui/bin/config.json ]; then
        port=$(jq -r '.inbounds[]?.port' /usr/local/x-ui/bin/config.json | head -n1)
    fi

    [ -z "$port" ] && port=88

    PANEL_URL="https://${ip}:${port}"
}

# ---------- Install ----------
install_script() {
    echo "[INFO] Updating system..."
    apt update -y && apt upgrade -y
    apt install -y curl jq net-tools iproute2 sqlite3 bc sysstat nginx

    detect_panel_url
    echo "[INFO] Detected X-UI Panel URL: $PANEL_URL"

    read -p "กรอก X-UI panel username: " USERNAME
    read -p "กรอก X-UI panel password: " PASSWORD

    mkdir -p /var/www/html/server

    # HTML Dashboard
    cat >/var/www/html/server/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Server Online Monitor</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
 body { font-family: Arial, sans-serif; margin: 20px; background: #f4f4f4; }
 h2 { margin-bottom: 10px; }
 table { border-collapse: collapse; width: 100%; margin-top: 20px; background: #fff; }
 th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
 .chart-container { width: 100%; margin: 20px auto; }
 pre { background: #222; color: #0f0; padding: 10px; border-radius: 5px; }
</style>
</head>
<body>
<h2>Online Users Monitor</h2>
<div class="chart-container"><canvas id="onlineChart"></canvas></div>
<h3>Clients Online</h3>
<table id="clientTable">
<thead><tr><th>Username</th></tr></thead>
<tbody></tbody>
</table>
<h3>System Info</h3>
<pre id="sysinfo">Loading...</pre>
<script>
async function fetchData(){
  try {
    let res = await fetch('online_app.json');
    let data = await res.json();
    let clients = data.clients || [];
    document.querySelector("#clientTable tbody").innerHTML =
      clients.map(c=>`<tr><td>${c}</td></tr>`).join("");

    onlineChart.data.labels = ['SSH','OpenVPN','Dropbear','V2Ray'];
    onlineChart.data.datasets[0].data = [data.ssh,data.openvpn,data.dropbear,data.v2ray];
    onlineChart.update();

    let sys = await fetch('sysinfo.json').then(r=>r.json());
    document.getElementById("sysinfo").textContent =
      `Uptime: ${sys.uptime}\nCPU: ${sys.cpu_usage}\nRAM: ${sys.ram_usage}\nDisk: ${sys.disk_usage}`;
  } catch(e) { console.error("Error fetching data", e); }
}
let ctx=document.getElementById('onlineChart').getContext('2d');
let onlineChart=new Chart(ctx,{
  type:'bar',
  data:{labels:[],datasets:[{label:'Online Users',data:[],backgroundColor:['#2196f3','#4caf50','#ff9800','#f44336']}]},
  options:{indexAxis:'y'}
});
setInterval(fetchData,5000); fetchData();
</script>
</body>
</html>
EOF

    # Online Checker
    cat >/usr/local/bin/online-check.sh <<EOF
#!/bin/bash
set -e
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"

fun_check(){
  local ssh=\$(ss -nt state established | grep -c ':22 ')
  local ovpn=0
  [ -f /etc/openvpn/server/openvpn-status.log ] && ovpn=\$(grep -c '10.' /etc/openvpn/server/openvpn-status.log || true)
  local drop=\$(pgrep dropbear | wc -l)

  local cookie=\$(curl -sk -c - -X POST "\$PANEL_URL/login" -H 'Content-Type: application/json' -d "{\"username\":\"\$USERNAME\",\"password\":\"\$PASSWORD\"}" | grep 3x-ui | awk '{print \$7}' || true)

  local clients="[]"
  local v2=0
  if [ -n "\$cookie" ]; then
    local json=\$(curl -sk -X POST -b "3x-ui=\$cookie" "\$PANEL_URL/panel/inbound/onlines" -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' || true)
    clients=\$(echo "\$json" | jq -r '.obj | map(.)')
    v2=\$(echo "\$clients" | jq 'length')
  fi

  echo "{\\"ssh\\":\$ssh,\\"openvpn\\":\$ovpn,\\"dropbear\\":\$drop,\\"v2ray\\":\$v2,\\"clients\\":\$clients}" >/var/www/html/server/online_app.json
}
while true; do fun_check; sleep 5; done
EOF
    chmod +x /usr/local/bin/online-check.sh

    # System Info Generator
    cat >/usr/local/bin/sysinfo-gen.sh <<'EOF'
#!/bin/bash
while true; do
  uptime=$(uptime -p | sed 's/up //')
  cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print 100-$8"%"}')
  ram=$(free -m | awk '/Mem/{print $3" / "$2" MB"}')
  disk=$(df -h / | awk 'NR==2{print $3" / "$2}')
  echo "{ \"uptime\":\"$uptime\", \"cpu_usage\":\"$cpu\", \"ram_usage\":\"$ram\", \"disk_usage\":\"$disk\" }" >/var/www/html/server/sysinfo.json
  sleep 5
done
EOF
    chmod +x /usr/local/bin/sysinfo-gen.sh

    # Systemd Services
    cat >/etc/systemd/system/online-check.service <<EOF
[Unit]
Description=Online Checker
After=network.target

[Service]
ExecStart=/usr/local/bin/online-check.sh
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    cat >/etc/systemd/system/sysinfo-gen.service <<EOF
[Unit]
Description=System Info Generator
After=network.target

[Service]
ExecStart=/usr/local/bin/sysinfo-gen.sh
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reexec
    systemctl enable --now online-check.service sysinfo-gen.service nginx
    echo "[DONE] Install complete"
}

# ---------- Menu ----------
menu_showon() {
  clear
  NOW=$(date '+%Y-%m-%d %H:%M:%S')
  detect_panel_url

  LATEST=$(curl -fsSL $GITHUB_REPO/VERSION 2>/dev/null || echo "Unknown")
  LATEST_DATE=$(curl -fsSL $GITHUB_REPO/UPDATED 2>/dev/null || echo "Unknown")

  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : $VERSION"
  echo " Last Update: $NOW"
  echo "------------------------------------"
  echo " Panel URL : $PANEL_URL"
  echo "------------------------------------"
  echo " Latest GitHub Version: $LATEST"
  echo " Latest Update Date   : $LATEST_DATE"
  echo "===================================="
  echo "1). Install Script"
  echo "2). Restart All Service"
  echo "3). Uninstall"
  echo "4). Update"
  echo "5). View Update Logs"
  echo "6). Fix Nginx"
  echo "0). Exit"
  echo "------------------------------------"
  read -p "Select option: " opt
  case $opt in
    1) install_script ;;
    2) systemctl restart online-check sysinfo-gen nginx ;;
    3) systemctl disable --now online-check sysinfo-gen nginx; rm -rf /var/www/html/server ;;
    4)
       echo "[INFO] Updating showon script..."
       curl -fsSL $GITHUB_REPO/Install -o $INSTALL_PATH
       chmod +x $INSTALL_PATH
       echo "[DONE] Updated to latest version. Please run: showon"
       exit 0
       ;;
    5) journalctl -u online-check.service -n 50 --no-pager ;;
    6) nginx -t && systemctl restart nginx ;;
    0) exit ;;
    *) echo "Invalid option" ;;
  esac
}

menu_showon
