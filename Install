#!/bin/bash
# =====================================================
# Script : Show Online User
# Version: V.1.0.0
# Support: Ubuntu 18.04 - 24.04
# Author : ChatGPT (custom for TspKchn)
# =====================================================

set -e

VERSION="V.1.0.0"
INSTALL_DIR="/usr/local/bin"
WWW_DIR="/var/www/html/server"
NGINX_SITE="/etc/nginx/sites-available/showon"
NGINX_LINK="/etc/nginx/sites-enabled/showon"

echo "===================================="
echo "     Install Script Show Online User"
echo "===================================="
echo "[INFO] Updating & installing dependencies..."
apt update -y && apt upgrade -y
apt install -y bc curl jq net-tools nginx sqlite3 iproute2

# -----------------------------
# Detect 3X-UI IP + PORT
# -----------------------------
echo "[INFO] Detecting 3X-UI Panel..."

# Default fallback
PANEL_PORT="88"

# Try detect from x-ui config
if [ -f "/etc/x-ui/x-ui.db" ]; then
  PANEL_PORT=$(sqlite3 /etc/x-ui/x-ui.db "SELECT port FROM setting LIMIT 1;")
elif [ -f "/usr/local/x-ui/bin/config.json" ]; then
  PANEL_PORT=$(jq -r '.port' /usr/local/x-ui/bin/config.json)
fi

# Fallback if still empty
if [ -z "$PANEL_PORT" ] || [ "$PANEL_PORT" == "null" ]; then
  PANEL_PORT="88"
fi

# Detect server IP
SERVER_IP=$(hostname -I | awk '{print $1}')
PANEL_URL="http://${SERVER_IP}:${PANEL_PORT}"

echo "[INFO] Detected 3X-UI: $PANEL_URL"

# -----------------------------
# Ask for User & Pass
# -----------------------------
read -p "กรอก X-UI panel username: " PANEL_USER
read -sp "กรอก X-UI panel password: " PANEL_PASS
echo ""

# Save credentials (for online-check.sh to use)
CRED_FILE="/usr/local/etc/showon-cred"
mkdir -p /usr/local/etc
cat > $CRED_FILE <<EOF
PANEL_URL="$PANEL_URL"
PANEL_USER="$PANEL_USER"
PANEL_PASS="$PANEL_PASS"
EOF

chmod 600 $CRED_FILE
echo "[INFO] Credentials saved at $CRED_FILE"

# -----------------------------
# Prepare WWW directory
# -----------------------------
mkdir -p $WWW_DIR
chown -R www-data:www-data $WWW_DIR

echo "[INFO] Part 1 complete. Next: Online-check.sh & systemd..."
# -----------------------------
# Install online-check.sh
# -----------------------------
cat > ${INSTALL_DIR}/online-check.sh <<'EOF'
#!/bin/bash
set -e

CRED_FILE="/usr/local/etc/showon-cred"
OUTPUT_JSON="/var/www/html/server/online_app.json"

if [ ! -f "$CRED_FILE" ]; then
  echo "[ERROR] Credential file not found: $CRED_FILE"
  exit 1
fi

source $CRED_FILE

# -----------------------------
# Function: Get V2Ray Online
# -----------------------------
get_v2ray_online() {
  COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$PANEL_USER\",\"password\":\"$PANEL_PASS\"}" \
    | grep 3x-ui | awk '{print $7}' || true)

  if [ -z "$COOKIE" ]; then
    echo 0
    return
  fi

  RES=$(curl -sk -b "3x-ui=$COOKIE" -X POST \
    "$PANEL_URL/panel/inbound/onlines" \
    -H "Accept: application/json, text/plain, */*" \
    -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8")

  COUNT=$(echo "$RES" | jq '.obj | length' 2>/dev/null || echo 0)
  echo $COUNT
}

# -----------------------------
# Function: Get SSH/OpenVPN/Dropbear Online
# -----------------------------
get_ssh_online() {
  ss -nt state established '( sport = :22 )' | grep -v Address | wc -l
}

get_openvpn_online() {
  if [ -f /etc/openvpn/server/openvpn-status.log ]; then
    grep -c "^CLIENT_LIST" /etc/openvpn/server/openvpn-status.log
  else
    echo 0
  fi
}

get_dropbear_online() {
  pgrep dropbear | wc -l
}

# -----------------------------
# MAIN
# -----------------------------
ssh_on=$(get_ssh_online)
ovpn_on=$(get_openvpn_online)
drop_on=$(get_dropbear_online)
v2ray_on=$(get_v2ray_online)

total=$((ssh_on + ovpn_on + drop_on + v2ray_on))

cat > $OUTPUT_JSON <<EOL
{
  "total": $total,
  "ssh": $ssh_on,
  "openvpn": $ovpn_on,
  "dropbear": $drop_on,
  "v2ray": $v2ray_on
}
EOL
EOF

chmod +x ${INSTALL_DIR}/online-check.sh

# -----------------------------
# systemd service + timer
# -----------------------------
cat > /etc/systemd/system/online-check.service <<EOF
[Unit]
Description=Online User Checker
After=network.target

[Service]
ExecStart=${INSTALL_DIR}/online-check.sh
Restart=always
RestartSec=5
StandardOutput=journal

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/online-check.timer <<EOF
[Unit]
Description=Run online-check every 5 seconds

[Timer]
OnBootSec=5
OnUnitActiveSec=5

[Install]
WantedBy=timers.target
EOF

systemctl daemon-reexec
systemctl enable --now online-check.timer
# -----------------------------
# Create web root
# -----------------------------
mkdir -p /var/www/html/server

# -----------------------------
# index.html (Dashboard)
# -----------------------------
cat > /var/www/html/server/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Server Online Dashboard</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  body { font-family: Arial, sans-serif; background: #111; color: #eee; text-align: center; }
  h1 { margin-top: 20px; }
  .stats { margin: 20px auto; width: 80%; max-width: 600px; }
  table { width: 100%; border-collapse: collapse; margin-top: 20px; }
  th, td { border: 1px solid #444; padding: 8px; }
  th { background: #222; }
</style>
</head>
<body>
<h1>📊 Server Online Users</h1>
<div id="total" style="font-size:24px; margin:20px 0;">Loading...</div>

<canvas id="chart" width="400" height="200"></canvas>

<div class="stats">
  <h2>Details</h2>
  <table>
    <tr><th>Service</th><th>Online</th></tr>
    <tr><td>SSH</td><td id="ssh">-</td></tr>
    <tr><td>OpenVPN</td><td id="ovpn">-</td></tr>
    <tr><td>Dropbear</td><td id="drop">-</td></tr>
    <tr><td>V2Ray</td><td id="v2ray">-</td></tr>
  </table>
</div>

<script>
async function fetchData() {
  try {
    let res = await fetch("online_app.json?_=" + Date.now());
    let data = await res.json();

    document.getElementById("total").innerText = "Total Online: " + data.total;
    document.getElementById("ssh").innerText = data.ssh;
    document.getElementById("ovpn").innerText = data.openvpn;
    document.getElementById("drop").innerText = data.dropbear;
    document.getElementById("v2ray").innerText = data.v2ray;

    chart.data.datasets[0].data = [data.ssh, data.openvpn, data.dropbear, data.v2ray];
    chart.update();
  } catch (e) {
    document.getElementById("total").innerText = "Error loading data";
  }
}

let ctx = document.getElementById('chart').getContext('2d');
let chart = new Chart(ctx, {
  type: 'bar',
  data: {
    labels: ['SSH', 'OpenVPN', 'Dropbear', 'V2Ray'],
    datasets: [{
      label: 'Online Users',
      data: [0,0,0,0],
      backgroundColor: ['#36a2eb','#ff6384','#ffcd56','#4caf50']
    }]
  },
  options: { responsive: true, plugins: { legend: { display: false } } }
});

setInterval(fetchData, 5000);
fetchData();
</script>
</body>
</html>
EOF

# -----------------------------
# Menu command: showon
# -----------------------------
cat > /usr/local/bin/showon <<'EOF'
#!/bin/bash
VERSION="V.1.0.0"
INSTALL_DATE=$(date '+%Y-%m-%d %H:%M:%S')
PANEL_URL=$(grep -oP '(https?://[^ ]+)' /usr/local/etc/showon-cred | head -1 || echo "N/A")
SHOW_URL="http://$(hostname -I | awk '{print $1}'):82/server/"

while true; do
  clear
  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : $VERSION"
  echo " Last Update: $INSTALL_DATE"
  echo "------------------------------------"
  echo " 3X-UI Panel URL : $PANEL_URL"
  echo " Show Online URL : $SHOW_URL"
  echo "===================================="
  echo " 1). Install Script"
  echo " 2). Restart All Service"
  echo " 3). Uninstall"
  echo " 4). Update"
  echo " 5). Fix Nginx"
  echo " 0). Exit"
  echo "------------------------------------"
  read -p "Select option: " opt

  case $opt in
    1) bash /usr/local/bin/install-online-check.sh ;;
    2) systemctl restart nginx online-check.timer ;;
    3) echo "[INFO] Uninstalling..."; rm -rf /usr/local/bin/showon /usr/local/bin/online-check.sh /usr/local/etc/showon-cred /etc/systemd/system/online-check.* /var/www/html/server; systemctl daemon-reload; systemctl disable --now online-check.timer; echo "[DONE]" ;;
    4) bash <(curl -fsSL https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install) ;;
    5) nginx -t && systemctl restart nginx && echo "[OK] Nginx restarted" || echo "[ERROR] Nginx config broken" ;;
    0) exit 0 ;;
    *) echo "Invalid choice."; sleep 2 ;;
  esac
done
EOF

chmod +x /usr/local/bin/showon
