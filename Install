#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.6 (Split-Files + SSL Edition)
# Author: TspKchn
# =====================================================

VERSION="V.1.0.6"

# ===== ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á repo ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì =====
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"

# ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô repo (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ)
SRC_ONLINE="$REPO_RAW/scripts/online-check.sh"
SRC_VNSTAT="$REPO_RAW/scripts/vnstat-traffic.sh"
SRC_V2RAY="$REPO_RAW/scripts/v2ray-traffic.sh"
SRC_SYSINFO="$REPO_RAW/scripts/sysinfo.sh"
SRC_INDEX="$REPO_RAW/web/index.html"
SRC_SSL="$REPO_RAW/scripts/setup-ssl.sh"

# ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
WWW_DIR="/var/www/html/server"
BIN_DIR="/usr/local/bin"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="$BIN_DIR/online-check.sh"
SCRIPT_VNSTAT="$BIN_DIR/vnstat-traffic.sh"
SCRIPT_V2RAY="$BIN_DIR/v2ray-traffic.sh"
SCRIPT_SYSINFO="$BIN_DIR/sysinfo.sh"
SCRIPT_SSL="$BIN_DIR/setup-ssl.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_VNSTAT="/etc/systemd/system/vnstat-traffic.service"
SERVICE_V2RAY="/etc/systemd/system/v2ray-traffic.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"

# SSL location ‡∏ó‡∏µ‡πà setup-ssl.sh ‡∏à‡∏∞‡πÉ‡∏ä‡πâ/‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ detect ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á SSL)
SHOWON_SSL_DIR="/etc/showon/ssl"
SHOWON_FULLCHAIN="$SHOWON_SSL_DIR/fullchain.pem"
SHOWON_PRIVKEY="$SHOWON_SSL_DIR/privkey.pem"

# ===== Colors =====
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; MAG="\e[35m"; NC="\e[0m"

require_root() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}[ERROR]${NC} Please run as root."
    exit 1
  fi
}

header() {
  clear
  echo "==============================="
  echo "   ShowOn Script Manager ${VERSION}"
  echo "==============================="
}

press() { read -rp "Press Enter to return to menu..." _; }

# -------- Network helpers --------
# ‡πÄ‡∏î‡∏≤ interface ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
get_nic() {
  ip -o -4 route get 8.8.8.8 2>/dev/null \
    | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1)}' \
    | head -n1
}

get_primary_ip() {
  hostname -I 2>/dev/null | awk '{print $1}'
}

# ‡∏î‡∏∂‡∏á host ‡∏à‡∏≤‡∏Å URL (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ protocol ‡πÅ‡∏•‡∏∞ path) ‡πÄ‡∏ä‡πà‡∏ô https://bm.xq-vpn.com:88/ ‚Üí bm.xq-vpn.com
extract_host_from_url() {
  local url="$1"
  # ‡∏ï‡∏±‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•
  url="${url#http://}"; url="${url#https://}"
  # ‡∏ï‡∏±‡∏î path ‡∏´‡∏•‡∏±‡∏á /
  url="${url%%/*}"
  # ‡∏ï‡∏±‡∏î port ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á :
  url="${url%%:*}"
  printf "%s" "$url"
}

# ‡∏ï‡∏£‡∏ß‡∏à hostname ‡πÄ‡∏õ‡πá‡∏ô IP ‡πÑ‡∏´‡∏°
is_ip() {
  local h="$1"
  [[ "$h" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]
}

# -------- GitHub version check & auto-update prompt --------
check_update_and_maybe_prompt() {
  local remote install_raw
  install_raw="$(curl -fsSL "$REPO_RAW/Install" || true)"

  if [[ -z "$install_raw" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ"
    return 0
  fi

  remote="$(printf '%s' "$install_raw" | grep -m1 '^VERSION=' | cut -d'"' -f2)"
  if [[ -z "$remote" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Install ‡πÉ‡∏ô GitHub ‡πÅ‡∏ï‡πà‡∏´‡∏≤ VERSION ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠"
    return 0
  fi

  if [[ "$VERSION" == "$remote" ]]; then
    echo -e "${GREEN}[OK]${NC} You are using the latest version."
    return 0
  else
    echo -e "${CYAN}[UPDATE]${NC} ‡∏°‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ${remote} (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${VERSION})"
    echo -en "${CYAN}[INFO]${NC} ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå n ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°: "
    read -r ans
    if [[ -z "$ans" || "$ans" =~ ^[Yy]$ ]]; then
      # ‡∏ó‡∏≥ update ‡πÅ‡∏•‡πâ‡∏ß re-exec ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ VERSION ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      update_script --noninteractive || true
      echo -e "${GREEN}[OK]${NC} Updated. Reloading installer..."
      exec bash "$0"
      exit 0
    else
      echo -e "${YELLOW}[SKIP]${NC} ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
      return 0
    fi
  fi
}

# -------- Nginx site writer (idempotent & no duplicate listen) --------
write_nginx_http_only() {
  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á duplicate listen (‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô)
  rm -f "$SITE_EN"
  rm -f "$SITE_AV"

  mkdir -p "$WWW_DIR"
  mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

  cat >"$SITE_AV" <<EOF
server {
    listen 82 default_server;
    server_name _;

    # redirect / ‚Üí /server/ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HTTP block)
    location = / {
        return 302 /server/;
    }
    location /server/ {
        alias $WWW_DIR/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store";
    }
}
EOF

  ln -sf "$SITE_AV" "$SITE_EN"

  if nginx -t; then
    systemctl reload nginx 2>/dev/null || systemctl restart nginx 2>/dev/null || true
  else
    echo -e "${YELLOW}[WARN]${NC} nginx config test failed ‚Üí will try to start nginx..."
    systemctl start nginx 2>/dev/null || true
  fi

  echo -e "${GREEN}[OK]${NC} Nginx ready at :82 (HTTP)"
}

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á setup-ssl.sh ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö cert ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Ñ HTTPS:82 (‡πÑ‡∏°‡πà‡∏ä‡∏ô listen ‡πÄ‡∏î‡∏¥‡∏°)
append_nginx_https_block_if_certs() {
  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cert ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
  if [[ ! -s "$SHOWON_FULLCHAIN" || ! -s "$SHOWON_PRIVKEY" ]]; then
    return 0
  fi

  # ‡πÉ‡∏™‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ HTTPS:82 (‡πÉ‡∏ä‡πâ ssl) ‚Äî ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ marker
  if ! grep -q "# BEGIN SHOWON_HTTPS_BLOCK" "$SITE_AV" 2>/dev/null; then
    cat >>"$SITE_AV" <<'EOF'

# BEGIN SHOWON_HTTPS_BLOCK
server {
    listen 82 ssl;
    server_name _;

    ssl_certificate     /etc/showon/ssl/fullchain.pem;
    ssl_certificate_key /etc/showon/ssl/privkey.pem;

    # Strict but simple TLS params
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    location = / {
        return 302 /server/;
    }
    location /server/ {
        alias /var/www/html/server/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store";
    }
}
# END SHOWON_HTTPS_BLOCK
EOF
  fi

  if nginx -t; then
    systemctl reload nginx 2>/dev/null || systemctl restart nginx 2>/dev/null || true
    echo -e "${GREEN}[OK]${NC} Nginx HTTPS on :82 enabled"
  else
    echo -e "${YELLOW}[WARN]${NC} HTTPS block failed nginx test ‚Üí keeping HTTP only"
  fi
}

download_or_die() {
  local url="$1" dst="$2"
  if ! curl -fsSL "$url" -o "$dst"; then
    echo -e "${RED}[ERROR]${NC} Download failed: $url"
    exit 1
  fi
}

detect_ssl_ready() {
  [[ -s "$SHOWON_FULLCHAIN" && -s "$SHOWON_PRIVKEY" ]]
}

install_script() {
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..."
  echo -e "${CYAN}[INFO]${NC} Updating system packages..."
  apt update -y >/dev/null 2>&1 || true

  echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates >/dev/null 2>&1 || true

  # ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Ubuntu ====
  UBUNTU_VERSION=$(lsb_release -rs 2>/dev/null || echo "0")
  if [[ "$UBUNTU_VERSION" == "18.04" ]]; then
    echo -e "${YELLOW}[WARN]${NC} Ubuntu 18.04 detected, installing vnstat from PPA..."
    apt install -y software-properties-common gnupg2 >/dev/null 2>&1 || true
    add-apt-repository -y ppa:unit193/vnstat >/dev/null 2>&1 || true
    apt update -y >/dev/null 2>&1 || true
    apt install -y vnstat >/dev/null 2>&1 || true
  else
    apt install -y vnstat >/dev/null 2>&1 || true
  fi

  systemctl enable vnstat >/dev/null 2>&1 || true
  systemctl start vnstat >/dev/null 2>&1 || true

  mkdir -p "$WWW_DIR" "$BIN_DIR" "$(dirname "$DEBUG_LOG")"

  # ==== ‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô 3x-ui ====
  echo -e "${CYAN}[INFO]${NC} ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 3x-ui (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏î Enter ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ)"
  echo "  üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ '‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡πâ‡∏ô' ‡πÄ‡∏ä‡πà‡∏ô:"
  echo "     https://DOMAIN:PORT/RandomPath ‡∏´‡∏£‡∏∑‡∏≠ https://IP:PORT/RandomPath"
  read -rp "3X-UI URL (copy login link): " PANEL_URL
  PANEL_URL="$(echo "$PANEL_URL" | sed 's:/*$::')"

  read -rp "3X-UI Username: " XUI_USER
  read -rp "3X-UI Password: " XUI_PASS
  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  # ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà URL) ====
  if [[ -n "$PANEL_URL" ]]; then
    COOKIE_FILE=$(mktemp)
    LOGIN_OK=false

    if curl -sk -c "$COOKIE_FILE" -X POST "$PANEL_URL/login" \
         -H "Content-Type: application/x-www-form-urlencoded" \
         --data "username=$XUI_USER&password=$XUI_PASS" | grep -q '"success":true'; then
      LOGIN_OK=true
    else
      if curl -sk -c "$COOKIE_FILE" -X POST "$PANEL_URL/login" \
           -H "Content-Type: application/json" \
           -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" | grep -q '"success":true'; then
        LOGIN_OK=true
      fi
    fi

    if $LOGIN_OK; then
      echo -e "${GREEN}[OK]${NC} Login to 3x-ui OK"
    else
      echo -e "${YELLOW}[WARN]${NC} Login to 3x-ui failed ‚Üí continue without 3x-ui"
      PANEL_URL=""
    fi
    rm -f "$COOKIE_FILE"
  fi

  # ==== ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô config ====
  NIC=$(get_nic)
  [[ -z "$NIC" ]] && NIC=$(ip -o -4 addr show up scope global | awk '{print $2}' | head -n1)
  [[ -z "$NIC" ]] && NIC="eth0"

  cat >"$CONF_FILE" <<EOF
VERSION="${VERSION}"
WWW_DIR="$WWW_DIR"
LIMIT=${LIMIT}
DEBUG_LOG="$DEBUG_LOG"

PANEL_URL="$PANEL_URL"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"

NET_IFACE="$NIC"
EOF
  chmod 600 "$CONF_FILE"

  # ==== ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å repo ====
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  mkdir -p "$WWW_DIR"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  # ==== nginx site (HTTP:82) ====
  write_nginx_http_only

  # ==== SSL setup ====
  echo -e "${CYAN}[INFO]${NC} Setting up SSL..."
  download_or_die "$SRC_SSL" "$SCRIPT_SSL"
  chmod +x "$SCRIPT_SSL"

  # ‡∏™‡πà‡∏á host ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô PANEL_URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠ detect ‡πÇ‡∏î‡πÄ‡∏°‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô IP ‡∏à‡∏∞‡∏ß‡πà‡∏≤‡∏á
  PANEL_HOST="$(extract_host_from_url "$PANEL_URL")"
  SSL_HOST=""
  if [[ -n "$PANEL_HOST" && ! $(is_ip "$PANEL_HOST") ]]; then
    SSL_HOST="$PANEL_HOST"
  fi

  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setup-ssl.sh: ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏•‡∏¥‡∏á‡∏Å‡πå cert ‡πÄ‡∏î‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á self-signed (opt-in) ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•
  "$SCRIPT_SSL" "$SSL_HOST" || echo -e "${YELLOW}[WARN]${NC} SSL setup failed ‚Üí HTTP only"

  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cert ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏ï‡∏¥‡∏° HTTPS block (listen 82 ssl) ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå nginx ‡πÄ‡∏î‡∏¥‡∏°
  if detect_ssl_ready; then
    append_nginx_https_block_if_certs
    HTTPS_READY="yes"
  else
    HTTPS_READY="no"
  fi

  # ==== systemd services ====
  cat >"$SERVICE_ONLINE" <<'EOF'
[Unit]
Description=ShowOn Online Users JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_VNSTAT" <<'EOF'
[Unit]
Description=ShowOn vnStat + V2Ray Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/vnstat-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_V2RAY" <<'EOF'
[Unit]
Description=ShowOn V2Ray-Only Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/v2ray-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<'EOF'
[Unit]
Description=ShowOn System Info JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/sysinfo.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á display host: ‡∏ñ‡πâ‡∏≤ PANEL_URL ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏î‡πÄ‡∏°‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡πÄ‡∏°‡∏ô; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà ‚Üí ‡πÉ‡∏ä‡πâ IP
  local_host=""
  if [[ -n "$PANEL_HOST" && ! $(is_ip "$PANEL_HOST") ]]; then
    local_host="$PANEL_HOST"
  else
    local_host="$(get_primary_ip)"
  fi

  echo -e "${GREEN}[OK]${NC} Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open (HTTP):  \e[4mhttp://${local_host}:82/server/\e[0m"
  if [[ "$HTTPS_READY" == "yes" ]]; then
    echo -e "${CYAN}[INFO]${NC} Open (HTTPS): \e[4mhttps://${local_host}:82/server/\e[0m"
  else
    echo -e "${YELLOW}[WARN]${NC} HTTPS is not active (no valid cert found)."
  fi
  press
}

uninstall_script() {
  echo -e "${CYAN}[INFO]${NC} Uninstalling ShowOn Script..."

  systemctl stop online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  systemctl disable online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_VNSTAT" "$SERVICE_V2RAY" "$SERVICE_SYSINFO"
  systemctl daemon-reload

  rm -f "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO" "$SCRIPT_SSL"
  rm -f "$CONF_FILE" "$DEBUG_LOG"

  rm -f "$SITE_EN"
  rm -f "$SITE_AV"
  if nginx -t 2>/dev/null; then
    systemctl reload nginx 2>/dev/null || true
  else
    systemctl restart nginx 2>/dev/null || true
  fi

  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
  press
}

update_script() {
  local noni="no"
  if [[ "$1" == "--noninteractive" ]]; then
    noni="yes"
  fi

  echo -e "${CYAN}[INFO]${NC} Updating all ShowOn components..."

  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  download_or_die "$SRC_SSL" "$SCRIPT_SSL"
  chmod +x "$SCRIPT_SSL"

  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå Install ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  local TMP_SCRIPT="/tmp/Install.$$"
  if curl -fsSL "$REPO_RAW/Install" -o "$TMP_SCRIPT"; then
    mv "$TMP_SCRIPT" /root/Install
    chmod +x /root/Install
    echo -e "${GREEN}[OK]${NC} Updated Install script."
  else
    echo -e "${RED}[ERROR]${NC} Failed to update Install script."
  fi

  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cert ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏° HTTPS block (‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏∏‡∏î)
  if detect_ssl_ready; then
    append_nginx_https_block_if_certs
  fi

  echo -e "${GREEN}[OK]${NC} Update completed."
  if [[ "$noni" != "yes" ]]; then
    press
  fi
}

check_debug() {
  if [[ -f "$DEBUG_LOG" ]]; then
    tail -n 100 "$DEBUG_LOG"
  else
    echo "No debug log yet."
  fi
  press
}

show_menu() {
  header
  # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö auto-prompt (‡∏à‡∏∞ re-exec ‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
  check_update_and_maybe_prompt

  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0,1,2,3,4]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR]${NC} Invalid choice"; sleep 1 ;;
  esac
  show_menu
}

require_root
show_menu
