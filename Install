#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.6 (Extended Edition)
# Author : TspKchn + ChatGPT
# Single-file edition: menu + install + update + swap
# =====================================================

VERSION="V.1.0.6"

# ===== GitHub Repo Path =====
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"

# ===== Sources =====
SRC_ONLINE="$REPO_RAW/scripts/online-check.sh"
SRC_VNSTAT="$REPO_RAW/scripts/vnstat-traffic.sh"
SRC_V2RAY="$REPO_RAW/scripts/v2ray-traffic.sh"
SRC_SYSINFO="$REPO_RAW/scripts/sysinfo.sh"
SRC_INDEX="$REPO_RAW/web/index.html"

# ===== Install Paths =====
WWW_DIR="/var/www/html/server"
BIN_DIR="/usr/local/bin"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="$BIN_DIR/online-check.sh"
SCRIPT_VNSTAT="$BIN_DIR/vnstat-traffic.sh"
SCRIPT_V2RAY="$BIN_DIR/v2ray-traffic.sh"
SCRIPT_SYSINFO="$BIN_DIR/sysinfo.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_VNSTAT="/etc/systemd/system/vnstat-traffic.service"
SERVICE_V2RAY="/etc/systemd/system/v2ray-traffic.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"

# ===== Colors =====
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; BOLD="\e[1m"; NC="\e[0m"

# ===== Safeguards =====
require_root() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}[ERROR]${NC} Please run as root."
    exit 1
  fi
}
require_root

# ===== Small helpers =====
press(){ read -rp "Press Enter to continue... " _; }
pad() { # pad "label" 14
  printf "%-*s" "$2" "$1"
}
exists() { command -v "$1" >/dev/null 2>&1; }
svc_onoff(){ # svc_onoff service-name
  local s="$1"
  if systemctl is-active --quiet "$s" 2>/dev/null; then
    echo -e "[${GREEN}ON${NC}]"
  else
    echo -e "[${RED}OFF${NC}]"
  fi
}
file_onoff(){ # file_onoff file-or-dir
  local f="$1"
  if [[ -e "$f" ]]; then
    echo -e "[${GREEN}OK${NC}]"
  else
    echo -e "[${RED}MISS${NC}]"
  fi
}

# ===== Detect NIC =====
get_nic() {
  ip -o -4 route get 8.8.8.8 2>/dev/null \
    | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1)}' \
    | head -n1
}

# ===== Log Rotate (1MB) =====
rotate_log() {
  local max=1000000
  if [[ -f "$DEBUG_LOG" && $(stat -c%s "$DEBUG_LOG") -gt $max ]]; then
    mv "$DEBUG_LOG" "$DEBUG_LOG.1"
    : > "$DEBUG_LOG"
  fi
}

# ===== Nginx writer =====
write_nginx() {
  mkdir -p "$WWW_DIR"
  mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

  cat >"$SITE_AV" <<EOF
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }
    location /server/ {
        alias $WWW_DIR/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store";
    }
}
EOF

  ln -sf "$SITE_AV" "$SITE_EN"

  if nginx -t; then
    systemctl reload nginx 2>/dev/null || systemctl restart nginx 2>/dev/null || true
  else
    echo -e "${YELLOW}[WARN]${NC} nginx config test failed → will try to start nginx..."
    systemctl start nginx 2>/dev/null || true
  fi

  echo -e "${GREEN}[OK]${NC} Nginx ready at :82 (/server/)"
}

# ===== Downloader =====
download_or_die() {
  local url="$1" dst="$2"
  if ! curl -fsSL "$url" -o "$dst"; then
    echo -e "${RED}[ERROR]${NC} Download failed: $url"
    exit 1
  fi
}

# ===== Check Installation Status =====
is_installed() {
  # ถือว่าติดตั้งถ้ามีไฟล์ config และอย่างน้อย index.html กับสคริปต์หลัก ๆ อยู่
  [[ -f "$CONF_FILE" && -f "$WWW_DIR/index.html" && -f "$SCRIPT_ONLINE" && -f "$SERVICE_ONLINE" ]]
}

# ===== Status box (pretty) =====
status_box() {
  clear
  echo -e "${BOLD}==============================="
  echo -e "   ShowOn Script Manager ${VERSION}"
  echo -e "===============================${NC}"

  # Services
  local sNginx sOn sVn sV2 sSys
  sNginx=$(svc_onoff nginx)
  sOn=$(svc_onoff online-check.service)
  sVn=$(svc_onoff vnstat-traffic.service)
  sV2=$(svc_onoff v2ray-traffic.service)
  sSys=$(svc_onoff sysinfo.service)

  printf "%s : %b  %s : %b\n" "$(pad 'NginX' 12)" "$sNginx" "$(pad 'Online Check' 12)" "$sOn"
  printf "%s : %b  %s : %b\n" "$(pad 'vnStat' 12)" "$sVn"    "$(pad 'V2Ray Traffic' 12)" "$sV2"
  printf "%s : %b\n"           "$(pad 'SysInfo' 12)" "$sSys"

  echo "-------------------------------"
  if is_installed; then
    echo -e "Status: ${GREEN}Installed${NC}"
  else
    echo -e "Status: ${RED}Not Installed${NC}"
  fi
  echo -e "==============================="
}

# ===== Check Update (remote VERSION) =====
check_update() {
  # อ่าน Install ต้นฉบับจากรีโปมาดูเวอร์ชัน
  local install_raw remote
  install_raw="$(curl -fsSL "$REPO_RAW/Install" 2>/dev/null || true)"
  if [[ -z "$install_raw" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ไม่สามารถเช็คเวอร์ชันจาก GitHub ได้"
    return 0
  fi
  remote="$(printf '%s' "$install_raw" | grep -m1 '^VERSION=' | cut -d'"' -f2)"
  if [[ -z "$remote" ]]; then
    echo -e "${YELLOW}[WARN]${NC} พบไฟล์ Install ใน GitHub แต่หา VERSION ไม่เจอ"
    return 0
  fi

  if [[ "$VERSION" == "$remote" ]]; then
    echo -e "${GREEN}[OK]${NC} You are using the latest version."
  else
    echo -e "${CYAN}[UPDATE]${NC} มีเวอร์ชันใหม่: ${remote} (ปัจจุบัน: ${VERSION})"
    read -rp "กด Enter เพื่ออัปเดตเป็น ${remote} (หรือพิมพ์ n เพื่อยกเลิก): " ans
    if [[ -z "$ans" || "$ans" =~ ^[Yy]$ ]]; then
      update_script
    else
      echo "ยกเลิกการอัปเดต"
    fi
  fi
}

# ===== Install =====
install_script() {
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..."
  echo -e "${CYAN}[INFO]${NC} Updating system packages..."
  apt update -y >/dev/null 2>&1 || true

  echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates >/dev/null 2>&1 || true

  # Ubuntu 18.04 → install vnstat from PPA
  UBUNTU_VERSION=$(lsb_release -rs 2>/dev/null || echo "0")
  if [[ "$UBUNTU_VERSION" == "18.04" ]]; then
    echo -e "${YELLOW}[WARN]${NC} Ubuntu 18.04 detected, installing vnstat from PPA..."
    apt install -y software-properties-common gnupg2 >/dev/null 2>&1 || true
    add-apt-repository -y ppa:unit193/vnstat >/dev/null 2>&1 || true
    apt update -y >/dev/null 2>&1 || true
    apt install -y vnstat >/dev/null 2>&1 || true
  else
    apt install -y vnstat >/dev/null 2>&1 || true
  fi

  systemctl enable vnstat >/dev/null 2>&1 || true
  systemctl start vnstat >/dev/null 2>&1 || true

  mkdir -p "$WWW_DIR" "$BIN_DIR" "$(dirname "$DEBUG_LOG")"
  rotate_log

  # ==== ตรวจสอบว่าใช้ 3x-ui หรือ Xray-Core ====
  local PANEL_URL XUI_USER XUI_PASS
  if [[ -d /etc/x-ui ]]; then
    echo -e "${CYAN}[INFO]${NC} ตรวจพบ 3x-ui → ตั้งค่าการเชื่อมต่อ API"
    echo "  👉 กรุณา 'วางลิงก์หน้าล็อกอินทั้งเส้น' เช่น:"
    echo "     https://IP:PORT/RandomPath"
    read -rp "3X-UI URL (copy login link): " PANEL_URL
    PANEL_URL="$(echo "$PANEL_URL" | sed 's:/*$::')"

    read -rp "3X-UI Username: " XUI_USER
    read -rp "3X-UI Password: " XUI_PASS
  else
    echo -e "${CYAN}[INFO]${NC} ตรวจพบ Xray-Core → ข้ามการตั้งค่า 3x-ui"
    PANEL_URL=""
    XUI_USER=""
    XUI_PASS=""
  fi

  # ==== Limit User Online ====
  local LIMIT
  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  # ==== เขียน config ====
  local NIC
  NIC=$(get_nic)
  [[ -z "$NIC" ]] && NIC=$(ip -o -4 addr show up scope global | awk '{print $2}' | head -n1)
  [[ -z "$NIC" ]] && NIC="eth0"

  cat >"$CONF_FILE" <<EOF
VERSION="${VERSION}"
WWW_DIR="$WWW_DIR"
LIMIT=${LIMIT}
DEBUG_LOG="$DEBUG_LOG"

PANEL_URL="$PANEL_URL"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"

NET_IFACE="$NIC"
EOF
  chmod 600 "$CONF_FILE"

  # ==== ดาวน์โหลดสคริปต์จาก repo ====
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  mkdir -p "$WWW_DIR"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  # ==== nginx site ====
  write_nginx

  # ==== systemd services ====
  cat >"$SERVICE_ONLINE" <<'EOF'
[Unit]
Description=ShowOn Online Users JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_VNSTAT" <<'EOF'
[Unit]
Description=ShowOn vnStat + V2Ray Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/vnstat-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_V2RAY" <<'EOF'
[Unit]
Description=ShowOn V2Ray-Only Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/v2ray-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<'EOF'
[Unit]
Description=ShowOn System Info JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/sysinfo.sh; sleep 5; do
ne'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  # ==== Start and Enable Services ====
  systemctl daemon-reload
  systemctl enable --now online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service

  echo -e "${GREEN}[OK]${NC} Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  press
}

# ===== Uninstall =====
uninstall_script() {
  echo -e "${CYAN}[INFO]${NC} Uninstalling ShowOn Script..."

  systemctl stop online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  systemctl disable online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_VNSTAT" "$SERVICE_V2RAY" "$SERVICE_SYSINFO"
  systemctl daemon-reload

  rm -f "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"
  rm -f "$CONF_FILE" "$DEBUG_LOG"

  rm -f "$SITE_AV" "$SITE_EN"
  if nginx -t 2>/dev/null; then
    systemctl reload nginx 2>/dev/null || true
  else
    systemctl restart nginx 2>/dev/null || true
  fi

  # เก็บโฟลเดอร์เว็บไว้ให้ก่อน (เผื่อมีของผู้ใช้) — ถ้าจะลบทิ้งก็เพิ่มบรรทัดด้านล่างได้
  # rm -rf "$WWW_DIR"

  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
  press
}

# ===== Update =====
update_script() {
  echo -e "${CYAN}[INFO]${NC} Updating all ShowOn components..."
  rotate_log

  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  local TMP_SCRIPT="/tmp/Install.$$"
  if curl -fsSL "$REPO_RAW/Install" -o "$TMP_SCRIPT"; then
    mv "$TMP_SCRIPT" /root/Install
    chmod +x /root/Install
    echo -e "${GREEN}[OK]${NC} Updated Install script."
  else
    echo -e "${RED}[ERROR]${NC} Failed to update Install script."
  fi

  systemctl daemon-reload
  systemctl restart online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true

  echo -e "${GREEN}[OK]${NC} Update completed."
  press
}

# ===== Debug Log =====
check_debug() {
  rotate_log
  if [[ -f "$DEBUG_LOG" ]]; then
    tail -n 100 "$DEBUG_LOG"
  else
    echo "No debug log yet."
  fi
  press
}

# ===== Change Limit =====
change_limit() {
  if [[ ! -f "$CONF_FILE" ]]; then
    echo -e "${RED}[ERROR]${NC} Config file not found!"
    press; return
  fi
  source "$CONF_FILE"
  echo -e "${CYAN}[INFO]${NC} Current Limit User Online: ${LIMIT:-2000}"
  read -rp "Enter new Limit User Online: " NEW_LIMIT
  if [[ -z "$NEW_LIMIT" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ไม่ได้เปลี่ยนค่า"
    press; return
  fi
  sed -i "s/^LIMIT=.*/LIMIT=${NEW_LIMIT}/" "$CONF_FILE"
  echo -e "${GREEN}[OK]${NC} คุณได้เปลี่ยน Limit User Online แล้วเป็น ${NEW_LIMIT} คน"
  press
}

# ===== Swap (Auto) =====
calc_swap_size_gb() {
  # รับค่า RAM (kB) → คืนค่า SWAP (GiB) ตาม rule: <2GB→2GB, 2-4→2GB, 4-8→4GB, 8-16→4-8, 16-64→8-16, >64→16
  local mem_kb="$1"
  local mem_gb=$(( (mem_kb + 1048575) / 1048576 )) # round up KB→GB
  local swap_gb=2
  if   (( mem_gb < 2 ));        then swap_gb=2
  elif (( mem_gb <= 4 ));       then swap_gb=2
  elif (( mem_gb <= 8 ));       then swap_gb=4
  elif (( mem_gb <= 16 ));      then swap_gb=6
  elif (( mem_gb <= 64 ));      then swap_gb=8
  else                               swap_gb=16
  fi
  echo "$swap_gb"
}

setup_swap_auto() {
  echo -e "${CYAN}[INFO]${NC} Auto-setup swap..."
  local mem_kb total_swap_kb
  mem_kb=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
  total_swap_kb=$(awk '/SwapTotal/ {print $2}' /proc/meminfo)

  if (( total_swap_kb > 0 )); then
    echo -e "${YELLOW}[WARN]${NC} Swap already exists ($(awk '/SwapTotal/ {printf \"%.2f GiB\", $2/1048576}' /proc/meminfo))."
    read -rp "Create new swap anyway? (this keeps the old one) [y/N]: " yn
    [[ ! "$yn" =~ ^[Yy]$ ]] && { echo "Canceled."; press; return; }
  fi

  local swap_gb swap_file="/swapfile"
  swap_gb="$(calc_swap_size_gb "$mem_kb")"
  local swap_mb=$(( swap_gb * 1024 ))

  echo -e "${CYAN}[INFO]${NC} Creating ${swap_gb}G swap at ${swap_file} ..."
  swapoff -a 2>/dev/null || true
  fallocate -l "${swap_mb}M" "$swap_file" 2>/dev/null || dd if=/dev/zero of="$swap_file" bs=1M count="$swap_mb"
  chmod 600 "$swap_file"
  mkswap "$swap_file"
  swapon "$swap_file"

  if ! grep -q "^$swap_file" /etc/fstab; then
    echo "$swap_file none swap sw 0 0" >> /etc/fstab
  fi

  sysctl vm.swappiness=10 >/dev/null
  sysctl vm.vfs_cache_pressure=50 >/dev/null
  sed -i '/^vm\.swappiness=/d' /etc/sysctl.conf
  sed -i '/^vm\.vfs_cache_pressure=/d' /etc/sysctl.conf
  {
    echo "vm.swappiness=10"
    echo "vm.vfs_cache_pressure=50"
  } >> /etc/sysctl.conf

  echo -e "${GREEN}[OK]${NC} Swap ready: ${swap_gb}G"
  # รีสตาร์ต service หลักให้หน่อย (เผื่อก่อนหน้าล้มเพราะแรม)
  systemctl restart online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  press
}

# ===== Menu =====
show_menu() {
  status_box
  check_update
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "5) Change Limit User Online"
  echo "6) Setup Swap"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0-6]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    5) change_limit ;;
    6) setup_swap_auto ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR]${NC} Invalid choice"; sleep 1 ;;
  esac
  show_menu
}

# ===== Entry =====
show_menu
