#!/bin/bash
# =====================================================================
# ShowOn Script Manager V.1.0.7 (Extended Full Edition)
# Author : TspKchn + ChatGPT
# =====================================================================
# จุดเด่นเวอร์ชันนี้ (สรุป):
# - เพิ่มรองรับ AGN-UDP (Hysteria) อัตโนมัติ
# - ติดตั้ง/ถอดถอน conntrack อัตโนมัติ (Install / Uninstall)
# - Online Checker รองรับ agnudp ลง online_app.json
# - แสดงสถานะ Conntrack ในเมนู (ON/OFF)
# - บังคับ overwrite ไฟล์สคริปต์/เว็บทุกครั้งตอน Install/Update
# - คง sleep 5 วิ ให้ทุก service ตามที่ตกลง
# =====================================================================

VERSION="V.1.0.7"
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"

SRC_ONLINE="$REPO_RAW/scripts/online-check.sh"
SRC_VNSTAT="$REPO_RAW/scripts/vnstat-traffic.sh"
SRC_V2RAY="$REPO_RAW/scripts/v2ray-traffic.sh"
SRC_SYSINFO="$REPO_RAW/scripts/sysinfo.sh"
SRC_INDEX="$REPO_RAW/web/index.html"

WWW_DIR="/var/www/html/server"
BIN_DIR="/usr/local/bin"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="$BIN_DIR/online-check.sh"
SCRIPT_VNSTAT="$BIN_DIR/vnstat-traffic.sh"
SCRIPT_V2RAY="$BIN_DIR/v2ray-traffic.sh"
SCRIPT_SYSINFO="$BIN_DIR/sysinfo.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_VNSTAT="/etc/systemd/system/vnstat-traffic.service"
SERVICE_V2RAY="/etc/systemd/system/v2ray-traffic.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"

BOLD="\e[1m"; DIM="\e[2m"
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; GRAY="\e[90m"; NC="\e[0m"
CHECK="${GREEN}✔${NC}"
CROSS="${RED}✘${NC}"

require_root() { [[ $EUID -ne 0 ]] && { echo -e "${RED}[ERROR]${NC} Please run as root."; exit 1; }; }
press() { read -rp "Press Enter to continue..." _; }
header() { clear; echo "==============================="; echo "   ShowOn Script Manager ${VERSION}"; echo "==============================="; }

get_nic() { ip -o -4 route get 8.8.8.8 2>/dev/null | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1)}' | head -n1; }
rotate_log() { [[ -f "$DEBUG_LOG" && $(stat -c%s "$DEBUG_LOG") -gt 1000000 ]] && { mv "$DEBUG_LOG" "$DEBUG_LOG.1"; : > "$DEBUG_LOG"; }; }
download_or_die() { local url="$1" dst="$2"; mkdir -p "$(dirname "$dst")"; curl -fsSL "$url" -o "$dst" || { echo "[ERROR] Download failed $url"; exit 1; }; sed -i 's/\r$//' "$dst" 2>/dev/null || true; }
file_has_text() { grep -q "$2" "$1" 2>/dev/null; }
ensure_exec() { [[ -f "$1" ]] && chmod +x "$1"; }
safe_mkdirs() { mkdir -p "$WWW_DIR" "$BIN_DIR" "$(dirname "$DEBUG_LOG")"; }

write_nginx() {
  mkdir -p "$WWW_DIR" /etc/nginx/sites-available /etc/nginx/sites-enabled
  cat >"$SITE_AV" <<EOF
server {
    listen 82 default_server;
    server_name _;
    location = / { return 302 /server/; }
    location /server/ {
        alias $WWW_DIR/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Pragma "no-cache";
        expires -1;
    }
}
EOF
  ln -sf "$SITE_AV" "$SITE_EN"
  nginx -t && systemctl reload nginx || systemctl restart nginx || true
}

detect_agnudp() {
  local present=0 port=""
  if [[ -x /usr/local/bin/hysteria || -x /usr/bin/hysteria || -d /etc/hysteria ]]; then
    present=1
    [[ -f /etc/hysteria/config.json ]] && port="$(jq -r '.listen // empty' /etc/hysteria/config.json | sed -E 's/.*://')"
    [[ -z "$port" ]] && port="36712"
  fi
  echo "${present}|${port}"
}
conntrack_status() { command -v conntrack >/dev/null && echo "ON" || echo "OFF"; }

print_status() {
  local stat_nginx="OFF" stat_online="OFF" stat_vnstat="OFF" stat_v2="OFF" stat_sys="OFF"
  systemctl is-active --quiet nginx && stat_nginx="ON"
  [[ -f "$SERVICE_ONLINE" ]] && systemctl is-active --quiet online-check && stat_online="ON"
  [[ -f "$SERVICE_VNSTAT" ]] && systemctl is-active --quiet vnstat-traffic && stat_vnstat="ON"
  [[ -f "$SERVICE_V2RAY"  ]] && systemctl is-active --quiet v2ray-traffic && stat_v2="ON"
  [[ -f "$SERVICE_SYSINFO" ]] && systemctl is-active --quiet sysinfo && stat_sys="ON"
  echo "==============================="
  echo "   ShowOn Script Manager ${VERSION}"
  echo "==============================="
  echo "NginX: $stat_nginx   Online: $stat_online"
  echo "vnStat: $stat_vnstat V2Ray: $stat_v2"
  echo "SysInfo: $stat_sys   Conntrack: $(conntrack_status)"
  echo "==============================="
}
# =====================================================================
# Install / Uninstall / Update
# =====================================================================

install_script() {
  echo "[INFO] Installing ShowOn ${VERSION}..."
  apt update -y && apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates vnstat conntrack
  safe_mkdirs; rotate_log

  local PANEL_URL="" XUI_USER="" XUI_PASS=""
  if [[ -d /etc/x-ui ]]; then
    echo "[INFO] Detected 3x-ui → setup API login"
    read -rp "3X-UI URL (copy login link): " PANEL_URL; PANEL_URL="$(echo "$PANEL_URL" | sed 's:/*$::')"
    read -rp "3X-UI Username: " XUI_USER
    read -rp "3X-UI Password: " XUI_PASS
  else
    echo "[INFO] Detected Xray-Core → skip 3x-ui setup"
  fi

  # Detect AGN-UDP
  local AGN_PRESENT="0" AGN_PORT=""
  IFS='|' read -r AGN_PRESENT AGN_PORT <<<"$(detect_agnudp)"
  if [[ "$AGN_PRESENT" == "1" ]]; then
    echo "[OK] Found AGN-UDP, port=$AGN_PORT"
  else
    echo "[WARN] AGN-UDP not found, will count as 0"
  fi

  # Limit
  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  # Write config
  NIC=$(get_nic); [[ -z "$NIC" ]] && NIC="eth0"
  cat >"$CONF_FILE" <<EOF
VERSION="${VERSION}"
WWW_DIR="$WWW_DIR"
LIMIT=${LIMIT}
DEBUG_LOG="$DEBUG_LOG"

PANEL_URL="$PANEL_URL"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"

NET_IFACE="$NIC"
AGN_PRESENT=$AGN_PRESENT
AGN_PORT="$AGN_PORT"
EOF
  chmod 600 "$CONF_FILE"

  # Download scripts
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY"  "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  ensure_exec "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"

  # Nginx
  write_nginx

  # Systemd services
  cat >"$SERVICE_ONLINE" <<'EOF'
[Unit]
Description=ShowOn Online Users JSON Generator
After=network.target
[Service]
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_VNSTAT" <<'EOF'
[Unit]
Description=ShowOn vnStat + V2Ray Traffic JSON Generator
After=network.target
[Service]
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/vnstat-traffic.sh; sleep 5; done'
Restart=always
[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_V2RAY" <<'EOF'
[Unit]
Description=ShowOn V2Ray-Only Traffic JSON Generator
After=network.target
[Service]
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/v2ray-traffic.sh; sleep 5; done'
Restart=always
[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<'EOF'
[Unit]
Description=ShowOn System Info JSON Generator
After=network.target
[Service]
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/sysinfo.sh; sleep 5; done'
Restart=always
[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check vnstat-traffic v2ray-traffic sysinfo
  echo "[OK] Installed ShowOn ${VERSION}"
  echo "[INFO] Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  press
}

uninstall_script() {
  echo "[INFO] Uninstalling ShowOn..."
  systemctl stop online-check vnstat-traffic v2ray-traffic sysinfo || true
  systemctl disable online-check vnstat-traffic v2ray-traffic sysinfo || true
  rm -f "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO" "$CONF_FILE"
  rm -f "$SERVICE_ONLINE" "$SERVICE_VNSTAT" "$SERVICE_V2RAY" "$SERVICE_SYSINFO"
  systemctl daemon-reload
  rm -f "$SITE_AV" "$SITE_EN"
  nginx -t && systemctl reload nginx || systemctl restart nginx || true
  apt purge -y conntrack >/dev/null 2>&1 || true
  apt autoremove -y >/dev/null 2>&1 || true
  echo "[SUCCESS] Uninstalled completely."
  press
}

update_script() {
  echo "[INFO] Updating ShowOn..."
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  ensure_exec "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"
  echo "[OK] Updated scripts."
  press
}
# =====================================================================
# Debug Log / Change Limit
# =====================================================================

check_debug() {
  rotate_log
  if [[ -f "$DEBUG_LOG" ]]; then
    tail -n 100 "$DEBUG_LOG"
  else
    echo "No debug log yet."
  fi
  press
}

change_limit() {
  if [[ ! -f "$CONF_FILE" ]]; then
    echo "[ERROR] Config file not found!"
    press; return
  fi

  # shellcheck disable=SC1090
  source "$CONF_FILE"
  echo "[INFO] Current Limit User Online: ${LIMIT:-2000}"
  read -rp "Enter new Limit User Online: " NEW_LIMIT
  if [[ -z "$NEW_LIMIT" ]]; then
    echo "[WARN] ไม่ได้เปลี่ยนค่า"
    press; return
  fi

  if ! [[ "$NEW_LIMIT" =~ ^[0-9]+$ ]]; then
    echo "[ERROR] ค่า Limit ต้องเป็นตัวเลขเท่านั้น"
    press; return
  fi

  sed -i "s/^LIMIT=.*/LIMIT=${NEW_LIMIT}/" "$CONF_FILE"
  echo "[OK] คุณได้เปลี่ยน Limit User Online แล้วเป็น ${NEW_LIMIT} คน"
  press
}

# =====================================================================
# Setup Swap
# =====================================================================

setup_swap() {
  echo "[INFO] Auto Swap Wizard"

  local ram_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  local ram_mb=$(( ram_kb / 1024 ))

  local swap_mb
  if   (( ram_mb <= 512 )); then       swap_mb=$(( ram_mb * 2 ))
  elif (( ram_mb <= 1024 )); then      swap_mb=$(( ram_mb * 2 ))
  elif (( ram_mb <= 2048 )); then      swap_mb=$(( ram_mb * 1 ))
  elif (( ram_mb <= 4096 )); then      swap_mb=$(( ram_mb * 1 ))
  elif (( ram_mb <= 8192 )); then      swap_mb=4096
  elif (( ram_mb <= 16384 )); then     swap_mb=4096
  elif (( ram_mb <= 32768 )); then     swap_mb=8192
  elif (( ram_mb <= 65536 )); then     swap_mb=8192
  else                                  swap_mb=8192
  fi

  if swapon --show | awk 'NR>1{print $1}' | grep -q .; then
    echo "[WARN] พบ Swap เดิมอยู่แล้ว"
    read -rp "ต้องการสร้างใหม่ทับเดิมหรือไม่? (Y/n): " ans
    if [[ -z "$ans" || "$ans" =~ ^[Yy]$ ]]; then
      swapoff -a || true
      sed -i '/swapfile showon/d' /etc/fstab || true
    else
      echo "[OK] ข้ามการสร้าง Swap ใหม่"
      press; return
    fi
  fi

  echo "[INFO] Creating swapfile size ${swap_mb} MiB ..."
  fallocate -l "${swap_mb}M" /swapfile || dd if=/dev/zero of=/swapfile bs=1M count="${swap_mb}"
  chmod 600 /swapfile
  mkswap /swapfile >/dev/null
  swapon /swapfile

  if ! grep -q "swapfile showon" /etc/fstab; then
    echo "/swapfile none swap sw 0 0 # swapfile showon" >> /etc/fstab
  fi

  sysctl -w vm.swappiness=10 >/dev/null
  sysctl -w vm.vfs_cache_pressure=100 >/dev/null
  if ! grep -q '^vm.swappiness' /etc/sysctl.conf; then echo "vm.swappiness=10" >> /etc/sysctl.conf; fi
  if ! grep -q '^vm.vfs_cache_pressure' /etc/sysctl.conf; then echo "vm.vfs_cache_pressure=100" >> /etc/sysctl.conf; fi

  echo "[OK] Swap พร้อมใช้งาน:"
  free -h

  systemctl restart online-check vnstat-traffic v2ray-traffic sysinfo || true
  echo "[OK] Restarted ShowOn services."
  press
}

# =====================================================================
# Menu
# =====================================================================

show_menu() {
  header
  print_status
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "5) Change Limit User Online"
  echo "6) Setup Swap"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0-6]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    5) change_limit ;;
    6) setup_swap ;;
    0) exit 0 ;;
    *) echo "[ERROR] Invalid choice"; sleep 1 ;;
  esac
  show_menu
}

# =====================================================================
# Main
# =====================================================================

require_root
show_menu
