#!/bin/bash
# =====================================================
# ShowOn Installer Script
# Version: V.1.0.0
# จะติดตั้งเมนู showon (Install/Uninstall/Exit)
# =====================================================

VERSION="V.1.0.0"

SHOWON_CMD="/usr/local/bin/showon"
CONF_FILE="/etc/showon.conf"
WWW_DIR="/var/www/html/server"
SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYSINFO="/usr/local/bin/sysinfo.sh"
SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

show_menu() {
    clear
    echo "==============================="
    echo "   ShowOn Script Manager $VERSION"
    echo "==============================="
    echo "1) Install Script"
    echo "2) Uninstall Script"
    echo "0) Exit"
    echo "==============================="
    read -p "Choose an option [0,1,2]: " choice
    case $choice in
        1) install_script ;;
        2) uninstall_script ;;
        0) exit 0 ;;
        *) echo "Invalid choice..."; sleep 2; show_menu ;;
    esac
}

install_script() {
    echo "[INFO] Installing ShowOn Script $VERSION ..."

    apt update -y && apt upgrade -y
    apt install -y curl jq net-tools psmisc nginx iproute2

    mkdir -p "$WWW_DIR"
    chmod -R 755 "$WWW_DIR"

    # Ask config
    read -p "Enter 3x-ui IP (default 127.0.0.1): " PANEL_IP
    PANEL_IP=${PANEL_IP:-127.0.0.1}

    read -p "Enter 3x-ui Port (default 88): " PANEL_PORT
    PANEL_PORT=${PANEL_PORT:-88}

    PANEL_URL="https://${PANEL_IP}:${PANEL_PORT}"
    echo "[INFO] Using PANEL_URL = $PANEL_URL"

    read -p "Enter 3x-ui username: " USERNAME
    read -p "Enter 3x-ui password: " PASSWORD

    # Save config
    cat >"$CONF_FILE" <<EOF
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"
WWW_DIR="$WWW_DIR"
EOF
    chmod 600 "$CONF_FILE"

    # Online-check script
    cat >"$SCRIPT_ONLINE" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf
exec >> /var/log/showon.log 2>&1

_ons=$(ss -nt state established | grep -E ':22 ' | wc -l)

_onop=0
[ -f /etc/openvpn/server/openvpn-status.log ] && _onop=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || true)

_ondrp=$(pgrep dropbear | wc -l)

COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
  | grep 3x-ui | awk '{print $7}' || true)

if [ -z "$COOKIE" ]; then
    V2RAY_ONLINE="[]"
else
    V2RAY_ONLINE=$(curl -sk -b "3x-ui=$COOKIE" -X POST \
      "$PANEL_URL/panel/inbound/onlines" \
      -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
      | jq -r '.obj | @json' 2>/dev/null || echo "[]")
fi

_onv2=$(echo "$V2RAY_ONLINE" | jq 'length')

JSON=$(jq -n \
  --arg total "$(( _ons + _onop + _ondrp + _onv2 ))" \
  --arg ssh "$_ons" \
  --arg openvpn "$_onop" \
  --arg dropbear "$_ondrp" \
  --arg v2ray "$_onv2" \
  --argjson clients "$V2RAY_ONLINE" \
  '{total:$total|tonumber, ssh:$ssh|tonumber, openvpn:$openvpn|tonumber, dropbear:$dropbear|tonumber, v2ray:$v2ray|tonumber, clients:$clients}')

echo "$JSON" > "$WWW_DIR/online_app.json"
EOF
    chmod +x "$SCRIPT_ONLINE"

    # Sysinfo script
    cat >"$SCRIPT_SYSINFO" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf
exec >> /var/log/showon.log 2>&1

uptime=$(uptime -p | sed 's/up //')
cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8"%"}')
mem_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3 " / " $2}')

JSON=$(jq -n \
  --arg uptime "$uptime" \
  --arg cpu_usage "$cpu_usage" \
  --arg ram_usage "$mem_usage" \
  --arg disk_usage "$disk_usage" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}')

echo "$JSON" > "$WWW_DIR/sysinfo.json"
EOF
    chmod +x "$SCRIPT_SYSINFO"

    # Services
    cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=Online Users JSON Generator $VERSION
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_ONLINE; sleep 5; done'
Restart=always
RestartSec=5
EOF

    cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=System Info JSON Generator $VERSION
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_SYSINFO; sleep 5; done'
Restart=always
RestartSec=5
EOF

    # Nginx config
    cat >/etc/nginx/sites-available/server_checker <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }

    location /server/ {
        alias /var/www/html/server/;
        index index.html;
    }
}
EOF
    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    nginx -t && systemctl restart nginx

    # index.html
    cat >"$WWW_DIR/index.html" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Show Online User $VERSION</title>
  <style>
    body { background:#111; color:#fff; font-family:Arial,sans-serif; padding:20px; }
    h1 { color:#0f0; }
    .card { background:#222; padding:15px; margin-bottom:20px; border-radius:8px; }
    table { width:100%; border-collapse:collapse; margin-top:10px; }
    th, td { border:1px solid #444; padding:8px; text-align:center; }
    th { background:#333; }
    .spinner {border:4px solid #333;border-top:4px solid #0f0;border-radius:50%;width:20px;height:20px;animation:spin 1s linear infinite;margin:auto;}
    @keyframes spin {100% {transform:rotate(360deg);}}
    @media (max-width:600px){body{font-size:14px;} h1{font-size:18px;} table{font-size:12px;}}
  </style>
</head>
<body>
  <h1>Show Online User <span style="color:#0ff;">$VERSION</span></h1>
  <div class="card">
    <h2>Online Summary</h2>
    <table>
      <thead><tr><th>Total</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr></thead>
      <tbody><tr id="summary"><td colspan="5"><div class="spinner"></div></td></tr></tbody>
    </table>
  </div>
  <div class="card">
    <h2>System & Network</h2>
    <div id="system"><div class="spinner"></div></div>
  </div>
  <script>
    async function loadData() {
      try {
        const res = await fetch('./online_app.json?_='+Date.now());
        const d = await res.json();
        document.getElementById("summary").innerHTML =
          \`<td>\${d.total}</td><td>\${d.ssh}</td><td>\${d.openvpn}</td><td>\${d.dropbear}</td><td>\${d.v2ray}</td>\`;
      } catch { document.getElementById("summary").innerHTML = '<td colspan="5">Error</td>'; }
      try {
        const r2 = await fetch('./sysinfo.json?_='+Date.now());
        const s = await r2.json();
        document.getElementById("system").innerHTML =
          \`<b>Uptime:</b> \${s.uptime}<br><b>CPU:</b> \${s.cpu_usage}<br><b>RAM:</b> \${s.ram_usage}<br><b>Disk:</b> \${s.disk_usage}\`;
      } catch { document.getElementById("system").innerHTML = 'Error'; }
    }
    loadData(); setInterval(loadData,5000);
  </script>
</body>
</html>
EOF

    # Enable services
    systemctl daemon-reexec
    systemctl enable --now online-check.service
    systemctl enable --now sysinfo.service
    systemctl enable nginx

    echo "[SUCCESS] Installed ShowOn $VERSION"
    echo "Open: http://$(hostname -I | awk '{print $1}'):82/server/"
    read -p "Press Enter to return to menu..." dummy
    show_menu
}

uninstall_script() {
    echo "[INFO] Uninstalling ShowOn Script $VERSION ..."

    systemctl stop online-check.service sysinfo.service 2>/dev/null || true
    systemctl disable online-check.service sysinfo.service 2>/dev/null || true

    rm -f "$SERVICE_ONLINE" "$SERVICE_SYSINFO"
    rm -f "$SCRIPT_ONLINE" "$SCRIPT_SYSINFO"
    rm -f "$CONF_FILE"
    rm -rf "$WWW_DIR"
    rm -f /etc/nginx/sites-enabled/server_checker
    rm -f /etc/nginx/sites-available/server_checker

    systemctl daemon-reload
    systemctl restart nginx

    echo "[SUCCESS] Uninstalled ShowOn $VERSION"
    read -p "Press Enter to reboot..." dummy
    reboot
}

# Create showon command
cat >"$SHOWON_CMD" <<'EOF'
#!/bin/bash
bash /root/Install
EOF
chmod +x "$SHOWON_CMD"

# Start menu
show_menu
