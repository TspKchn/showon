#!/usr/bin/env bash
# ==============================================================================
# Show Online User - Full Installer + Manager
# Version: V.1.0.0
# Support: Ubuntu 18.04 - 24.04 (systemd)
# ==============================================================================
set -Eeuo pipefail

APP_NAME="showon"
VERSION="V.1.0.0"

APP_DIR="/etc/${APP_NAME}"
BIN_DIR="/usr/local/bin"
WEB_DIR="/var/www/html/server"
WWW_ROOT="/var/www/html"

MENU_BIN="${BIN_DIR}/${APP_NAME}"
CHECK_BIN="${BIN_DIR}/online-check.sh"

NGX_AVAIL="/etc/nginx/sites-available/${APP_NAME}"
NGX_ENABL="/etc/nginx/sites-enabled/${APP_NAME}"
SVC_FILE="/etc/systemd/system/online-check.service"

CRED_FILE="${APP_DIR}/cred.env"
UPDATED_AT_FILE="${APP_DIR}/updated_at"

# ---------- utils ----------
msg(){ echo -e "[INFO] $*"; }
err(){ echo -e "[ERROR] $*" >&2; }
die(){ err "$*"; exit 1; }

need_root(){ [[ ${EUID:-0} -eq 0 ]] || die "Please run as root"; }

local_ip(){
  ip -4 route get 1.1.1.1 2>/dev/null | awk '/src/{print $7;exit}' || hostname -I | awk '{print $1}'
}

save_updated_at(){ date '+%Y-%m-%d %H:%M:%S' > "$UPDATED_AT_FILE" || true; }
read_updated_at(){ [[ -f "$UPDATED_AT_FILE" ]] && cat "$UPDATED_AT_FILE" || echo ""; }

ensure_dirs(){
  mkdir -p "$APP_DIR" "$WEB_DIR"
  chmod 755 "$WEB_DIR"
}

ensure_deps(){
  msg "Updating & installing dependencies..."
  apt-get update -y >/dev/null
  DEBIAN_FRONTEND=noninteractive apt-get install -y \
    nginx curl jq sqlite3 iproute2 net-tools bc >/dev/null
}

# ---------- detect x-ui panel ----------
detect_panel_port(){
  local port=""
  local db="/etc/x-ui/x-ui.db"
  local cfg="/usr/local/x-ui/bin/config.json"
  if [[ -f "$db" ]]; then
    # ตารางใหม่มักเป็น settings(key,value)
    port="$(sqlite3 "$db" "SELECT value FROM settings WHERE key='webPort' LIMIT 1;" 2>/dev/null || true)"
  fi
  if [[ -z "${port}" || "${port}" == "null" ]]; then
    if [[ -f "$cfg" ]]; then
      port="$(jq -r '.port // empty' "$cfg" 2>/dev/null || true)"
    fi
  fi
  [[ -z "${port}" || "${port}" == "null" ]] && port="88"
  echo "$port"
}

detect_panel_url(){
  local ip="$(local_ip)"
  local port="$(detect_panel_port)"
  local proto="http"
  if curl -sk --max-time 2 "https://${ip}:${port}/" >/dev/null 2>&1; then
    proto="https"
  fi
  echo "${proto}://${ip}:${port}"
}

# ---------- nginx setup ----------
clean_nginx_82_dupes(){
  # ปิดทุกไฟล์ที่ listen 82 ยกเว้น ${APP_NAME}
  for f in /etc/nginx/sites-enabled/* /etc/nginx/sites-available/*; do
    [[ -e "$f" ]] || continue
    [[ "$f" == "$NGX_AVAIL" || "$f" == "$NGX_ENABL" ]] && continue
    if grep -qE '^\s*listen\s+82(\s+default_server)?;' "$f" 2>/dev/null; then
      msg "Disable conflicting 82 in: $f"
      local base="$(basename "$f")"
      rm -f "/etc/nginx/sites-enabled/$base" 2>/dev/null || true
    fi
  done
}

write_nginx_site(){
  cat > "$NGX_AVAIL" <<'EOF'
server {
    listen 82 default_server;
    listen [::]:82 default_server;
    server_name _;

    root /var/www/html;
    index index.html index.htm;

    add_header Cache-Control "no-store";

    location /server/ {
        autoindex on;
        default_type text/html;
        try_files $uri $uri/ /server/index.html;
    }

    location ~* \.(json)$ {
        add_header Cache-Control "no-store";
    }
}
EOF
  ln -sf "$NGX_AVAIL" "$NGX_ENABL"
  nginx -t && systemctl restart nginx
}

# ---------- web ui ----------
write_index_html(){
  mkdir -p "$WEB_DIR"
  cat > "${WEB_DIR}/index.html" <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Show Online Users</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  :root { color-scheme: light dark; }
  body { font-family: Arial, sans-serif; margin: 0; padding: 24px; background: #111; color: #eee; }
  h1 { margin: 0 0 16px 0; }
  .grid { display: grid; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); gap: 16px; }
  .card { background: #1b1b1b; border-radius: 12px; padding: 16px; box-shadow: 0 2px 10px rgba(0,0,0,.35); }
  .big { font-size: 28px; font-weight: 700; }
  table { width:100%; border-collapse: collapse; margin-top: 12px; }
  th,td { border:1px solid #333; padding:8px; text-align:center;}
  th { background:#222; }
  .footer { opacity:.8; font-size:12px; margin-top:16px; }
</style>
</head>
<body>
  <h1>📊 Show Online Users</h1>
  <div class="grid">
    <div class="card">
      <div class="big" id="total">Loading...</div>
      <div>Total Online</div>
      <canvas id="bar" height="120"></canvas>
    </div>
    <div class="card">
      <table>
        <tr><th>Service</th><th>Online</th></tr>
        <tr><td>SSH</td><td id="ssh">-</td></tr>
        <tr><td>OpenVPN</td><td id="ovpn">-</td></tr>
        <tr><td>Dropbear</td><td id="drop">-</td></tr>
        <tr><td>V2Ray</td><td id="v2">-</td></tr>
      </table>
      <div class="footer">Auto refresh every 5s</div>
    </div>
  </div>

<script>
let ctx = document.getElementById('bar').getContext('2d');
let chart = new Chart(ctx, {
  type: 'bar',
  data: { labels: ['SSH','OpenVPN','Dropbear','V2Ray'],
    datasets: [{ label:'Online', data:[0,0,0,0] }]},
  options: { responsive:true, plugins:{ legend:{ display:false }}, scales:{ y:{ beginAtZero:true, precision:0 } } }
});

async function tick(){
  try{
    const r = await fetch('../online_app.json?_=' + Date.now(), {cache:'no-store'});
    if(!r.ok) throw new Error('HTTP '+r.status);
    const d = await r.json();
    document.getElementById('total').textContent = d.total;
    document.getElementById('ssh').textContent  = d.ssh;
    document.getElementById('ovpn').textContent = d.openvpn;
    document.getElementById('drop').textContent = d.dropbear;
    document.getElementById('v2').textContent   = d.v2ray;
    chart.data.datasets[0].data = [d.ssh, d.openvpn, d.dropbear, d.v2ray];
    chart.update();
  }catch(e){
    document.getElementById('total').textContent = 'Error';
  }
}
setInterval(tick, 5000); tick();
</script>
</body>
</html>
EOF
}

# ---------- online-check ----------
write_online_check(){
  cat > "$CHECK_BIN" <<'EOF'
#!/usr/bin/env bash
set -Eeuo pipefail

CRED_FILE="/etc/showon/cred.env"
OUT_JSON="/var/www/html/online_app.json"
WEB_JSON="/var/www/html/server/online_app.json"

jq_len(){ jq '.obj | length' 2>/dev/null || echo 0; }

get_cookie(){
  # return cookie string or empty
  local url="$1" user="$2" pass="$3"
  # capture headers to extract 3x-ui cookie value
  local ck
  ck="$(curl -sk -i -X POST "${url}/login" \
        -H "Content-Type: application/json" \
        -d "{\"username\":\"${user}\",\"password\":\"${pass}\"}" \
        | awk -F '3x-ui=' '/Set-Cookie/ {split($2,a,";"); print a[1]; exit}')"
  echo "$ck"
}

get_v2ray_online(){
  local url="$1" ck="$2"
  if [[ -z "$ck" ]]; then echo 0; return; fi
  # onlines endpoint requires POST with x-www-form-urlencoded and cookie
  local res
  res="$(curl -sk -X POST "${url}/panel/inbound/onlines" \
        -H "Accept: application/json, text/plain, */*" \
        -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
        -b "3x-ui=${ck}")"
  echo "$res" | jq_len
}

get_ssh(){
  # try robust filters across distros
  local n
  n="$(ss -nt state established 2>/dev/null | awk '$4 ~ /:22$/ {c++} END{print c+0}')"
  [[ -n "$n" ]] || n=0
  echo "$n"
}

get_openvpn(){
  local f1="/etc/openvpn/server/openvpn-status.log"
  local f2="/var/log/openvpn/status.log"
  if [[ -f "$f1" ]]; then
    grep -c "^CLIENT_LIST" "$f1" || echo 0
  elif [[ -f "$f2" ]]; then
    grep -c "^CLIENT_LIST" "$f2" || echo 0
  else
    echo 0
  fi
}

get_dropbear(){
  pgrep -x dropbear >/dev/null 2>&1 && pgrep -x dropbear | wc -l || echo 0
}

main(){
  [[ -f "$CRED_FILE" ]] || { echo '{"total":0,"ssh":0,"openvpn":0,"dropbear":0,"v2ray":0}' > "$WEB_JSON"; exit 0; }
  # shellcheck disable=SC1091
  source "$CRED_FILE"
  local ssh ovpn drp v2 ck
  ssh="$(get_ssh)"
  ovpn="$(get_openvpn)"
  drp="$(get_dropbear)"
  ck="$(get_cookie "$PANEL_URL" "$PANEL_USER" "$PANEL_PASS")"
  v2="$(get_v2ray_online "$PANEL_URL" "$ck")"
  [[ "$v2" =~ ^[0-9]+$ ]] || v2=0
  local total=$(( ssh + ovpn + drp + v2 ))
  printf '{"total":%d,"ssh":%d,"openvpn":%d,"dropbear":%d,"v2ray":%d}\n' \
    "$total" "$ssh" "$ovpn" "$drp" "$v2" > "$WEB_JSON"
  cp -f "$WEB_JSON" "$OUT_JSON" 2>/dev/null || true
}
while true; do
  main
  sleep 5
done
EOF
  chmod +x "$CHECK_BIN"
}

write_service(){
  cat > "$SVC_FILE" <<EOF
[Unit]
Description=Online User Checker (${APP_NAME})
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=${CHECK_BIN}
Restart=always
RestartSec=3
Nice=10
NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF
  systemctl daemon-reload
}

# ---------- menu ----------
write_menu(){
  cat > "$MENU_BIN" <<'EOF'
#!/usr/bin/env bash
set -Eeuo pipefail

APP_NAME="showon"
APP_DIR="/etc/${APP_NAME}"
CRED_FILE="${APP_DIR}/cred.env"
UPDATED_AT_FILE="${APP_DIR}/updated_at"
NGX_AVAIL="/etc/nginx/sites-available/${APP_NAME}"
NGX_ENABL="/etc/nginx/sites-enabled/${APP_NAME}"
CHECK_BIN="/usr/local/bin/online-check.sh"
SVC_FILE="/etc/systemd/system/online-check.service"

local_ip(){
  ip -4 route get 1.1.1.1 2>/dev/null | awk '/src/{print $7;exit}' || hostname -I | awk '{print $1}'
}
detect_panel_port(){
  local port=""
  local db="/etc/x-ui/x-ui.db"
  local cfg="/usr/local/x-ui/bin/config.json"
  if [[ -f "$db" ]]; then
    port="$(sqlite3 "$db" "SELECT value FROM settings WHERE key='webPort' LIMIT 1;" 2>/dev/null || true)"
  fi
  if [[ -z "${port}" || "${port}" == "null" ]]; then
    if [[ -f "$cfg" ]]; then
      port="$(jq -r '.port // empty' "$cfg" 2>/dev/null || true)"
    fi
  fi
  [[ -z "${port}" || "${port}" == "null" ]] && port="88"
  echo "$port"
}
detect_panel_url(){
  local ip="$(local_ip)"
  local port="$(detect_panel_port)"
  local proto="http"
  if curl -sk --max-time 2 "https://${ip}:${port}/" >/dev/null 2>&1; then
    proto="https"
  fi
  echo "${proto}://${ip}:${port}"
}
read_updated_at(){ [[ -f "$UPDATED_AT_FILE" ]] && cat "$UPDATED_AT_FILE" || echo ""; }

fix_nginx(){
  # disable any 82 listeners except showon
  for f in /etc/nginx/sites-enabled/* /etc/nginx/sites-available/*; do
    [[ -e "$f" ]] || continue
    [[ "$f" == "$NGX_AVAIL" || "$f" == "$NGX_ENABL" ]] && continue
    if grep -qE '^\s*listen\s+82(\s+default_server)?;' "$f" 2>/dev/null; then
      rm -f "/etc/nginx/sites-enabled/$(basename "$f")" 2>/dev/null || true
    fi
  done
  nginx -t && systemctl restart nginx && echo "[OK] Nginx fixed."
}

install_all(){
  bash <(curl -fsSL https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install) --do-install
}

restart_all(){
  systemctl restart nginx || true
  systemctl enable --now online-check.service || true
  echo "[OK] restarted."
}

uninstall_all(){
  systemctl disable --now online-check.service || true
  rm -f "$SVC_FILE" "$CHECK_BIN"
  rm -f "$NGX_ENABL" "$NGX_AVAIL"
  rm -rf /var/www/html/server /var/www/html/online_app.json
  rm -rf "$APP_DIR"
  systemctl daemon-reload
  nginx -t && systemctl restart nginx || true
  echo "[OK] Uninstalled."
}

while true; do
  clear
  IP="$(local_ip)"
  PANEL_URL="$(detect_panel_url)"
  SHOW_URL="http://${IP}:82/server/"

  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : V.1.0.0"
  echo " Last Update: $(read_updated_at)"
  echo "------------------------------------"
  echo " 3X-UI Panel URL : ${PANEL_URL}"
  echo " Show Online URL : ${SHOW_URL}"
  echo "------------------------------------"
  echo " 1). Install Script"
  echo " 2). Restart All Service"
  echo " 3). Uninstall"
  echo " 4). Update"
  echo " 5). Fix Nginx"
  echo " 0). Exit"
  echo "------------------------------------"
  read -r -p "Select option: " opt
  case "$opt" in
    1) install_all; read -r -p "Press Enter..." _ ;;
    2) restart_all; read -r -p "Press Enter..." _ ;;
    3) uninstall_all; read -r -p "Press Enter..." _ ;;
    4) bash <(curl -fsSL https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install); read -r -p "Press Enter..." _ ;;
    5) fix_nginx; read -r -p "Press Enter..." _ ;;
    0) exit 0 ;;
    *) echo "Invalid choice."; sleep 1 ;;
  esac
done
EOF
  chmod +x "$MENU_BIN"
}

# ---------- credential prompt ----------
prompt_credentials(){
  local panel_url="$1"
  echo "Detected 3X-UI: ${panel_url}"
  read -r -p "กรอก X-UI panel username: " u
  read -r -p "กรอก X-UI panel password: " p  # แสดงตัวอักษรชัดเจนตามที่ขอ
  mkdir -p "$APP_DIR"
  cat > "$CRED_FILE" <<EOF
PANEL_URL="${panel_url}"
PANEL_USER="${u}"
PANEL_PASS="${p}"
EOF
  chmod 600 "$CRED_FILE"
}

# ---------- master install ----------
do_install(){
  need_root
  ensure_deps
  ensure_dirs

  # credentials (ถามใหม่ทุกครั้งเมื่อติดตั้ง)
  local URL; URL="$(detect_panel_url)"
  prompt_credentials "$URL"

  # web + nginx
  write_index_html
  clean_nginx_82_dupes
  write_nginx_site

  # checker + service
  write_online_check
  write_service
  systemctl enable --now online-check.service

  # menu
  write_menu

  save_updated_at
  msg "Install complete."
  echo "Open: http://$(local_ip):82/server/"
}

# ---------- arg mode / default menu ----------
if [[ "${1:-}" == "--do-install" ]]; then
  do_install
  exit 0
fi

# default: show menu (auto-install menu if first run)
write_menu
exec "$MENU_BIN"
