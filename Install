#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.6 (Split-Files + SSL Edition + Logging)
# Author: TspKchn
# =====================================================

VERSION="V.1.0.6"

# ===== Repo =====
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"

# ===== Sources =====
SRC_ONLINE="$REPO_RAW/scripts/online-check.sh"
SRC_VNSTAT="$REPO_RAW/scripts/vnstat-traffic.sh"
SRC_V2RAY="$REPO_RAW/scripts/v2ray-traffic.sh"
SRC_SYSINFO="$REPO_RAW/scripts/sysinfo.sh"
SRC_INDEX="$REPO_RAW/web/index.html"
SRC_SSL="$REPO_RAW/scripts/setup-ssl.sh"

# ===== Install paths =====
WWW_DIR="/var/www/html/server"
BIN_DIR="/usr/local/bin"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="$BIN_DIR/online-check.sh"
SCRIPT_VNSTAT="$BIN_DIR/vnstat-traffic.sh"
SCRIPT_V2RAY="$BIN_DIR/v2ray-traffic.sh"
SCRIPT_SYSINFO="$BIN_DIR/sysinfo.sh"
SCRIPT_SSL="$BIN_DIR/setup-ssl.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_VNSTAT="/etc/systemd/system/vnstat-traffic.service"
SERVICE_V2RAY="/etc/systemd/system/v2ray-traffic.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"

# ===== Colors =====
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; NC="\e[0m"

log() {
  echo "[$(date '+%F %T')][INSTALL] $*" >> "$DEBUG_LOG"
}

require_root() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}[ERROR]${NC} Please run as root."
    exit 1
  fi
}

header() {
  clear
  echo "==============================="
  echo "   ShowOn Script Manager ${VERSION}"
  echo "==============================="
}

press() { read -rp "Press Enter to return to menu..." _; }

# ===== Detect NIC =====
get_nic() {
  ip -o -4 route get 8.8.8.8 2>/dev/null \
    | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1)}' \
    | head -n1
}

# ===== GitHub update check =====
check_update() {
  local remote install_raw
  install_raw="$(curl -fsSL "$REPO_RAW/Install" || true)"

  if [[ -z "$install_raw" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ไม่สามารถเช็คเวอร์ชันจาก GitHub ได้"
    return
  fi

  remote="$(printf '%s' "$install_raw" | grep -m1 '^VERSION=' | cut -d'"' -f2)"
  if [[ -z "$remote" ]]; then
    echo -e "${YELLOW}[WARN]${NC} พบไฟล์ Install ใน GitHub แต่หา VERSION ไม่เจอ"
    return
  fi

  if [[ "$VERSION" == "$remote" ]]; then
    echo -e "${GREEN}[OK]${NC} You are using the latest version."
  else
    echo -e "${CYAN}[UPDATE]${NC} มีเวอร์ชันใหม่: $remote (ปัจจุบัน: $VERSION)"
    read -rp "กด Enter เพื่อตกลงอัปเดตเป็นเวอร์ชันใหม่... " _
    update_script
    exec bash /root/Install
    exit 0
  fi
}

write_nginx() {
  mkdir -p "$WWW_DIR"
  mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

  cat >"$SITE_AV" <<EOF
server {
    listen 82 ssl http2 default_server;
    listen 82;
    server_name _;

    ssl_certificate     /etc/letsencrypt/live/default/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/default/privkey.pem;

    location = / {
        return 302 /server/;
    }
    location /server/ {
        alias $WWW_DIR/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store";
    }
}
EOF

  ln -sf "$SITE_AV" "$SITE_EN"

  if nginx -t; then
    systemctl reload nginx 2>/dev/null || systemctl restart nginx 2>/dev/null || true
  else
    echo -e "${YELLOW}[WARN]${NC} nginx config test failed → will try to start nginx..."
    systemctl start nginx 2>/dev/null || true
  fi

  echo -e "${GREEN}[OK]${NC} Nginx ready at :82 (HTTP/HTTPS)"
}

download_or_die() {
  local url="$1" dst="$2"
  if ! curl -fsSL "$url" -o "$dst"; then
    echo -e "${RED}[ERROR]${NC} Download failed: $url"
    log "Download failed: $url"
    exit 1
  fi
}

install_script() {
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..."
  log "Starting installation"

  apt update -y >/dev/null 2>&1 || true
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates >/dev/null 2>&1 || true

  UBUNTU_VERSION=$(lsb_release -rs 2>/dev/null || echo "0")
  if [[ "$UBUNTU_VERSION" == "18.04" ]]; then
    echo -e "${YELLOW}[WARN]${NC} Ubuntu 18.04 detected, installing vnstat from PPA..."
    apt install -y software-properties-common gnupg2 >/dev/null 2>&1 || true
    add-apt-repository -y ppa:unit193/vnstat >/dev/null 2>&1 || true
    apt update -y >/dev/null 2>&1 || true
    apt install -y vnstat >/dev/null 2>&1 || true
  else
    apt install -y vnstat >/dev/null 2>&1 || true
  fi
  systemctl enable vnstat >/dev/null 2>&1 || true
  systemctl start vnstat >/dev/null 2>&1 || true

  mkdir -p "$WWW_DIR" "$BIN_DIR" "$(dirname "$DEBUG_LOG")"

  # ==== config input ====
  echo -e "${CYAN}[INFO]${NC} ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  read -rp "3X-UI URL (copy login link): " PANEL_URL
  PANEL_URL="$(echo "$PANEL_URL" | sed 's:/*$::')"
  read -rp "3X-UI Username: " XUI_USER
  read -rp "3X-UI Password: " XUI_PASS
  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  NIC=$(get_nic)
  [[ -z "$NIC" ]] && NIC="eth0"

  cat >"$CONF_FILE" <<EOF
VERSION="${VERSION}"
WWW_DIR="$WWW_DIR"
LIMIT=${LIMIT}
DEBUG_LOG="$DEBUG_LOG"
PANEL_URL="$PANEL_URL"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"
NET_IFACE="$NIC"
EOF
  chmod 600 "$CONF_FILE"

  # ==== download scripts ====
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  # ==== nginx config ====
  write_nginx

  # ==== SSL setup ====
  echo -e "${CYAN}[INFO]${NC} Setting up SSL..."
  log "Running setup-ssl.sh"
  download_or_die "$SRC_SSL" "$SCRIPT_SSL"
  chmod +x "$SCRIPT_SSL"
  $SCRIPT_SSL || echo -e "${YELLOW}[WARN]${NC} SSL setup failed → HTTP only"

  # ==== systemd services ====
  cat >"$SERVICE_ONLINE" <<'EOF'
[Unit]
Description=ShowOn Online Users JSON Generator
After=network-online.target
Wants=network-online.target
[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
RestartSec=2
[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_VNSTAT" <<'EOF'
[Unit]
Description=ShowOn vnStat + V2Ray Traffic JSON Generator
After=network-online.target
Wants=network-online.target
[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/vnstat-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2
[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_V2RAY" <<'EOF'
[Unit]
Description=ShowOn V2Ray-Only Traffic JSON Generator
After=network-online.target
Wants=network-online.target
[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/v2ray-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2
[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<'EOF'
[Unit]
Description=ShowOn System Info JSON Generator
After=network-online.target
Wants=network-online.target
[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/sysinfo.sh; sleep 5; done'
Restart=always
RestartSec=2
[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service

  if [[ "$PANEL_URL" == *.* ]]; then
    SHOW_URL="https://$PANEL_URL:82/server/"
  else
    SHOW_URL="http://$(hostname -I | awk '{print $1}'):82/server/"
  fi

  echo -e "${GREEN}[OK]${NC} Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: $SHOW_URL"
  press
}

uninstall_script() {
  echo -e "${CYAN}[INFO]${NC} Uninstalling ShowOn Script..."
  log "Uninstalling..."

  systemctl stop online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  systemctl disable online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_VNSTAT" "$SERVICE_V2RAY" "$SERVICE_SYSINFO"
  systemctl daemon-reload

  rm -f "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO" "$SCRIPT_SSL"
  rm -f "$CONF_FILE" "$DEBUG_LOG"

  rm -f "$SITE_AV" "$SITE_EN"
  if nginx -t 2>/dev/null; then
    systemctl reload nginx 2>/dev/null || true
  else
    systemctl restart nginx 2>/dev/null || true
  fi

  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
  log "Uninstalled completed"
  press
}

update_script() {
  echo -e "${CYAN}[INFO]${NC} Updating all ShowOn components..."
  log "Updating..."

  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  download_or_die "$SRC_SSL" "$SCRIPT_SSL"
  chmod +x "$SCRIPT_SSL"

  local TMP_SCRIPT="/tmp/Install.$$"
  if curl -fsSL "$REPO_RAW/Install" -o "$TMP_SCRIPT"; then
    mv "$TMP_SCRIPT" /root/Install
    chmod +x /root/Install
    echo -e "${GREEN}[OK]${NC} Updated Install script."
  else
    echo -e "${RED}[ERROR]${NC} Failed to update Install script."
  fi

  echo -e "${GREEN}[OK]${NC} Update completed."
  log "Update completed"
  press
}

check_debug() {
  if [[ -f "$DEBUG_LOG" ]]; then
    tail -n 100 "$DEBUG_LOG"
  else
    echo "No debug log yet."
  fi
  press
}

show_menu() {
  header
  check_update
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0,1,2,3,4]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR]${NC} Invalid choice"; sleep 1 ;;
  esac
  show_menu
}

require_root
show_menu
