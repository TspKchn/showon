#!/bin/bash
# =====================================================
# Script: Show Online Users (SSH / OpenVPN / Dropbear / V2Ray via 3x-ui)
# Version: V.1.0.0 (Stable)
# Author : ChatGPT
# Support: Ubuntu 18.04 - 24.04
# =====================================================

VERSION="V.1.0.0"
INSTALL_PATH="/usr/local/bin"
SERVICE_PATH="/etc/systemd/system"
NGINX_HTML="/var/www/html/server"
ONLINE_JSON="$NGINX_HTML/online_app.json"
GITHUB_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ==========================
# Detect Panel IP + Port
# ==========================
detect_panel_url() {
    local ip=$(hostname -I | awk '{print $1}')
    local port=""
    if command -v sqlite3 >/dev/null 2>&1 && [ -f "/etc/x-ui/x-ui.db" ]; then
        port=$(sqlite3 /etc/x-ui/x-ui.db "SELECT port FROM panel LIMIT 1;" 2>/dev/null)
    fi
    if [ -z "$port" ] && [ -f "/usr/local/x-ui/bin/config.json" ]; then
        port=$(jq -r '.inbounds[0].port // empty' /usr/local/x-ui/bin/config.json 2>/dev/null)
    fi
    [ -z "$port" ] && port=88
    PANEL_URL="https://${ip}:${port}"
}

# ==========================
# Install dependencies
# ==========================
install_requirements() {
    apt update -y && apt upgrade -y
    apt install -y curl jq sqlite3 net-tools iproute2 nginx
}

# ==========================
# Setup Nginx
# ==========================
setup_nginx() {
    mkdir -p "$NGINX_HTML"
    cat > /etc/nginx/sites-available/server_checker <<EOF
server {
    listen 82 default_server;
    server_name _;

    root $NGINX_HTML;
    index index.html;

    location / {
        try_files \$uri \$uri/ =404;
    }
}
EOF
    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    rm -f /etc/nginx/sites-enabled/default
    nginx -t && systemctl restart nginx || fix_nginx
}

fix_nginx() {
    rm -f /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/server_checker.bak*
    nginx -t && systemctl restart nginx
    systemctl enable nginx
}

# ==========================
# Online Check Script
# ==========================
install_online_check() {
    cat > $INSTALL_PATH/online-check.sh <<'EOF'
#!/bin/bash
set -e
USERNAME=$(cat /etc/showon_user 2>/dev/null || echo "admin")
PASSWORD=$(cat /etc/showon_pass 2>/dev/null || echo "admin")
PANEL_URL=$(grep 'PANEL_URL=' /usr/local/bin/install-online-check.sh 2>/dev/null | cut -d'"' -f2)

fun_online() {
    SSH_ON=$(ss -nt state established | grep ':22 ' | wc -l)
    OPENVPN_ON=0
    [ -f /etc/openvpn/server/openvpn-status.log ] && OPENVPN_ON=$(grep -c "10." /etc/openvpn/server/openvpn-status.log)
    DROPBEAR_ON=$(pgrep dropbear | wc -l)

    COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" | grep 3x-ui | awk '{print $7}')

    V2RAY_ON=0; V2RAY_TRAFFIC_DOWN=0; V2RAY_TRAFFIC_UP=0
    if [ -n "$COOKIE" ]; then
        ONLINE=$(curl -sk -X POST -b "3x-ui=$COOKIE" "$PANEL_URL/panel/inbound/onlines" \
            -H "Accept: application/json, text/plain, */*" \
            -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
            -H "X-Requested-With: XMLHttpRequest")
        V2RAY_ON=$(echo "$ONLINE" | jq '.obj | length' 2>/dev/null || echo 0)

        TRAFFIC=$(curl -sk -b "3x-ui=$COOKIE" "$PANEL_URL/panel/api/inbounds/list")
        V2RAY_TRAFFIC_DOWN=$(echo "$TRAFFIC" | jq '[.obj[0].clientStats[].down] | add' 2>/dev/null || echo 0)
        V2RAY_TRAFFIC_UP=$(echo "$TRAFFIC" | jq '[.obj[0].clientStats[].up] | add' 2>/dev/null || echo 0)
    fi

    JSON="{\"total\":$((SSH_ON+OPENVPN_ON+DROPBEAR_ON+V2RAY_ON)),\"ssh\":$SSH_ON,\"openvpn\":$OPENVPN_ON,\"dropbear\":$DROPBEAR_ON,\"v2ray\":$V2RAY_ON,\"down\":$V2RAY_TRAFFIC_DOWN,\"up\":$V2RAY_TRAFFIC_UP}"
    echo "$JSON" > /var/www/html/server/online_app.json
}
fun_online
EOF
    chmod +x $INSTALL_PATH/online-check.sh

    cat > $SERVICE_PATH/online-check.service <<EOF
[Unit]
Description=Online Users Checker
After=network.target

[Service]
ExecStart=$INSTALL_PATH/online-check.sh
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reexec
    systemctl enable online-check
    systemctl restart online-check
}

# ==========================
# Dashboard HTML
# ==========================
install_dashboard() {
    cat > $NGINX_HTML/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Online Users Dashboard</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
 body { font-family: Arial, sans-serif; margin: 20px; background: #f4f4f9; color: #333; }
 .card { background: #fff; border-radius: 10px; padding: 20px; margin-bottom: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1);}
 canvas { max-width: 100%; }
</style>
</head>
<body>
<h2>üåê Online Users Dashboard</h2>
<div class="card"><b>Summary:</b>
  <div id="summary"></div></div>
<div class="card"><canvas id="barChart"></canvas></div>
<div class="card"><canvas id="trafficChart"></canvas></div>
<div class="card"><pre id="sysinfo"></pre></div>
<script>
async function fetchData(){
  const res = await fetch('online_app.json'); 
  const data = await res.json();
  document.getElementById("summary").innerText = JSON.stringify(data,null,2);

  barChart.data.datasets[0].data=[data.ssh,data.openvpn,data.dropbear,data.v2ray];
  barChart.update();

  trafficChart.data.datasets[0].data.push(data.down/1024/1024);
  trafficChart.data.datasets[1].data.push(data.up/1024/1024);
  trafficChart.data.labels.push(new Date().toLocaleTimeString());
  trafficChart.update();
}
const barChart=new Chart(document.getElementById('barChart'),{
 type:'bar',
 data:{labels:['SSH','OpenVPN','Dropbear','V2Ray'],datasets:[{label:'Users Online',data:[0,0,0,0],backgroundColor:['#36a2eb','#ff6384','#ff9f40','#4bc0c0']}]}
});
const trafficChart=new Chart(document.getElementById('trafficChart'),{
 type:'line',
 data:{labels:[],datasets:[
   {label:'Download MB',data:[],borderColor:'#36a2eb',fill:false},
   {label:'Upload MB',data:[],borderColor:'#ff6384',fill:false}]}
});
setInterval(fetchData,5000);
</script>
</body>
</html>
EOF
}

# ==========================
# Menu
# ==========================
menu_showon() {
    detect_panel_url
    clear
    echo "===================================="
    echo "     Menu Script Show Online User"
    echo " Installed : $VERSION"
    echo " Last Update: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "------------------------------------"
    echo " 3X-UI Panel URL : $PANEL_URL"
    echo " Show Online URL : https://$(hostname -I | awk '{print $1}'):82/server/"
    echo "------------------------------------"
    echo " Latest GitHub Version: $(curl -s $GITHUB_RAW | grep 'VERSION=' | head -n1 | cut -d'\"' -f2)"
    echo " Latest Update Date   : $(curl -sI $GITHUB_RAW | grep -i Last-Modified | cut -d':' -f2- | xargs)"
    echo "===================================="
    echo "1). Install Script"
    echo "2). Restart All Service"
    echo "3). Uninstall"
    echo "4). Update"
    echo "5). View Update Logs"
    echo "6). Fix Nginx"
    echo "0). Exit"
    echo "------------------------------------"
    read -rp "Select option: " opt
    case $opt in
        1) install_requirements; setup_nginx; install_online_check; install_dashboard; menu_showon ;;
        2) systemctl restart online-check nginx; menu_showon ;;
        3) systemctl stop online-check nginx; systemctl disable online-check nginx; exit ;;
        4) bash <(curl -fsSL $GITHUB_RAW); exit ;;
        5) journalctl -u online-check --no-pager | tail -n 50; read -n1 -r ;;
        6) fix_nginx; menu_showon ;;
        0) exit ;;
        *) menu_showon ;;
    esac
}

# ==========================
# Main
# ==========================
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    menu_showon
fi
