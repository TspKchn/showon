#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.2 (Fixed numeric/jq bug)
# รองรับ SSH / OpenVPN / Dropbear / V2Ray (3x-ui / Xray-core)
# =====================================================

set -eo pipefail

VERSION="V.1.0.2"

# ---------- Colors ----------
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; CYAN='\033[0;36m'; NC='\033[0m'

# ---------- Paths ----------
WWW_DIR="/var/www/html/server"
CONF_FILE="/etc/showon.conf"

ONLINE_SH="/usr/local/bin/online-check.sh"
SYSINFO_SH="/usr/local/bin/sysinfo.sh"

ONLINE_SVC="/etc/systemd/system/online-check.service"
ONLINE_TMR="/etc/systemd/system/online-check.timer"
SYSINFO_SVC="/etc/systemd/system/sysinfo.service"
SYSINFO_TMR="/etc/systemd/system/sysinfo.timer"

NGINX_SITE="/etc/nginx/sites-available/server_checker"
NGINX_LINK="/etc/nginx/sites-enabled/server_checker"

# ---------- Helpers ----------
say_ok(){   echo -e "${GREEN}[SUCCESS]${NC} $*"; }
say_info(){ echo -e "${CYAN}[INFO]${NC} $*"; }
say_warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
say_err(){  echo -e "${RED}[ERROR]${NC} $*"; }

ip_addr(){ hostname -I | awk '{print $1}' | sed -e 's/[[:space:]]//g'; }

ensure_pkg(){
  say_info "Installing dependencies..."
  apt update -y >/dev/null 2>&1 || true
  apt install -y curl jq net-tools psmisc nginx iproute2 >/dev/null 2>&1 || true
}

clean_nginx_82_dups(){
  say_info "Cleaning duplicate nginx configs on port 82 (if any)..."
  grep -Rsl -e "listen 82" /etc/nginx/sites-available/ /etc/nginx/sites-enabled/ 2>/dev/null \
    | grep -v "server_checker" || true \
    | xargs -r rm -f || true
}

write_nginx_config(){
  say_info "Writing nginx site for /server/ ..."
  rm -f "$NGINX_SITE" "$NGINX_LINK" 2>/dev/null || true
  cat >"$NGINX_SITE" <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    root /var/www/html;
    index index.html;

    location /server/ {
        alias /var/www/html/server/;
        index index.html;
        autoindex on;
    }
}
EOF
  ln -sf "$NGINX_SITE" "$NGINX_LINK"
  nginx -t || true
  systemctl restart nginx || true
  systemctl enable nginx >/dev/null 2>&1 || true
}

prime_www(){
  mkdir -p "$WWW_DIR"
  chmod -R 755 "$WWW_DIR"
  [ -f "$WWW_DIR/online_app.json" ] || echo '{"onlines":0,"limite":2000,"ssh":0,"openvpn":0,"dropbear":0,"v2ray":0}' > "$WWW_DIR/online_app.json"
  [ -f "$WWW_DIR/sysinfo.json" ]   || echo '{"uptime":"-", "cpu_usage":"0", "ram_used":"0", "ram_total":"0", "disk_used":"0", "disk_total":"0"}' > "$WWW_DIR/sysinfo.json"
}

# ---------- Scripts ----------
write_online_script(){
  cat >"$ONLINE_SH" <<'EOF'
#!/bin/bash
set -eo pipefail

WWW_DIR="/var/www/html/server"
[ -f /etc/showon.conf ] && source /etc/showon.conf || true
: "${LIMITE:=2000}"

ssh_on=$(ss -nt state established 2>/dev/null | grep -E ':22 ' | wc -l || echo 0)
ovpn_on=0
[ -f /etc/openvpn/server/openvpn-status.log ] && ovpn_on=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || echo 0)
drop_on=$(pgrep dropbear 2>/dev/null | wc -l || echo 0)

v2_on=0
if [ -n "${PANEL_URL:-}" ]; then
  COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"${USERNAME:-}\",\"password\":\"${PASSWORD:-}\"}" \
    | grep 3x-ui | awk '{print $7}' || true)
  [ -n "$COOKIE" ] && v2_on=$(curl -sk -b "3x-ui=$COOKIE" -X POST \
      "$PANEL_URL/panel/inbound/onlines" \
      -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
      | jq '.obj | length' 2>/dev/null || echo 0)
else
  v2_on=$(ss -ntp 2>/dev/null | grep -c xray || echo 0)
fi

# ensure numeric
ssh_on=${ssh_on:-0}
ovpn_on=${ovpn_on:-0}
drop_on=${drop_on:-0}
v2_on=${v2_on:-0}

onlines=$(( ssh_on + ovpn_on + drop_on + v2_on ))

jq -n \
  --argjson onlines "${onlines:-0}" \
  --argjson limite "${LIMITE:-2000}" \
  --argjson ssh "${ssh_on:-0}" \
  --argjson openvpn "${ovpn_on:-0}" \
  --argjson dropbear "${drop_on:-0}" \
  --argjson v2ray "${v2_on:-0}" \
  '{onlines:$onlines, limite:$limite, ssh:$ssh, openvpn:$openvpn, dropbear:$dropbear, v2ray:$v2ray}' \
  > "$WWW_DIR/online_app.json"
EOF
  chmod +x "$ONLINE_SH"
}

write_sysinfo_script(){
  cat >"$SYSINFO_SH" <<'EOF'
#!/bin/bash
set -eo pipefail

WWW_DIR="/var/www/html/server"

upt=$(uptime -p 2>/dev/null | sed 's/^up //;s/,//g' || echo "-")
cpu=$(LC_ALL=C top -bn1 | awk -F'[, ]+' '/Cpu\(s\)/{printf "%.0f", 100-$8}')
read -r _ total used free _ < <(free -m | awk '/Mem:/{print $1,$2,$3,$4,$5}')
ram_used="$used"; ram_total="$total"
disk_used=$(df -h / | awk 'NR==2{print $3}')
disk_total=$(df -h / | awk 'NR==2{print $2}')

jq -n \
  --arg uptime "$upt" \
  --arg cpu_usage "$cpu" \
  --arg ram_used "$ram_used" \
  --arg ram_total "$ram_total" \
  --arg disk_used "$disk_used" \
  --arg disk_total "$disk_total" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_used:$ram_used|tonumber, ram_total:$ram_total|tonumber, disk_used:$disk_used, disk_total:$disk_total}' \
  > "$WWW_DIR/sysinfo.json"
EOF
  chmod +x "$SYSINFO_SH"
}

# ---------- Services ----------
write_services_and_timers(){
  cat >"$ONLINE_SVC" <<EOF
[Unit]
Description=Online Users JSON Generator (ShowOn)
After=network.target

[Service]
ExecStart=$ONLINE_SH
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

  cat >"$ONLINE_TMR" <<'EOF'
[Unit]
Description=Run online-check.service every 1 min (ShowOn)

[Timer]
OnBootSec=10
OnUnitActiveSec=60

[Install]
WantedBy=timers.target
EOF

  cat >"$SYSINFO_SVC" <<EOF
[Unit]
Description=System Info JSON Generator (ShowOn)
After=network.target

[Service]
ExecStart=$SYSINFO_SH
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SYSINFO_TMR" <<'EOF'
[Unit]
Description=Run sysinfo.service every 1 min (ShowOn)

[Timer]
OnBootSec=15
OnUnitActiveSec=60

[Install]
WantedBy=timers.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.timer sysinfo.timer >/dev/null 2>&1 || true
}

first_run_generators(){
  bash "$ONLINE_SH" || true
  bash "$SYSINFO_SH" || true
}

# ---------- Install / Uninstall ----------
install_script(){
  say_info "Installing ShowOn ($VERSION)..."
  ensure_pkg
  clean_nginx_82_dups

  echo
  say_info "ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  read -rp "3X-UI Panel IP : " PANEL_IP
  read -rp "3X-UI Panel Port : " PANEL_PORT
  read -rp "3X-UI Panel Username : " USERNAME
  read -rp "3X-UI Panel Password : " PASSWORD
  read -rp "Limit User Online : " LIMITE

  PANEL_IP="${PANEL_IP:-}"
  PANEL_PORT="${PANEL_PORT:-}"
  USERNAME="${USERNAME:-}"
  PASSWORD="${PASSWORD:-}"
  LIMITE="${LIMITE:-2000}"

  if [ -n "$PANEL_IP" ] && [ -n "$PANEL_PORT" ]; then
    PANEL_URL="https://${PANEL_IP}:${PANEL_PORT}"
  else
    PANEL_URL=""
  fi

  cat >"$CONF_FILE" <<EOF
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"
LIMITE="$LIMITE"
EOF
  chmod 600 "$CONF_FILE"

  prime_www
  write_online_script
  write_sysinfo_script
  write_services_and_timers
  write_nginx_config
  first_run_generators

  say_ok "Installation completed."
  echo "Open: http://$(ip_addr):82/server/"
  read -rp "Press Enter to return to menu..." _
}

uninstall_script(){
  say_warn "Uninstalling ShowOn ..."

  systemctl stop online-check.service online-check.timer sysinfo.service sysinfo.timer 2>/dev/null || true
  systemctl disable online-check.service online-check.timer sysinfo.service sysinfo.timer 2>/dev/null || true

  rm -f "$ONLINE_SVC" "$ONLINE_TMR" "$SYSINFO_SVC" "$SYSINFO_TMR"
  rm -f "$ONLINE_SH" "$SYSINFO_SH" "$CONF_FILE"
  rm -rf "$WWW_DIR"
  rm -f "$NGINX_SITE" "$NGINX_LINK"

  systemctl daemon-reload
  nginx -t >/dev/null 2>&1 || true
  systemctl restart nginx || true

  say_ok "Uninstall completed."
  echo "(ถ้า Install ใหม่มีปัญหา แนะนำให้ reboot เครื่องก่อน)"
  read -rp "Press Enter to return to menu..." _
}

# ---------- Menu ----------
show_menu(){
  clear
  echo -e "==============================="
  echo -e "   ShowOn Script Manager $VERSION"
  echo -e "==============================="
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0,1,2]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    0) exit 0 ;;
    *) say_err "Invalid choice..."; sleep 1 ;;
  esac
}

while true; do show_menu; done
