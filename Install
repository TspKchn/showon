#!/usr/bin/env bash
# ShowOn Installer / Manager - V.1.0.5
# Menu:
# 1) Install Script
# 2) Uninstall Script
# 3) Update Script
# 4) Check Debug Log
# 0) Exit
set -euo pipefail

VERSION="V.1.0.5"

# ---------- paths / const ----------
CONF="/etc/showon.conf"
WWW="/var/www/html/server"
JSON_ONLINE="$WWW/online_app.json"
JSON_NET="$WWW/netinfo.json"
JSON_SYS="$WWW/sysinfo.json"
COOKIE="/tmp/showon_cookie"
LOG="/var/log/showon-debug.log"
SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"
RAW_URL_DEFAULT="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ---------- helpers ----------
ok(){ printf "\033[32m[OK]\033[0m %s\n" "$*"; }
info(){ printf "\033[36m[INFO]\033[0m %s\n" "$*"; }
warn(){ printf "\033[33m[WARN]\033[0m %s\n" "$*"; }
err(){ printf "\033[31m[ERROR]\033[0m %s\n" "$*" 1>&2; }
require_root(){ [[ $EUID -eq 0 ]] || { err "ต้องรันด้วย root"; exit 1; }; }
header(){ clear; cat <<HDR
===============================
   ShowOn Script Manager $VERSION
===============================
HDR
}
pause(){ read -rp "Press Enter to return to menu..."; }

need_pkg(){
  DEBIAN_FRONTEND=noninteractive apt-get update -y >/dev/null 2>&1 || true
  DEBIAN_FRONTEND=noninteractive apt-get install -y "$@" >/dev/null 2>&1 || true
}

human_bytes(){
  local b="${1:-0}" KB=1024 MB=$((KB*1024)) GB=$((MB*1024))
  if (( b>=GB )); then printf "%.1f GB" "$(echo "$b/$GB" | bc -l)"
  elif (( b>=MB )); then printf "%.1f MB" "$(echo "$b/$MB" | bc -l)"
  elif (( b>=KB )); then printf "%.1f KB" "$(echo "$b/$KB" | bc -l)"
  else echo "${b} B"; fi
}
human_uptime(){ local s="${1:-0}"; printf "%dd %dh %dm" $((s/86400)) $(((s%86400)/3600)) $(((s%3600)/60)); }

ip_guess(){
  # ใช้ IP จาก PANEL_BASE ถ้าเป็นรูปแบบ IP มิฉะนั้นพยายามดึง public IP
  local host panel="${1:-}"
  host="$(echo "$panel" | sed -E 's~^https?://([^/:]+).*~\1~')"
  if [[ "$host" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    echo "$host"
  else
    curl -s http://ifconfig.me || hostname -I | awk '{print $1}'
  fi
}

# ---------- nginx + web ----------
write_web(){
  mkdir -p "$WWW"; chown -R www-data:www-data "$WWW"
  # index.html
  cat >"$WWW/index.html" <<'HTML'
<!doctype html><html><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>ShowOn Dashboard V1.0.5</title>
<style>
body{background:#0e0f10;color:#e7e7e7;font-family:system-ui,Segoe UI,Arial,sans-serif;margin:24px}
h1{color:#37e46a;margin:0 0 8px}.ver{color:#18c0ff;font-weight:700}
.card{background:#16181a;border-radius:14px;padding:18px;margin:18px 0;box-shadow:0 2px 12px rgba(0,0,0,.35)}
table{width:100%;border-collapse:collapse}th,td{padding:10px 12px;border-bottom:1px solid #25282b;text-align:left}
th{color:#aabdcf;font-weight:600}.muted{color:#aabdcf}.ok{color:#37e46a}.err{color:#ff7070}small{color:#aabdcf}
</style></head><body>
<h1>ShowOn Dashboard <span class="ver">V.1.0.5</span></h1>
<div class="card"><h2>Online Summary</h2>
<table><thead><tr><th>Onlines</th><th>Limit</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr></thead>
<tbody id="onlineRows"><tr><td colspan="6" class="muted">Loading...</td></tr></tbody></table></div>
<div class="card"><h2>System & Network</h2><div id="sys" class="muted">Loading...</div></div>
<div class="card"><h2>Traffic</h2><div id="net" class="muted">Loading...</div></div>
<small>Auto refresh every 5s</small>
<script>
async function j(p){const r=await fetch(p,{cache:"no-store"}); if(!r.ok) throw new Error(p+":"+r.status); return r.json();}
async function render(){
  try{
    const [o,s,n]=await Promise.all([j("./online_app.json"),j("./sysinfo.json"),j("./netinfo.json")]);
    const x=(o&&o.length)?o[0]:{onlines:0,limite:0,ssh:0,openvpn:0,dropbear:0,v2ray:0};
    document.getElementById("onlineRows").innerHTML=`<tr><td>${x.onlines}</td><td>${x.limite}</td><td>${x.ssh}</td><td>${x.openvpn}</td><td>${x.dropbear}</td><td>${x.v2ray}</td></tr>`;
    document.getElementById("sys").innerHTML=`Uptime: <span class="ok">${s.uptime}</span><br/>CPU: <span class="ok">${s.cpu}</span><br/>RAM: <span class="ok">${s.ram}</span><br/>Disk: <span class="ok">${s.disk}</span>`;
    document.getElementById("net").innerHTML=`VNStat RX/TX: <span class="ok">${n.vnstat.rx.toLocaleString()} / ${n.vnstat.tx.toLocaleString()} bytes</span><br/>V2Ray Up/Down: <span class="ok">${n.v2ray.up.toLocaleString()} / ${n.v2ray.down.toLocaleString()} bytes</span>`;
  }catch(e){document.getElementById("onlineRows").innerHTML=`<tr><td colspan="6" class="err">Error</td></tr>`;}
}
render(); setInterval(render,5000);
</script></body></html>
HTML

  # nginx site
  cat >"$SITE_AV" <<NGX
server {
  listen 82 default_server;
  server_name _;
  access_log /var/log/nginx/showon_access.log;
  error_log  /var/log/nginx/showon_error.log;

  location /server/ { alias $WWW/; index index.html; }
  location /server/online_app.json { alias $WWW/online_app.json; add_header Access-Control-Allow-Origin *; default_type application/json; }
  location /server/netinfo.json    { alias $WWW/netinfo.json;    add_header Access-Control-Allow-Origin *; default_type application/json; }
  location /server/sysinfo.json    { alias $WWW/sysinfo.json;    add_header Access-Control-Allow-Origin *; default_type application/json; }
}
NGX
  ln -sf "$SITE_AV" "$SITE_EN"
  nginx -t
  systemctl restart nginx
  ok "Nginx ready at :82 (/server/)"
}

# ---------- config ----------
prompt_config(){
  info "ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  echo "  👉 วางลิงก์หน้าล็อกอินทั้งเส้น เช่น https://IP:PORT/RandomPath หรือ http://domain:port/"
  read -rp "3X-UI URL (copy login link): " PANEL_BASE
  read -rp "3X-UI Username: " XUI_USER
  read -rp "3X-UI Password: " XUI_PASS
  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT="${LIMIT:-2000}"
  PANEL_BASE="${PANEL_BASE%/}"
  cat >"$CONF" <<CFG
VERSION="$VERSION"
WWW_DIR="$WWW"
LIMIT="$LIMIT"
DEBUG_LOG="$LOG"
PANEL_BASE="$PANEL_BASE"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"
CFG
  chmod 600 "$CONF"
}
load_config(){ source "$CONF" 2>/dev/null || true; }

# ---------- generator (every 5s) ----------
write_generator(){
  install -d -m 755 /usr/local/bin
  cat > /usr/local/bin/online-check.sh <<'GEN'
#!/usr/bin/env bash
set -euo pipefail
CONF="/etc/showon.conf"; source "$CONF" 2>/dev/null || true
WWW="${WWW_DIR:-/var/www/html/server}"
JSON_ON="$WWW/online_app.json"; JSON_NET="$WWW/netinfo.json"; JSON_SYS="$WWW/sysinfo.json"
COOKIE="/tmp/showon_cookie"; LOG="${DEBUG_LOG:-/var/log/showon-debug.log}"
LIMIT="${LIMIT:-2000}"; PANEL_BASE="${PANEL_BASE:-}"; XUI_USER="${XUI_USER:-}"; XUI_PASS="${XUI_PASS:-}"
mkdir -p "$WWW"

iface_default(){ ip route get 1.1.1.1 2>/dev/null | awk '/dev/ {for(i=1;i<=NF;i++) if($i=="dev"){print $(i+1); exit}}'; }
human_bytes(){ local b="${1:-0}" KB=1024 MB=$((KB*1024)) GB=$((MB*1024)); if (( b>=GB )); then printf "%.1f GB" "$(echo "$b/$GB" | bc -l)"; elif (( b>=MB )); then printf "%.1f MB" "$(echo "$b/$MB" | bc -l)"; elif (( b>=KB )); then printf "%.1f KB" "$(echo "$b/$KB" | bc -l)"; else echo "${b} B"; fi; }
human_uptime(){ local s="${1:-0}"; printf "%dd %dh %dm" $((s/86400)) $(((s%86400)/3600)) $(((s%3600)/60)); }

login_xui(){ : > "$COOKIE"; [[ -n "$PANEL_BASE" ]] || return 0; curl -sk -c "$COOKIE" -X POST "$PANEL_BASE/login" -d "username=$XUI_USER&password=$XUI_PASS" >/dev/null || true; }
fetch_onlines(){ [[ -n "$PANEL_BASE" ]] || { echo ""; return; }; curl -sk -b "$COOKIE" -H "Content-Type: application/json" -X POST "$PANEL_BASE/panel/api/inbounds/onlines" -d '{}' 2>/dev/null || echo ''; }
fetch_list(){ [[ -n "$PANEL_BASE" ]] || { echo "{}"; return; }; curl -sk -b "$COOKIE" "$PANEL_BASE/panel/api/inbounds/list" 2>/dev/null || echo '{}'; }
fetch_status(){ [[ -n "$PANEL_BASE" ]] || { echo "{}"; return; }; curl -sk -b "$COOKIE" "$PANEL_BASE/panel/api/server/status" 2>/dev/null || echo '{}'; }

# Count SSH / OpenVPN / Dropbear
SSH_ON=$(ss -nt state established 2>/dev/null | awk '$3 ~ /:22$/ {c++} END{print c+0}')
OVPN_ON=0; [[ -f /etc/openvpn/server/openvpn-status.log ]] && OVPN_ON=$(grep -c '^CLIENT_LIST' /etc/openvpn/server/openvpn-status.log || true)
DB_ON=$(pgrep dropbear >/dev/null 2>&1 && pgrep -c dropbear || echo 0)

login_xui
NOW=$(date +%s%3N)
ON_RAW=$(fetch_onlines)
LIST=$(fetch_list)

# Determine V2Ray online by (onlines list) ∩ (clientStats with lastOnline within 60s)
V2_ON=0
if echo "$ON_RAW" | jq -e '.success==true' >/dev/null 2>&1; then
  echo "$ON_RAW" | jq -r '.obj[]?' | while read -r EMAIL; do
    [[ -z "$EMAIL" ]] && continue
    LAST=$(echo "$LIST" | jq -r ".obj[].clientStats[] | select(.email==\"$EMAIL\") | .lastOnline")
    if [[ "$LAST" != "null" && -n "$LAST" ]]; then
      DIFF=$(( NOW - LAST ))
      if (( DIFF >= 0 && DIFF < 60000 )); then
        echo online
      fi
    fi
  done | wc -l | { read V2_ON; echo "$V2_ON" > /tmp/.v2_on.tmp; }
  V2_ON=$(cat /tmp/.v2_on.tmp 2>/dev/null || echo 0)
fi

ON_TOTAL=$(( SSH_ON + OVPN_ON + DB_ON + V2_ON ))

# VNStat (device auto-detect)
IFACE=$(ip route get 1.1.1.1 2>/dev/null | awk '/dev/ {for(i=1;i<=NF;i++) if($i=="dev"){print $(i+1); exit}}')
RX=$(vnstat --json -i "$IFACE" 2>/dev/null | jq -r '.interfaces[0].traffic.total.rx // 0' || echo 0)
TX=$(vnstat --json -i "$IFACE" 2>/dev/null | jq -r '.interfaces[0].traffic.total.tx // 0' || echo 0)

# Sum V2Ray traffic from inbounds list (up/down)
V2_UP=$(echo "$LIST" | jq -r '[.obj[]?.up] | add // 0' 2>/dev/null || echo 0)
V2_DOWN=$(echo "$LIST" | jq -r '[.obj[]?.down] | add // 0' 2>/dev/null || echo 0)

# System status from 3x-ui (if available)
SYS=$(fetch_status)
CPU=$(echo "$SYS" | jq -r '.obj.cpu // empty'); MEMC=$(echo "$SYS" | jq -r '.obj.mem.current // empty')
MEMT=$(echo "$SYS" | jq -r '.obj.mem.total // empty'); DISKC=$(echo "$SYS" | jq -r '.obj.disk.current // empty')
DISKT=$(echo "$SYS" | jq -r '.obj.disk.total // empty'); UPT=$(echo "$SYS" | jq -r '.obj.uptime // empty')

# Write JSON
cat >"$JSON_ON" <<J1
[
  {"onlines": $ON_TOTAL, "limite": $LIMIT, "ssh": $SSH_ON, "openvpn": $OVPN_ON, "dropbear": $DB_ON, "v2ray": $V2_ON}
]
J1

cat >"$JSON_NET" <<J2
{"vnstat":{"rx":$RX,"tx":$TX},"v2ray":{"up":$V2_UP,"down":$V2_DOWN}}
J2

RAM_STR="$(human_bytes "${MEMC:-0}") / $(human_bytes "${MEMT:-0}")"
DISK_STR="$(human_bytes "${DISKC:-0}") / $(human_bytes "${DISKT:-0}")"
UPT_STR="$(human_uptime "${UPT:-0}")"
CPU_STR="$( [[ -n "${CPU:-}" ]] && printf "%.1f%%" "$CPU" || echo "N/A")"
cat >"$JSON_SYS" <<J3
{"uptime":"$UPT_STR","cpu":"$CPU_STR","ram":"$RAM_STR","disk":"$DISK_STR"}
J3

chown -R www-data:www-data "$WWW"
echo "[$(date +%F" "%T)][ONLINE] online: $(cat "$JSON_ON")" >> "$LOG"
echo "[$(date +%F" "%T)][NET] netinfo: $(cat "$JSON_NET")" >> "$LOG"
GEN
  chmod +x /usr/local/bin/online-check.sh
}

write_service(){
  cat >/etc/systemd/system/online-check.service <<'UNIT'
[Unit]
Description=ShowOn Online Users JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
RestartSec=2
User=root

[Install]
WantedBy=multi-user.target
UNIT
  systemctl daemon-reload
  systemctl enable --now online-check.service
}

# ---------- actions ----------
do_install(){
  info "Installing ShowOn ($VERSION)..."
  need_pkg jq curl nginx vnstat coreutils iproute2 bc
  [[ -f "$CONF" ]] || prompt_config
  source "$CONF" 2>/dev/null || true
  info "Writing nginx site for /server/ ..."
  write_web
  write_generator
  /usr/local/bin/online-check.sh || true
  write_service
  local ip; ip="$(ip_guess "${PANEL_BASE:-}")"
  ok "Installed ShowOn $VERSION"
  info "Open: http://${ip}:82/server/"
  pause
}

do_uninstall(){
  warn "จะลบ service/สคริปต์/หน้าเว็บของ ShowOn ออก"
  read -rp "ยืนยัน (yes/no): " c
  [[ "${c,,}" == "yes" ]] || { info "ยกเลิก"; pause; return; }
  systemctl disable --now online-check.service >/dev/null 2>&1 || true
  rm -f /etc/systemd/system/online-check.service
  systemctl daemon-reload || true
  rm -f /usr/local/bin/online-check.sh
  rm -f "$SITE_AV" "$SITE_EN"
  systemctl restart nginx || true
  # ไม่ลบไฟล์ config และโฟลเดอร์เว็บ เผื่อผู้ใช้ต้องการเก็บไว้
  ok "Uninstalled core components (service/script/site)"
  pause
}

do_update(){
  read -rp "Raw Install URL [Enter=default]: " RAW
  RAW="${RAW:-$RAW_URL_DEFAULT}"
  info "Downloading latest Install from: $RAW"
  curl -fsSL -o /root/Install "$RAW"
  chmod +x /root/Install
  ok "Updated /root/Install แล้ว"
  pause
}

do_log(){
  [[ -f "$LOG" ]] && tail -n 120 "$LOG" || warn "ยังไม่มี $LOG"
  pause
}

# ---------- menu ----------
menu(){
  header
  echo "[OK] You are using the latest version."
  cat <<MENU
1) Install Script
2) Uninstall Script
3) Update Script
4) Check Debug Log
0) Exit
===============================
MENU
  read -rp "Choose an option [0,1,2,3,4]: " CH
  case "${CH:-}" in
    1) do_install ;;
    2) do_uninstall ;;
    3) do_update ;;
    4) do_log ;;
    0) exit 0 ;;
    *) ;;
  esac
}

# ---------- main ----------
require_root
while true; do menu; done
