#!/bin/bash
VERSION="V.1.0.0"
UPDATE_DATE="$(date '+%Y-%m-%d %H:%M:%S')"
GITHUB_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"
LOG_FILE="/var/log/showon_update.log"

# ==============================
# Update system
# ==============================
update_system() {
  echo "[INFO] Updating system..."
  apt update -y && apt upgrade -y
  apt install -y curl jq sqlite3 net-tools iproute2 nginx
}

# ==============================
# Detect X-UI Panel URL
# ==============================
detect_panel_url() {
  local ip=$(hostname -I | awk '{print $1}')
  local port=""

  # 1) Try DB
  if [ -f /etc/x-ui/x-ui.db ]; then
    port=$(sqlite3 /etc/x-ui/x-ui.db "SELECT port FROM settings LIMIT 1;" 2>/dev/null)
  fi
  # 2) Try config.json
  if [ -z "$port" ] && [ -f /etc/x-ui/config.json ]; then
    port=$(jq -r '.webPort // empty' /etc/x-ui/config.json 2>/dev/null)
  fi
  # 3) Default
  [ -z "$port" ] && port="88"

  PANEL_URL="https://${ip}:${port}"
  SHOW_URL="https://${ip}:82/server/"
}

# ==============================
# Setup Nginx
# ==============================
setup_nginx() {
  echo "[INFO] Setting up Nginx..."
  find /etc/nginx/sites-enabled/ /etc/nginx/sites-available/ -type f -exec grep -l "listen 82" {} \; 2>/dev/null | while read f; do
    rm -f "$f"
  done

  mkdir -p /var/www/html/server

  cat > /etc/nginx/sites-available/server_checker <<EOF
server {
    listen 82 default_server;
    listen [::]:82 default_server;

    root /var/www/html;
    index index.html;

    server_name _;

    location /server/ {
        autoindex on;
    }
}
EOF

  ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
  nginx -t && systemctl restart nginx
}

# ==============================
# Create HTML Dashboard
# ==============================
create_dashboard() {
  cat > /var/www/html/server/index.html <<'EOF'
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Online Users Dashboard</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
body { font-family: Arial, sans-serif; margin: 20px; background: #111; color: #eee; }
h2 { color: #ff9800; }
.card { background: #222; padding: 15px; margin: 10px 0; border-radius: 10px; box-shadow: 0 0 10px #000; }
table { width: 100%; border-collapse: collapse; }
table, th, td { border: 1px solid #444; }
th, td { padding: 8px; text-align: center; }
th { background: #333; }
</style>
</head>
<body>
<h2>VPN Online Users</h2>
<div class="card">
  <p><b>SSH:</b> <span id="ssh">0</span> | 
     <b>OpenVPN:</b> <span id="openvpn">0</span> | 
     <b>Dropbear:</b> <span id="dropbear">0</span> | 
     <b>V2Ray:</b> <span id="v2ray">0</span></p>
</div>

<div class="card">
  <h3>Online Clients</h3>
  <table>
    <thead><tr><th>Email</th><th>Upload (MB)</th><th>Download (MB)</th></tr></thead>
    <tbody id="client-table"></tbody>
  </table>
</div>

<div class="card">
  <h3>V2Ray Traffic</h3>
  <canvas id="trafficChart"></canvas>
</div>

<div class="card">
  <h3>System Info</h3>
  <pre id="sysinfo"></pre>
</div>

<script>
async function fetchData() {
  const res = await fetch("online_app.json?_=" + Date.now());
  const data = await res.json();
  document.getElementById("ssh").innerText = data.ssh;
  document.getElementById("openvpn").innerText = data.openvpn;
  document.getElementById("dropbear").innerText = data.dropbear;
  document.getElementById("v2ray").innerText = data.v2ray;

  let table = "";
  data.clients.forEach(c => {
    table += `<tr><td>${c.email}</td><td>${(c.up/1048576).toFixed(2)}</td><td>${(c.down/1048576).toFixed(2)}</td></tr>`;
  });
  document.getElementById("client-table").innerHTML = table;

  document.getElementById("sysinfo").innerText = data.sysinfo;
  return data;
}

let chart;
async function updateChart() {
  const data = await fetchData();
  const ctx = document.getElementById("trafficChart").getContext("2d");
  if (!chart) {
    chart = new Chart(ctx, {
      type: "bar",
      data: {
        labels: data.clients.map(c => c.email),
        datasets: [
          { label: "Upload (MB)", data: data.clients.map(c => c.up/1048576), backgroundColor: "orange" },
          { label: "Download (MB)", data: data.clients.map(c => c.down/1048576), backgroundColor: "lime" }
        ]
      },
      options: { responsive: true, scales: { x: { stacked: true }, y: { stacked: true } } }
    });
  } else {
    chart.data.labels = data.clients.map(c => c.email);
    chart.data.datasets[0].data = data.clients.map(c => c.up/1048576);
    chart.data.datasets[1].data = data.clients.map(c => c.down/1048576);
    chart.update();
  }
}
setInterval(updateChart, 5000);
updateChart();
</script>
</body>
</html>
EOF
}

# ==============================
# Menu
# ==============================
show_menu() {
  clear
  echo "===================================="
  echo "     Menu Script Show Online User"
  echo " Installed : $VERSION"
  echo " Last Update: $UPDATE_DATE"
  echo "------------------------------------"
  echo " 3X-UI Panel URL : $PANEL_URL"
  echo " Show Online URL : $SHOW_URL"
  echo "------------------------------------"
  echo " Latest GitHub Version: $(curl -fsSL $GITHUB_RAW | grep VERSION= | head -1 | cut -d'\"' -f2)"
  echo " Latest Update Date   : $(curl -fsSL $GITHUB_RAW | grep UPDATE_DATE= | head -1 | cut -d'\"' -f2)"
  echo "===================================="
  echo "1). Install Script"
  echo "2). Restart All Service"
  echo "3). Uninstall"
  echo "4). Update"
  echo "5). View Update Logs"
  echo "6). Fix Nginx"
  echo "0). Exit"
  echo "------------------------------------"
  read -p "Select option: " choice

  case $choice in
    1) update_system; detect_panel_url; setup_nginx; create_dashboard ;;
    2) systemctl restart online-check.service nginx ;;
    3) systemctl disable --now online-check.service; rm -f /usr/local/bin/online-check.sh ;;
    4) curl -fsSL $GITHUB_RAW -o /usr/local/bin/install-online-check.sh; bash /usr/local/bin/install-online-check.sh; echo "$(date '+%Y-%m-%d %H:%M:%S') Updated" >> $LOG_FILE ;;
    5) cat $LOG_FILE ;;
    6) setup_nginx ;;
    0) exit 0 ;;
  esac
}

# ==============================
# Main
# ==============================
update_system
detect_panel_url
setup_nginx
create_dashboard
show_menu
