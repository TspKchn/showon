#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.3 (Full)
# Author: TspKchn
# =====================================================

VERSION="V.1.0.3"
REPO_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ==========================
# Colors
# ==========================
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
CYAN="\e[36m"
NC="\e[0m"

SHOWON_CMD="/usr/local/bin/showon"
WWW_DIR="/var/www/html/server"
SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYSINFO="/usr/local/bin/sysinfo.sh"
SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

# ==========================
# Menu Function
# ==========================
show_menu() {
    clear
    echo -e "==============================="
    echo -e "   ShowOn Script Manager ${VERSION}"
    echo -e "==============================="

    # Check update
    LATEST_VERSION=$(curl -s "$REPO_URL" | grep -m1 "VERSION=" | cut -d'"' -f2)
    if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "$VERSION" ]]; then
        echo -e "${YELLOW}[UPDATE AVAILABLE]${NC} Latest: ${LATEST_VERSION} (Current: ${VERSION})"
        read -p "Press Enter to update now, or Ctrl+C to cancel..." _
        wget -q -O /root/Install "$REPO_URL"
        chmod +x /root/Install
        echo -e "${GREEN}[SUCCESS]${NC} Updated to ${LATEST_VERSION}"
        echo -e "${CYAN}[INFO]${NC} Please run 'showon' again to load the new version."
        exit 0
    else
        echo -e "${GREEN}[INFO]${NC} You are using the latest version."
    fi

    echo "1) Install Script"
    echo "2) Uninstall Script"
    echo "3) Check Debug Log"
    echo "0) Exit"
    echo "==============================="
    read -p "Choose an option [0,1,2,3,0]: " choice

    case $choice in
        1) install_script ;;
        2) uninstall_script ;;
        3) check_debug ;;
        0) exit 0 ;;
        *) echo -e "${RED}[ERROR] Invalid choice...${NC}" ; sleep 2 ; show_menu ;;
    esac
}

# ==========================
# Install Script
# ==========================
install_script() {
    echo -e "${CYAN}[INFO]${NC} Updating system..."
    apt update -y && apt upgrade -y

    echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
    apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates

    mkdir -p "$WWW_DIR"
    chmod -R 755 "$WWW_DIR"

    # -----------------------------
    # Ask Config
    # -----------------------------
    if [ -f /etc/x-ui/x-ui.db ]; then
        echo -e "${CYAN}[INFO]${NC} Detected 3x-ui installation."
        while true; do
            read -p "3X-UI URL (copy full login link, e.g. https://domain:port/xxxx): " PANEL_URL
            read -p "3X-UI Username: " USERNAME
            read -p "3X-UI Password: " PASSWORD

            echo -e "${CYAN}[INFO]${NC} Testing login..."
            LOGIN_RES=$(curl -sk -c - -X POST "$PANEL_URL/login" \
              -H "Content-Type: application/json" \
              -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}")
            COOKIE=$(echo "$LOGIN_RES" | grep 3x-ui | awk '{print $7}')

            if [ -n "$COOKIE" ]; then
                echo -e "${GREEN}[SUCCESS]${NC} Login OK!"
                break
            else
                echo -e "${RED}[ERROR] Login failed. Please re-enter."
            fi
        done

        cat >"$CONF_FILE" <<EOF
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"
WWW_DIR="$WWW_DIR"
EOF
        chmod 600 "$CONF_FILE"
    elif [ -f /usr/local/etc/xray/config.json ] || [ -f /etc/xray/config.json ]; then
        echo -e "${CYAN}[INFO]${NC} Detected Xray-core."
        cat >"$CONF_FILE" <<EOF
WWW_DIR="$WWW_DIR"
EOF
        chmod 600 "$CONF_FILE"
    fi

    # -----------------------------
    # Limit User Online
    # -----------------------------
    read -p "Limit User Online : " LIMIT
    LIMIT=${LIMIT:-2000}
    echo "LIMIT=$LIMIT" >> "$CONF_FILE"

    # -----------------------------
    # online-check.sh
    # -----------------------------
    cat >"$SCRIPT_ONLINE" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf
LIMIT=${LIMIT:-2000}
DEBUG_LOG="/var/log/showon-debug.log"

log_debug() { echo "[$(date '+%F %T')] $*" >> "$DEBUG_LOG"; }

_ons=$(ss -nt state established | grep -E ':22 ' | wc -l)
_onop=0
[ -f /etc/openvpn/server/openvpn-status.log ] && \
  _onop=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || true)
_ondrp=$(pgrep dropbear | wc -l)
_onv2=0

if [ -f /etc/x-ui/x-ui.db ]; then
    COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
      | grep 3x-ui | awk '{print $7}' || true)
    if [ -n "$COOKIE" ]; then
        DATA=$(curl -sk -b "3x-ui=$COOKIE" -X GET "$PANEL_URL/panel/api/server/status")
        if echo "$DATA" | jq empty 2>/dev/null; then
            _onv2=$(echo "$DATA" | jq '.clients | length' 2>/dev/null || echo "0")
        else
            ALT=$(curl -sk -b "3x-ui=$COOKIE" -X POST "$PANEL_URL/panel/api/inbounds/onlines" \
              -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8")
            _onv2=$(echo "$ALT" | jq '.obj | length' 2>/dev/null || echo "0")
        fi
    else
        log_debug "Login failed for PANEL_URL=$PANEL_URL"
    fi
elif [ -f /usr/local/etc/xray/config.json ]; then
    LOG_DIR="/var/log/xray"
    if [ -d "$LOG_DIR" ]; then
        _onv2=$(grep "accepted" "$LOG_DIR"/*.log 2>/dev/null | tail -n 2000 | \
          awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    fi
elif [ -f /etc/xray/config.json ]; then
    LOG_FILE="/var/log/xray/access.log"
    if [ -f "$LOG_FILE" ]; then
        _onv2=$(grep "accepted" "$LOG_FILE" 2>/dev/null | tail -n 2000 | \
          awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    fi
fi

JSON=$(jq -n \
  --arg onlines "$(( _ons + _onop + _ondrp + _onv2 ))" \
  --arg ssh "$_ons" \
  --arg openvpn "$_onop" \
  --arg dropbear "$_ondrp" \
  --arg v2ray "$_onv2" \
  --arg limite "$LIMIT" \
  '[{onlines:$onlines|tonumber, limite:$limite|tonumber, ssh:$ssh|tonumber, openvpn:$openvpn|tonumber, dropbear:$dropbear|tonumber, v2ray:$v2ray|tonumber}]')

echo "$JSON" > "$WWW_DIR/online_app.json"

# auto-clean debug every 5 minutes
find "$DEBUG_LOG" -mmin +5 -type f -exec truncate -s 0 {} \; 2>/dev/null || true
EOF
    chmod +x "$SCRIPT_ONLINE"

    # -----------------------------
    # sysinfo.sh
    # -----------------------------
    cat >"$SCRIPT_SYSINFO" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf

uptime=$(uptime -p | sed 's/up //')
cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8"%"}')
mem_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3 " / " $2}')

JSON=$(jq -n \
  --arg uptime "$uptime" \
  --arg cpu_usage "$cpu_usage" \
  --arg ram_usage "$mem_usage" \
  --arg disk_usage "$disk_usage" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}')

echo "$JSON" > "$WWW_DIR/sysinfo.json"
EOF
    chmod +x "$SCRIPT_SYSINFO"

    # -----------------------------
    # Services
    # -----------------------------
    cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=Online Users JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_ONLINE; sleep 5; done'
Restart=always
RestartSec=5
EOF

    cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=System Info JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_SYSINFO; sleep 5; done'
Restart=always
RestartSec=5
EOF

    systemctl daemon-reexec
    systemctl enable --now online-check.service
    systemctl enable --now sysinfo.service

    # -----------------------------
    # Nginx config
    # -----------------------------
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker

    cat >/etc/nginx/sites-available/server_checker <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }

    location /server/ {
        alias /var/www/html/server/;
        index index.html;
    }
}
EOF

    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    nginx -t && systemctl reload nginx

    # -----------------------------
    # index.html
    # -----------------------------
    cat >"$WWW_DIR/index.html" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>ShowOn Dashboard ${VERSION}</title>
  <style>
    body { background:#111; color:#fff; font-family:Arial,sans-serif; padding:20px; }
    h1 { color:#0f0; }
    .card { background:#222; padding:15px; margin-bottom:20px; border-radius:8px; }
    table { width:100%; border-collapse:collapse; margin-top:10px; }
    th, td { border:1px solid #444; padding:8px; text-align:center; }
    th { background:#333; }
    .spinner {border:4px solid #333;border-top:4px solid #0f0;border-radius:50%;width:20px;height:20px;animation:spin 1s linear infinite;margin:auto;}
    @keyframes spin {100% {transform:rotate(360deg);}}
    @media (max-width:600px){body{font-size:14px;} h1{font-size:18px;} table{font-size:12px;}}
  </style>
</head>
<body>
  <h1>ShowOn Dashboard <span style="color:#0ff;">${VERSION}</span></h1>

  <div class="card">
    <h2>Online Summary</h2>
    <table>
      <thead>
        <tr><th>Onlines</th><th>Limit</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr>
      </thead>
      <tbody>
        <tr id="summary"><td colspan="6"><div class="spinner"></div></td></tr>
      </tbody>
    </table>
  </div>

  <div class="card">
    <h2>System & Network</h2>
    <div id="system"><div class="spinner"></div></div>
  </div>

  <script>
    async function loadData() {
      try {
        const res = await fetch('./online_app.json?_='+Date.now());
        const d = await res.json();
        document.getElementById("summary").innerHTML =
          \`<td>\${d[0].onlines}</td><td>\${d[0].limite}</td><td>\${d[0].ssh}</td><td>\${d[0].openvpn}</td><td>\${d[0].dropbear}</td><td>\${d[0].v2ray}</td>\`;
      } catch { document.getElementById("summary").innerHTML = '<td colspan="6">Error</td>'; }

      try {
        const r2 = await fetch('./sysinfo.json?_='+Date.now());
        const s = await r2.json();
        document.getElementById("system").innerHTML =
          \`<b>Uptime:</b> \${s.uptime}<br>
           <b>CPU:</b> \${s.cpu_usage}<br>
           <b>RAM:</b> \${s.ram_usage}<br>
           <b>Disk:</b> \${s.disk_usage}\`;
      } catch { document.getElementById("system").innerHTML = 'Error'; }
    }
    loadData(); setInterval(loadData,5000);
  </script>
</body>
</html>
EOF
    chmod 644 "$WWW_DIR/index.html"
    chown www-data:www-data "$WWW_DIR/index.html"

    echo -e "${GREEN}[SUCCESS]${NC} Installed ShowOn ${VERSION}"
    echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
    read -p "Press Enter to return to menu..." _
    show_menu
}

# ==========================
# Uninstall Script
# ==========================
uninstall_script() {
    echo -e "${YELLOW}[INFO]${NC} Uninstalling ShowOn Script..."
    systemctl stop online-check.service sysinfo.service 2>/dev/null
    systemctl disable online-check.service sysinfo.service 2>/dev/null
    rm -f "$SERVICE_ONLINE" "$SERVICE_SYSINFO"
    rm -f "$SCRIPT_ONLINE" "$SCRIPT_SYSINFO"
    rm -f "$CONF_FILE"
    rm -rf "$WWW_DIR"
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker
    systemctl daemon-reload
    systemctl restart nginx
    echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
    read -p "Press Enter to return to menu..." _
    show_menu
}

# ==========================
# Check Debug Log
# ==========================
check_debug() {
    echo -e "${CYAN}[INFO]${NC} Showing last 50 lines of debug log..."
    tail -n 50 "$DEBUG_LOG" 2>/dev/null || echo "No debug log yet."
    read -p "Press Enter to return to menu..." _
    show_menu
}

# ==========================
# Create showon command
# ==========================
cat >"$SHOWON_CMD" <<'EOF'
#!/bin/bash
bash /root/Install
EOF
chmod +x "$SHOWON_CMD"

# ==========================
# Start Menu
# ==========================
show_menu
