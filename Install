#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.5 (Split-Files Edition)
# Author: TspKchn
# =====================================================

VERSION="V.1.0.5"

# ====== ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á repo ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ======
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"

# ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô repo (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ)
SRC_ONLINE="$REPO_RAW/scripts/online-check.sh"
SRC_VNSTAT="$REPO_RAW/scripts/vnstat-traffic.sh"
SRC_V2RAY="$REPO_RAW/scripts/v2ray-traffic.sh"
SRC_SYSINFO="$REPO_RAW/scripts/sysinfo.sh"
SRC_INDEX="$REPO_RAW/web/index.html"

# ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
WWW_DIR="/var/www/html/server"
BIN_DIR="/usr/local/bin"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="$BIN_DIR/online-check.sh"
SCRIPT_VNSTAT="$BIN_DIR/vnstat-traffic.sh"
SCRIPT_V2RAY="$BIN_DIR/v2ray-traffic.sh"
SCRIPT_SYSINFO="$BIN_DIR/sysinfo.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_VNSTAT="/etc/systemd/system/vnstat-traffic.service"
SERVICE_V2RAY="/etc/systemd/system/v2ray-traffic.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"

GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; NC="\e[0m"

require_root() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}[ERROR]${NC} Please run as root."
    exit 1
  fi
}

header() {
  clear
  echo "==============================="
  echo "   ShowOn Script Manager ${VERSION}"
  echo "==============================="
}

press() { read -p "Press Enter to return to menu..." _; show_menu; }

get_nic() {
  # ‡πÄ‡∏î‡∏≤ interface ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  ip -o -4 route get 8.8.8.8 2>/dev/null | awk '{for (i=1;i<=NF;i++) if ($i=="dev") print $(i+1)}' | head -n1
}

check_version() {
    local CURRENT_VERSION="V.1.0.5"
    local REMOTE_VERSION

    REMOTE_VERSION=$(curl -fsSL https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install \
        | grep -m1 '^VERSION=' | cut -d'"' -f2 2>/dev/null)

    if [[ -z "$REMOTE_VERSION" ]]; then
        echo "[WARN] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ"
        return
    fi

    if [[ "$CURRENT_VERSION" == "$REMOTE_VERSION" ]]; then
        echo "[OK] You are using the latest version."
    else
        echo "[UPDATE] ‡∏°‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: $REMOTE_VERSION (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $CURRENT_VERSION)"
    fi
}

write_nginx() {
  mkdir -p "$WWW_DIR"
  cat >"$SITE_AV" <<EOF
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }
    location /server/ {
        alias $WWW_DIR/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store";
    }
}
EOF
  ln -sf "$SITE_AV" "$SITE_EN"
  nginx -t && systemctl reload nginx || {
    echo -e "${YELLOW}[WARN]${NC} nginx reload failed, trying start..."
    systemctl start nginx || true
  }
  echo -e "${GREEN}[OK]${NC} Nginx ready at :82 (/server/)"
}

download_or_die() {
  local url="$1" dst="$2"
  curl -fsSL "$url" -o "$dst" || {
    echo -e "${RED}[ERROR]${NC} Download failed: $url"
    exit 1
  }
}

install_script() {
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..."
  apt update -y >/dev/null 2>&1 || true
  echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates vnstat >/dev/null 2>&1 || true
  systemctl enable --now vnstat >/dev/null 2>&1 || true

  mkdir -p "$WWW_DIR" "$BIN_DIR" "$(dirname "$DEBUG_LOG")"

  # ==== ‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô 3x-ui ====
  echo -e "${CYAN}[INFO]${NC} ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 3x-ui (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏î Enter ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ)"
  echo "  üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ '‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡πâ‡∏ô' ‡πÄ‡∏ä‡πà‡∏ô:"
  echo "     https://IP:PORT/RandomPath  ‡∏´‡∏£‡∏∑‡∏≠  http://domain:port/RandomPath"
  read -p "3X-UI URL (copy login link): " PANEL_URL
  PANEL_URL=$(echo "$PANEL_URL" | sed 's:/*$::')  # ‡∏ï‡∏±‡∏î / ‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å

  read -p "3X-UI Username: " XUI_USER
  read -p "3X-UI Password: " XUI_PASS
  read -p "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà URL)
  if [[ -n "$PANEL_URL" ]]; then
    COOKIE_FILE=$(mktemp)
    LOGIN_OK=false
    # login ‡∏ó‡∏±‡πâ‡∏á 2 ‡πÅ‡∏ö‡∏ö: x-www-form-urlencoded ‡πÅ‡∏•‡∏∞ JSON ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    if curl -sk -c "$COOKIE_FILE" -X POST "$PANEL_URL/login" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        --data "username=$XUI_USER&password=$XUI_PASS" | grep -q '"success":true'; then
      LOGIN_OK=true
    else
      if curl -sk -c "$COOKIE_FILE" -X POST "$PANEL_URL/login" \
          -H "Content-Type: application/json" \
          -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" | grep -q '"success":true'; then
        LOGIN_OK=true
      fi
    fi
    if $LOGIN_OK; then
      echo -e "${GREEN}[OK]${NC} Login to 3x-ui OK"
    else
      echo -e "${YELLOW}[WARN]${NC} Login to 3x-ui failed. ‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ 3x-ui"
      PANEL_URL=""
    fi
    rm -f "$COOKIE_FILE"
  fi

  # ==== ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô config ====
  NIC=$(get_nic)
  [[ -z "$NIC" ]] && NIC=$(ip -o -4 addr show up scope global | awk '{print $2}' | head -n1)
  [[ -z "$NIC" ]] && NIC="eth0"

  cat >"$CONF_FILE" <<EOF
VERSION="${VERSION}"
WWW_DIR="$WWW_DIR"
LIMIT=${LIMIT}
DEBUG_LOG="$DEBUG_LOG"

# 3x-ui (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
PANEL_URL="$PANEL_URL"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"

# network interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vnstat
NET_IFACE="$NIC"
EOF
  chmod 600 "$CONF_FILE"

  # ==== ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å repo ‡∏°‡∏≤‡∏ß‡∏≤‡∏á local ====
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  mkdir -p "$WWW_DIR"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  # ==== nginx site ====
  write_nginx

  # ==== systemd services ====
  cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=ShowOn Online Users JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do "$SCRIPT_ONLINE"; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_VNSTAT" <<EOF
[Unit]
Description=ShowOn vnStat + V2Ray Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do "$SCRIPT_VNSTAT"; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_V2RAY" <<EOF
[Unit]
Description=ShowOn V2Ray-Only Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do "$SCRIPT_V2RAY"; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=ShowOn System Info JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do "$SCRIPT_SYSINFO"; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service

  echo -e "${GREEN}[OK]${NC} Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  press
}

uninstall_script() {
  echo -e "${CYAN}[INFO]${NC} Uninstalling ShowOn Script..."

  systemctl stop online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  systemctl disable online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_VNSTAT" "$SERVICE_V2RAY" "$SERVICE_SYSINFO"
  systemctl daemon-reload

  rm -f "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"
  rm -f "$CONF_FILE" "$DEBUG_LOG"

  rm -f "$SITE_AV" "$SITE_EN"
  nginx -t && systemctl reload nginx 2>/dev/null || true

  # ‡πÑ‡∏°‡πà‡∏•‡∏ö $WWW_DIR ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ß‡πâ
  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
  press
}

update_script() {
  echo -e "${CYAN}[INFO]${NC} Updating local scripts from repo..."
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY" "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"
  systemctl restart online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service
  echo -e "${GREEN}[OK]${NC} Updated and services restarted."
  press
}

check_debug() {
  [[ -f "$DEBUG_LOG" ]] && tail -n 100 "$DEBUG_LOG" || echo "No debug log yet."
  press
}

show_menu() {
  header
  check_update
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -p "Choose an option [0,1,2,3,4]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR]${NC} Invalid choice"; sleep 1; show_menu ;;
  esac
}

require_root
show_menu
