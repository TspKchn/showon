#!/bin/bash
# =====================================================
# ShowOn Script Manager V.1.0.7 (Extended Full Edition)
# Author : TspKchn + ChatGPT
# =====================================================

# ----------------- ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô -----------------
VERSION="V.1.0.7"

# ----------------- ‡∏û‡∏≤‡∏ò‡∏£‡∏µ‡πÇ‡∏õ ------------------
REPO_RAW="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main"

# ----------------- ‡∏ã‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏ü‡∏•‡πå ----------------
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: online-check.sh (‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÇ‡∏õ) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° agnudp ‡πÅ‡∏•‡πâ‡∏ß
SRC_ONLINE="$REPO_RAW/scripts/online-check.sh"
SRC_VNSTAT="$REPO_RAW/scripts/vnstat-traffic.sh"
SRC_V2RAY="$REPO_RAW/scripts/v2ray-traffic.sh"
SRC_SYSINFO="$REPO_RAW/scripts/sysinfo.sh"
SRC_INDEX="$REPO_RAW/web/index.html"

# ----------------- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ----------
WWW_DIR="/var/www/html/server"
BIN_DIR="/usr/local/bin"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="$BIN_DIR/online-check.sh"
SCRIPT_VNSTAT="$BIN_DIR/vnstat-traffic.sh"
SCRIPT_V2RAY="$BIN_DIR/v2ray-traffic.sh"
SCRIPT_SYSINFO="$BIN_DIR/sysinfo.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_VNSTAT="/etc/systemd/system/vnstat-traffic.service"
SERVICE_V2RAY="/etc/systemd/system/v2ray-traffic.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

SITE_AV="/etc/nginx/sites-available/showon"
SITE_EN="/etc/nginx/sites-enabled/showon"

# ----------------- ‡∏™‡∏µ + ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ----------
BOLD="\e[1m"; DIM="\e[2m"
GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m"; CYAN="\e[36m"; GRAY="\e[90m"; NC="\e[0m"
CHECK="${GREEN}‚úî${NC}"
CROSS="${RED}‚úò${NC}"

# =====================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
# =====================================================

require_root() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}[ERROR]${NC} Please run as root."
    exit 1
  fi
}

press() { read -rp "Press Enter to continue..." _; }

header() {
  clear
  echo "==============================="
  echo "   ShowOn Script Manager ${VERSION}"
  echo "==============================="
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö NIC
get_nic() {
  ip -o -4 route get 8.8.8.8 2>/dev/null \
    | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1)}' \
    | head -n1
}

# ‡∏´‡∏°‡∏∏‡∏ô log (1MB)
rotate_log() {
  local max=1000000
  if [[ -f "$DEBUG_LOG" && $(stat -c%s "$DEBUG_LOG") -gt $max ]]; then
    mv "$DEBUG_LOG" "$DEBUG_LOG.1"
    : > "$DEBUG_LOG"
  fi
}

# ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö fail-fast
download_or_die() {
  local url="$1" dst="$2"
  if ! curl -fsSL "$url" -o "$dst"; then
    echo -e "${RED}[ERROR]${NC} Download failed: $url"
    exit 1
  fi
}

# ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Nginx site
write_nginx() {
  mkdir -p "$WWW_DIR"
  mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

  cat >"$SITE_AV" <<EOF
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }
    location /server/ {
        alias $WWW_DIR/;
        index index.html;
        autoindex off;
        add_header Cache-Control "no-store";
    }
}
EOF

  ln -sf "$SITE_AV" "$SITE_EN"

  if nginx -t; then
    systemctl reload nginx 2>/dev/null || systemctl restart nginx 2>/dev/null || true
  else
    echo -e "${YELLOW}[WARN]${NC} nginx config test failed ‚Üí will try to start nginx..."
    systemctl start nginx 2>/dev/null || true
  fi

  echo -e "${GREEN}[OK]${NC} Nginx ready at :82 (/server/)"
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡πÇ‡∏°‡∏ï (‡∏≠‡πà‡∏≤‡∏ô VERSION ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Install ‡∏ö‡∏ô GitHub)
check_update() {
  local remote install_raw
  install_raw="$(curl -fsSL "$REPO_RAW/Install" || true)"

  if [[ -z "$install_raw" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ"
    return
  fi

  remote="$(printf '%s' "$install_raw" | grep -m1 '^VERSION=' | cut -d'"' -f2)"
  if [[ -z "$remote" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Install ‡πÉ‡∏ô GitHub ‡πÅ‡∏ï‡πà‡∏´‡∏≤ VERSION ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠"
    return
  fi

  if [[ "$VERSION" == "$remote" ]]; then
    echo -e "${GREEN}[OK]${NC} You are using the latest version."
  else
    echo -e "${CYAN}[UPDATE]${NC} ‡∏°‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ${remote} (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${VERSION})"
    echo -en "‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå ${BOLD}n${NC} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°: "
    read ans
    if [[ -z "$ans" || "$ans" == "y" || "$ans" == "Y" ]]; then
      update_script
      press
    fi
  fi
}

# ----------------- ‡∏ï‡∏£‡∏ß‡∏à AGN-UDP (Hysteria) -----------------
detect_agnudp() {
  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: echo "present|port" ‡πÄ‡∏ä‡πà‡∏ô "1|36712" ‡∏´‡∏£‡∏∑‡∏≠ "0|"
  local present=0 port=""
  if [[ -x /usr/local/bin/hysteria || -f /etc/systemd/system/hysteria-server.service || -d /etc/hysteria ]]; then
    present=1
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô /etc/hysteria/config.json
    if [[ -f /etc/hysteria/config.json ]]; then
      # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:  "listen": ":36712"
      port="$(jq -r '.listen // empty' /etc/hysteria/config.json 2>/dev/null | sed -E 's/^:*//; s/[^0-9].*//')"
    fi
    # fallback ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    [[ -z "$port" ]] && port="36712"
  fi
  echo "${present}|${port}"
}

# ----------------- ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ON/OFF + ‡∏™‡∏µ -----------------
onoff_color() {
  local state="$1"
  if [[ "$state" == "ON" ]]; then echo -ne "${GREEN}ON${NC}"
  else echo -ne "${RED}OFF${NC}"; fi
}

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Service + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (‡πÅ‡∏ö‡∏ö service-only)
print_status() {
  # ‡πÄ‡∏ä‡πá‡∏Ñ service
  local stat_nginx="OFF" stat_online="OFF" stat_vnstat="OFF" stat_v2="OFF" stat_sys="OFF"

  systemctl is-active --quiet nginx && stat_nginx="ON"
  [[ -f "$SERVICE_ONLINE" ]] && systemctl is-active --quiet online-check && stat_online="ON"
  [[ -f "$SERVICE_VNSTAT" ]] && systemctl is-active --quiet vnstat-traffic && stat_vnstat="ON"
  [[ -f "$SERVICE_V2RAY"  ]] && systemctl is-active --quiet v2ray-traffic  && stat_v2="ON"
  [[ -f "$SERVICE_SYSINFO" ]] && systemctl is-active --quiet sysinfo        && stat_sys="ON"

  # ‡∏™‡∏µ
  local c_ng=$( [[ "$stat_nginx"  == "ON" ]] && echo "$GREEN" || echo "$RED" )
  local c_on=$( [[ "$stat_online" == "ON" ]] && echo "$GREEN" || echo "$RED" )
  local c_vn=$( [[ "$stat_vnstat" == "ON" ]] && echo "$GREEN" || echo "$RED" )
  local c_v2=$( [[ "$stat_v2"     == "ON" ]] && echo "$GREEN" || echo "$RED" )
  local c_sy=$( [[ "$stat_sys"    == "ON" ]] && echo "$GREEN" || echo "$RED" )

  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢ [‚úî]/[‚úò] + ‡∏™‡∏µ)
  local installed="${CROSS} ${RED}Not Installed${NC}"
  if [[ -f "$SCRIPT_ONLINE" || -f "$SCRIPT_VNSTAT" || -f "$SCRIPT_V2RAY" || -f "$SCRIPT_SYSINFO" ]]; then
    installed="${CHECK} ${GREEN}Installed${NC}"
  fi

  # print
  echo -e "$(printf 'NginX        : [%b%s%b]  Online Check : [%b%s%b]\n' "$c_ng" "$stat_nginx" "$NC" "$c_on" "$stat_online" "$NC")"
  echo -e "$(printf 'vnStat       : [%b%s%b]  V2Ray Traffic : [%b%s%b]\n' "$c_vn" "$stat_vnstat" "$NC" "$c_v2" "$stat_v2" "$NC")"
  echo -e "$(printf 'SysInfo      : [%b%s%b]\n' "$c_sy" "$stat_sys" "$NC")"
  echo "-------------------------------"
  echo -e "Status: ${installed}"
  echo "==============================="
}

# =====================================================
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
# =====================================================

install_script() {
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..."
  echo -e "${CYAN}[INFO]${NC} Updating system packages..."
  apt update -y >/dev/null 2>&1 || true

  echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
  # ‡πÄ‡∏û‡∏¥‡πà‡∏° conntrack ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏•‡∏á
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates vnstat conntrack >/dev/null 2>&1 || true

  systemctl enable vnstat >/dev/null 2>&1 || true
  systemctl start vnstat >/dev/null 2>&1 || true

  mkdir -p "$WWW_DIR" "$BIN_DIR" "$(dirname "$DEBUG_LOG")"
  rotate_log

  # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 3x-ui ‡∏´‡∏£‡∏∑‡∏≠ Xray-Core
  local PANEL_URL XUI_USER XUI_PASS
  if [[ -d /etc/x-ui ]]; then
    echo -e "${CYAN}[INFO]${NC} ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö 3x-ui ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API"
    echo "  üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ '‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡πâ‡∏ô' ‡πÄ‡∏ä‡πà‡∏ô:"
    echo "     https://IP:PORT/RandomPath"
    read -rp "3X-UI URL (copy login link): " PANEL_URL
    PANEL_URL="$(echo "$PANEL_URL" | sed 's:/*$::')"

    read -rp "3X-UI Username: " XUI_USER
    read -rp "3X-UI Password: " XUI_PASS
  else
    echo -e "${CYAN}[INFO]${NC} ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Xray-Core ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 3x-ui"
    PANEL_URL=""
    XUI_USER=""
    XUI_PASS=""
  fi

  # ‡∏ï‡∏£‡∏ß‡∏à AGN-UDP ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ + port)
  local AGN_PRESENT="0" AGN_PORT=""
  IFS='|' read -r AGN_PRESENT AGN_PORT <<<"$(detect_agnudp)"
  if [[ "$AGN_PRESENT" == "1" ]]; then
    echo -e "${GREEN}[OK]${NC} ‡∏û‡∏ö AGN-UDP (Hysteria) ‚Üí listen port: ${BOLD}${AGN_PORT}${NC}"
  else
    echo -e "${YELLOW}[WARN]${NC} ‡πÑ‡∏°‡πà‡∏û‡∏ö AGN-UDP (Hysteria) ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‚Üí ‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ agnudp ‡πÄ‡∏õ‡πá‡∏ô 0"
  fi

  # Limit
  read -rp "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô config
  NIC=$(get_nic)
  [[ -z "$NIC" ]] && NIC=$(ip -o -4 addr show up scope global | awk '{print $2}' | head -n1)
  [[ -z "$NIC" ]] && NIC="eth0"

  cat >"$CONF_FILE" <<EOF
VERSION="${VERSION}"
WWW_DIR="$WWW_DIR"
LIMIT=${LIMIT}
DEBUG_LOG="$DEBUG_LOG"

PANEL_URL="$PANEL_URL"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"

NET_IFACE="$NIC"

# AGN-UDP (Hysteria) auto-detected info
AGN_PRESENT=$AGN_PRESENT
AGN_PORT="$AGN_PORT"
EOF
  chmod 600 "$CONF_FILE"

  # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å repo
  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY"  "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  mkdir -p "$WWW_DIR"
  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  # Nginx
  write_nginx

  # systemd services (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ)
  cat >"$SERVICE_ONLINE" <<'EOF'
[Unit]
Description=ShowOn Online Users JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/online-check.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_VNSTAT" <<'EOF'
[Unit]
Description=ShowOn vnStat + V2Ray Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/vnstat-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_V2RAY" <<'EOF'
[Unit]
Description=ShowOn V2Ray-Only Traffic JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/v2ray-traffic.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<'EOF'
[Unit]
Description=ShowOn System Info JSON Generator
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /usr/local/bin/sysinfo.sh; sleep 5; done'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  systemctl daemon-reload
  systemctl enable --now online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service

  echo -e "${GREEN}[OK]${NC} Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  press
}

# =====================================================
# ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
# =====================================================

uninstall_script() {
  echo -e "${CYAN}[INFO]${NC} Uninstalling ShowOn Script..."

  systemctl stop online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  systemctl disable online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_VNSTAT" "$SERVICE_V2RAY" "$SERVICE_SYSINFO"
  systemctl daemon-reload

  rm -f "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"
  rm -f "$CONF_FILE" "$DEBUG_LOG"

  rm -f "$SITE_AV" "$SITE_EN"
  if nginx -t 2>/dev/null; then
    systemctl reload nginx 2>/dev/null || true
  else
    systemctl restart nginx 2>/dev/null || true
  fi

  # ‡∏•‡∏ö conntrack ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏•‡∏á (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ nginx/vnstat)
  echo -e "${CYAN}[INFO]${NC} Removing conntrack package..."
  apt purge -y conntrack >/dev/null 2>&1 || true
  apt autoremove -y >/dev/null 2>&1 || true

  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
  press
}

# =====================================================
# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
# =====================================================

update_script() {
  echo -e "${CYAN}[INFO]${NC} Updating all ShowOn components..."
  rotate_log

  download_or_die "$SRC_ONLINE" "$SCRIPT_ONLINE"
  download_or_die "$SRC_VNSTAT" "$SCRIPT_VNSTAT"
  download_or_die "$SRC_V2RAY"  "$SCRIPT_V2RAY"
  download_or_die "$SRC_SYSINFO" "$SCRIPT_SYSINFO"
  chmod +x "$SCRIPT_ONLINE" "$SCRIPT_VNSTAT" "$SCRIPT_V2RAY" "$SCRIPT_SYSINFO"

  download_or_die "$SRC_INDEX" "$WWW_DIR/index.html"
  chmod 644 "$WWW_DIR/index.html"

  local TMP_SCRIPT="/tmp/Install.$$"
  if curl -fsSL "$REPO_RAW/Install" -o "$TMP_SCRIPT"; then
    mv "$TMP_SCRIPT" /root/Install
    chmod +x /root/Install
    echo -e "${GREEN}[OK]${NC} Updated Install script."
  else
    echo -e "${RED}[ERROR]${NC} Failed to update Install script."
  fi

  echo -e "${GREEN}[OK]${NC} Update completed."
  press
}

# =====================================================
# Debug Log / Change Limit
# =====================================================

check_debug() {
  rotate_log
  if [[ -f "$DEBUG_LOG" ]]; then
    tail -n 100 "$DEBUG_LOG"
  else
    echo "No debug log yet."
  fi
  press
}

change_limit() {
  if [[ ! -f "$CONF_FILE" ]]; then
    echo -e "${RED}[ERROR]${NC} Config file not found!"
    press; return
  fi

  # shellcheck disable=SC1090
  source "$CONF_FILE"
  echo -e "${CYAN}[INFO]${NC} Current Limit User Online: ${LIMIT:-2000}"
  read -rp "Enter new Limit User Online: " NEW_LIMIT
  if [[ -z "$NEW_LIMIT" ]]; then
    echo -e "${YELLOW}[WARN]${NC} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤"
    press; return
  fi

  sed -i "s/^LIMIT=.*/LIMIT=${NEW_LIMIT}/" "$CONF_FILE"
  echo -e "${GREEN}[OK]${NC} ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Limit User Online ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô ${NEW_LIMIT} ‡∏Ñ‡∏ô"
  press
}

# =====================================================
# Setup Swap (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ + ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ï service)
# =====================================================

setup_swap() {
  echo -e "${CYAN}[INFO]${NC} Auto Swap Wizard"

  # ‡∏Ç‡∏ô‡∏≤‡∏î RAM (MiB)
  local ram_kb
  ram_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  local ram_mb=$(( ram_kb / 1024 ))

  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô swap ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á RAM (‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏™‡πÄ‡∏õ‡∏Ñ)
  local swap_mb
  if   (( ram_mb <= 512 )); then       swap_mb=$(( ram_mb * 2 ))       # <=512MB ‚Üí x2
  elif (( ram_mb <= 1024 )); then      swap_mb=$(( ram_mb * 2 ))       # 1GB     ‚Üí x2
  elif (( ram_mb <= 2048 )); then      swap_mb=$(( ram_mb * 1 ))       # 2GB     ‚Üí x1
  elif (( ram_mb <= 4096 )); then      swap_mb=$(( ram_mb * 1 ))       # 4GB     ‚Üí x1
  elif (( ram_mb <= 8192 )); then      swap_mb=4096                    # 8GB     ‚Üí 4GB
  elif (( ram_mb <= 16384 )); then     swap_mb=4096                    # 16GB    ‚Üí 4GB
  elif (( ram_mb <= 32768 )); then     swap_mb=8192                    # 32GB    ‚Üí 8GB
  elif (( ram_mb <= 65536 )); then     swap_mb=8192                    # 64GB    ‚Üí 8GB
  else                                  swap_mb=8192                    # >64GB   ‚Üí 8GB cap
  fi

  # ‡∏°‡∏µ swap ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?
  if swapon --show | awk 'NR>1{print $1}' | grep -q .; then
    echo -e "${YELLOW}[WARN]${NC} ‡∏û‡∏ö Swap ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    read -rp "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (Y/n): " ans
    if [[ -z "$ans" || "$ans" =~ ^[Yy]$ ]]; then
      swapoff -a || true
      sed -i '/swapfile showon/d' /etc/fstab || true
    else
      echo -e "${GREEN}[OK]${NC} ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Swap ‡πÉ‡∏´‡∏°‡πà"
      press; return
    fi
  fi

  echo -e "${CYAN}[INFO]${NC} Creating swapfile size ${swap_mb} MiB ..."
  fallocate -l "${swap_mb}M" /swapfile || dd if=/dev/zero of=/swapfile bs=1M count="${swap_mb}"
  chmod 600 /swapfile
  mkswap /swapfile >/dev/null
  swapon /swapfile

  if ! grep -q "swapfile showon" /etc/fstab; then
    echo "/swapfile none swap sw 0 0 # swapfile showon" >> /etc/fstab
  fi

  # ‡∏õ‡∏£‡∏±‡∏ö vm.swappiness & vfs_cache_pressure ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏°‡πÄ‡∏¢‡∏≤
  sysctl -w vm.swappiness=10 >/dev/null
  sysctl -w vm.vfs_cache_pressure=100 >/dev/null
  if ! grep -q '^vm.swappiness' /etc/sysctl.conf; then echo "vm.swappiness=10" >> /etc/sysctl.conf; fi
  if ! grep -q '^vm.vfs_cache_pressure' /etc/sysctl.conf; then echo "vm.vfs_cache_pressure=100" >> /etc/sysctl.conf; fi

  echo -e "${GREEN}[OK]${NC} Swap ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:"
  free -h

  # ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ï service ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ
  systemctl restart online-check.service vnstat-traffic.service v2ray-traffic.service sysinfo.service 2>/dev/null || true
  echo -e "${GREEN}[OK]${NC} Restarted ShowOn services."
  press
}

# =====================================================
# ‡πÄ‡∏°‡∏ô‡∏π
# =====================================================

show_menu() {
  header
  print_status
  check_update
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Update Script"
  echo "4) Check Debug Log"
  echo "5) Change Limit User Online"
  echo "6) Setup Swap"
  echo "0) Exit"
  echo "==============================="
  read -rp "Choose an option [0-6]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) update_script ;;
    4) check_debug ;;
    5) change_limit ;;
    6) setup_swap ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR]${NC} Invalid choice"; sleep 1 ;;
  esac
  show_menu
}

# =====================================================
# Main
# =====================================================

require_root
show_menu
