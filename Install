#!/bin/bash
# =====================================================
# Online User Checker + Dashboard + Menu Showon
# Author: TspKchn
# Version: V.1.0.0
# =====================================================

VERSION="V.1.0.0"

set -e

echo "[INFO] Updating system..."
apt update -y && apt upgrade -y
apt install -y curl jq net-tools iproute2 nginx

# -----------------------------
# Detect 3x-ui IP & Port
# -----------------------------
PANEL_PORT=$(ss -tulpn | grep x-ui | awk '{print $5}' | cut -d':' -f2 | head -n1)
if [ -z "$PANEL_PORT" ]; then
    echo "[ERROR] ไม่พบ x-ui กำลังรัน! ตรวจสอบก่อนนะครับ"
    exit 1
fi
PANEL_IP=$(hostname -I | awk '{print $1}')
PANEL_URL="https://$PANEL_IP:$PANEL_PORT"

echo "[INFO] Detect X-UI Panel URL: $PANEL_URL"

# -----------------------------
# Ask user input
# -----------------------------
read -p "กรอก X-UI panel username: " USERNAME
read -p "กรอก X-UI panel password: " PASSWORD

# -----------------------------
# Create online-check.sh
# -----------------------------
cat >/usr/local/bin/online-check.sh <<EOF
#!/bin/bash
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"

echo "[DEBUG] Checking V2Ray clients..."

COOKIE=\$(curl -sk -c - -X POST "\$PANEL_URL/login" \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"\$USERNAME\",\"password\":\"\$PASSWORD\"}" \
  | grep 3x-ui | cut -f7)

ONLINE_JSON=\$(curl -sk -b "3x-ui=\$COOKIE" -X POST "\$PANEL_URL/panel/inbound/onlines")

ONLINE_COUNT=\$(echo "\$ONLINE_JSON" | jq '.obj | length')

cat >/var/www/html/server/online_app.json <<EOL
{"total":\$ONLINE_COUNT}
EOL

echo "[INFO] Updated /var/www/html/server/online_app.json (\$ONLINE_COUNT clients online)"
EOF

chmod +x /usr/local/bin/online-check.sh

# -----------------------------
# Create systemd service
# -----------------------------
cat >/etc/systemd/system/online-check.service <<'EOF'
[Unit]
Description=Online Users Checker (3x-ui)
After=network.target

[Service]
ExecStart=/usr/local/bin/online-check.sh
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reexec
systemctl enable --now online-check.service

# -----------------------------
# Create Web Folder
# -----------------------------
mkdir -p /var/www/html/server

cat >/var/www/html/server/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Online Checker</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
    #chart-container { width: 80%; margin: auto; }
  </style>
</head>
<body>
  <h1>Online Users</h1>
  <h2 id="onlineCount">Loading...</h2>
  <div id="chart-container">
    <canvas id="onlineChart"></canvas>
  </div>
  <script>
    async function fetchOnline() {
      try {
        const res = await fetch('online_app.json');
        const data = await res.json();
        document.getElementById('onlineCount').textContent =
          `Total Online: ${data.total}`;
        return data.total;
      } catch {
        return 0;
      }
    }

    const ctx = document.getElementById('onlineChart').getContext('2d');
    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Online Users',
          data: [],
          borderColor: 'blue',
          fill: false
        }]
      }
    });

    async function updateChart() {
      const online = await fetchOnline();
      const now = new Date().toLocaleTimeString();
      chart.data.labels.push(now);
      chart.data.datasets[0].data.push(online);
      if (chart.data.labels.length > 20) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
      }
      chart.update();
    }

    setInterval(updateChart, 5000);
    updateChart();
  </script>
</body>
</html>
EOF

# -----------------------------
# Nginx Config
# -----------------------------
cat >/etc/nginx/sites-available/server_checker <<'EOF'
server {
    listen 82 default_server;
    server_name _;
    root /var/www/html/server;
    index index.html;
    location / {
        try_files $uri $uri/ =404;
    }
}
EOF

ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
rm -f /etc/nginx/sites-enabled/default

nginx -t && systemctl restart nginx

# -----------------------------
# Create Menu showon
# -----------------------------
cat >/usr/local/bin/showon <<'EOF'
#!/bin/bash
INSTALL_FILE="/usr/local/bin/install-online-check.sh"

while true; do
    clear
    if [[ -f "$INSTALL_FILE" ]]; then
        VERSION=$(grep '^VERSION=' "$INSTALL_FILE" | cut -d'"' -f2)
    else
        VERSION="Unknown"
    fi

    echo "===================================="
    echo "     Menu Script Show Online User"
    echo "            $VERSION"
    echo "===================================="
    echo "1). Install Script"
    echo "2). Restart All Service"
    echo "3). Uninstall"
    echo "4). Update"
    echo "0). Exit"
    echo "------------------------------------"
    read -p "Select option: " choice
    case $choice in
        1) bash "$INSTALL_FILE" ;;
        2) systemctl restart nginx online-check.service ;;
        3) systemctl stop online-check.service
           systemctl disable online-check.service
           rm -f /usr/local/bin/online-check.sh /etc/systemd/system/online-check.service
           rm -rf /var/www/html/server
           echo "[OK] Uninstalled." ;;
        4) echo "[INFO] Updating from GitHub..."
           GITHUB_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"
           TMP_FILE="/tmp/install.new"
           if curl -fsSL "$GITHUB_URL" -o "$TMP_FILE"; then
               chmod +x "$TMP_FILE"
               mv "$TMP_FILE" "$INSTALL_FILE"
               echo "[OK] Install script updated!"
           else
               echo "[ERROR] Failed to fetch from GitHub."
           fi ;;
        0) exit 0 ;;
        *) echo "[ERROR] Invalid choice" ;;
    esac
    read -p "Press enter to continue..."
done
EOF

chmod +x /usr/local/bin/showon
cp "$0" /usr/local/bin/install-online-check.sh

echo "[DONE] Installation complete! Run 'showon' to open menu."
