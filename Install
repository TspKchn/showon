#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.1
# Author: TspKchn
# =====================================================

VERSION="V.1.0.1"
REPO_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ==========================
# Colors
# ==========================
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
CYAN="\e[36m"
NC="\e[0m"

SHOWON_CMD="/usr/local/bin/showon"
WWW_DIR="/var/www/html/server"
SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYSINFO="/usr/local/bin/sysinfo.sh"
SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"

# ==========================
# Menu Function
# ==========================
show_menu() {
    clear
    echo -e "==============================="
    echo -e "   ShowOn Script Manager ${VERSION}"
    echo -e "==============================="

    # Check update
    LATEST_VERSION=$(curl -s "$REPO_URL" | grep -m1 "VERSION=" | cut -d'"' -f2)
    if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "$VERSION" ]]; then
        echo -e "${YELLOW}[UPDATE AVAILABLE]${NC} New version: ${LATEST_VERSION}"
        read -p "Press Enter to update now..." _
        wget -q -O /root/Install "$REPO_URL"
        chmod +x /root/Install
        exec /root/Install
    else
        echo -e "${GREEN}[INFO]${NC} You are using the latest version."
    fi

    echo "1) Install Script"
    echo "2) Uninstall Script"
    echo "0) Exit"
    echo "==============================="
    read -p "Choose an option [0,1,2]: " choice

    case $choice in
        1) install_script ;;
        2) uninstall_script ;;
        0) exit 0 ;;
        *) echo -e "${RED}[ERROR] Invalid choice...${NC}" ; sleep 2 ; show_menu ;;
    esac
}

# ==========================
# Install Script
# ==========================
install_script() {
    echo -e "${CYAN}[INFO]${NC} Updating system..."
    apt update -y && apt upgrade -y

    echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
    apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates

    mkdir -p "$WWW_DIR"
    chmod -R 755 "$WWW_DIR"

    # -----------------------------
    # Ask for 3x-ui Config
    # -----------------------------
    read -p "Enter 3x-ui IP (default 127.0.0.1): " PANEL_IP
    PANEL_IP=${PANEL_IP:-127.0.0.1}

    read -p "Enter 3x-ui Port (default 88): " PANEL_PORT
    PANEL_PORT=${PANEL_PORT:-88}

    PANEL_URL="https://${PANEL_IP}:${PANEL_PORT}"
    echo -e "${CYAN}[INFO]${NC} Using PANEL_URL = $PANEL_URL"

    read -p "Enter 3x-ui username: " USERNAME
    read -p "Enter 3x-ui password: " PASSWORD

    # Save config
    CONF_FILE="/etc/showon.conf"
    cat >"$CONF_FILE" <<EOF
PANEL_URL="$PANEL_URL"
USERNAME="$USERNAME"
PASSWORD="$PASSWORD"
WWW_DIR="$WWW_DIR"
EOF
    chmod 600 "$CONF_FILE"

    # -----------------------------
    # online-check.sh
    # -----------------------------
    cat >"$SCRIPT_ONLINE" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf

# -------- SSH --------
_ons=$(ss -nt state established | grep -E ':22 ' | wc -l)

# -------- OpenVPN --------
_onop=0
[ -f /etc/openvpn/server/openvpn-status.log ] && \
  _onop=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log || true)

# -------- Dropbear --------
_ondrp=$(pgrep dropbear | wc -l)

# -------- V2Ray/Xray --------
_onv2=0
V2RAY_ONLINE="[]"

if [ -f /etc/x-ui/x-ui.db ]; then
    # ----- Mode: 3x-ui -----
    COOKIE=$(curl -sk -c - -X POST "$PANEL_URL/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}" \
      | grep 3x-ui | awk '{print $7}' || true)

    if [ -n "$COOKIE" ]; then
        V2RAY_ONLINE=$(curl -sk -b "3x-ui=$COOKIE" -X POST \
          "$PANEL_URL/panel/inbound/onlines" \
          -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
          | jq -r '.obj | @json' 2>/dev/null || echo "[]")
        _onv2=$(echo "$V2RAY_ONLINE" | jq 'length')
    fi

elif [ -f /usr/local/etc/xray/config.json ]; then
    # ----- Mode: Xray-core (manual/binary) -----
    LOG_DIR="/var/log/xray"
    if [ -d "$LOG_DIR" ]; then
        _onv2=$(grep "accepted" "$LOG_DIR"/*.log 2>/dev/null | \
            tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    fi

elif [ -f /etc/xray/config.json ]; then
    # ----- Mode: Xray-core (deb package) -----
    LOG_FILE="/var/log/xray/access.log"
    if [ -f "$LOG_FILE" ]; then
        _onv2=$(grep "accepted" "$LOG_FILE" 2>/dev/null | \
            tail -n 2000 | awk '{print $3}' | cut -d: -f1 | sort -u | wc -l)
    fi
fi

# -------- Save JSON --------
JSON=$(jq -n \
  --arg total "$(( _ons + _onop + _ondrp + _onv2 ))" \
  --arg ssh "$_ons" \
  --arg openvpn "$_onop" \
  --arg dropbear "$_ondrp" \
  --arg v2ray "$_onv2" \
  --argjson clients "$V2RAY_ONLINE" \
  '{total:$total|tonumber, ssh:$ssh|tonumber, openvpn:$openvpn|tonumber, dropbear:$dropbear|tonumber, v2ray:$v2ray|tonumber, clients:$clients}')

echo "$JSON" > "$WWW_DIR/online_app.json"
EOF
    chmod +x "$SCRIPT_ONLINE"

    # -----------------------------
    # sysinfo.sh
    # -----------------------------
    cat >"$SCRIPT_SYSINFO" <<'EOF'
#!/bin/bash
set -e
source /etc/showon.conf

uptime=$(uptime -p | sed 's/up //')
cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8"%"}')
mem_usage=$(free -m | awk 'NR==2{printf "%s / %s MB", $3,$2}')
disk_usage=$(df -h / | awk 'NR==2{print $3 " / " $2}')

JSON=$(jq -n \
  --arg uptime "$uptime" \
  --arg cpu_usage "$cpu_usage" \
  --arg ram_usage "$mem_usage" \
  --arg disk_usage "$disk_usage" \
  '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}')

echo "$JSON" > "$WWW_DIR/sysinfo.json"
EOF
    chmod +x "$SCRIPT_SYSINFO"

    # -----------------------------
    # Services
    # -----------------------------
    cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=Online Users JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_ONLINE; sleep 5; done'
Restart=always
RestartSec=5
EOF

    cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=System Info JSON Generator
After=network.target

[Service]
ExecStart=/bin/bash -c 'while true; do $SCRIPT_SYSINFO; sleep 5; done'
Restart=always
RestartSec=5
EOF

    systemctl daemon-reexec
    systemctl enable --now online-check.service
    systemctl enable --now sysinfo.service

    # -----------------------------
    # Nginx config
    # -----------------------------
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker

    cat >/etc/nginx/sites-available/server_checker <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }

    location /server/ {
        alias /var/www/html/server/;
        index index.html;
    }
}
EOF

    ln -sf /etc/nginx/sites-available/server_checker /etc/nginx/sites-enabled/server_checker
    nginx -t && systemctl reload nginx

    # -----------------------------
    # Detect Mode
    # -----------------------------
    if [ -f /etc/x-ui/x-ui.db ]; then
        echo -e "${GREEN}[SUCCESS]${NC} Detected mode: 3x-ui"
    elif [ -f /usr/local/etc/xray/config.json ]; then
        echo -e "${GREEN}[SUCCESS]${NC} Detected mode: Xray-core (manual/binary install)"
    elif [ -f /etc/xray/config.json ]; then
        echo -e "${GREEN}[SUCCESS]${NC} Detected mode: Xray-core (deb package)"
    else
        echo -e "${YELLOW}[WARN]${NC} Detected mode: Unknown (not found)"
    fi

    echo -e "${GREEN}[SUCCESS]${NC} Installed ShowOn ${VERSION}"
    echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
    read -p "Press Enter to return to menu..." _
    show_menu
}

# ==========================
# Uninstall Script
# ==========================
uninstall_script() {
    echo -e "${YELLOW}[INFO]${NC} Uninstalling ShowOn Script..."

    systemctl stop online-check.service sysinfo.service 2>/dev/null
    systemctl disable online-check.service sysinfo.service 2>/dev/null

    rm -f "$SERVICE_ONLINE" "$SERVICE_SYSINFO"
    rm -f "$SCRIPT_ONLINE" "$SCRIPT_SYSINFO"
    rm -f /etc/showon.conf
    rm -rf "$WWW_DIR"
    rm -f /etc/nginx/sites-available/server_checker
    rm -f /etc/nginx/sites-enabled/server_checker

    systemctl daemon-reload
    systemctl restart nginx

    echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely."
    read -p "Press Enter to reboot..." _
    reboot
}

# ==========================
# Create showon command
# ==========================
cat >"$SHOWON_CMD" <<EOF
#!/bin/bash
bash /root/Install
EOF
chmod +x "$SHOWON_CMD"

# ==========================
# Start Menu
# ==========================
show_menu
