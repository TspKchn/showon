#!/bin/bash
# =====================================================
# ShowOn Script Installer V.1.0.4 (Full Long Form)
# Author: TspKchn
# =====================================================

VERSION="V.1.0.4"
REPO_URL="https://raw.githubusercontent.com/TspKchn/showon/refs/heads/main/Install"

# ==========================
# Colors
# ==========================
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
CYAN="\e[36m"
NC="\e[0m"

# ==========================
# Paths / Files
# ==========================
SHOWON_CMD="/usr/local/bin/showon"
WWW_DIR="/var/www/html/server"
CONF_FILE="/etc/showon.conf"
DEBUG_LOG="/var/log/showon-debug.log"

SCRIPT_ONLINE="/usr/local/bin/online-check.sh"
SCRIPT_SYSINFO="/usr/local/bin/sysinfo.sh"
SCRIPT_NETINFO="/usr/local/bin/netinfo.sh"

SERVICE_ONLINE="/etc/systemd/system/online-check.service"
SERVICE_SYSINFO="/etc/systemd/system/sysinfo.service"
SERVICE_NETINFO="/etc/systemd/system/netinfo.service"

NGINX_SITE_AVAIL="/etc/nginx/sites-available/server_checker"
NGINX_SITE_ENABL="/etc/nginx/sites-enabled/server_checker"

# ==========================
# Helpers
# ==========================
ensure_root() {
  if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}[ERROR]${NC} Please run as root."
    exit 1
  fi
}

log() {
  # $1 LEVEL, $2... message
  local ts; ts="$(date '+%Y-%m-%d %H:%M:%S')"
  echo "[$ts][$1] ${*:2}" >> "$DEBUG_LOG"
  # keep log reasonable (~5k lines)
  local L=0
  if [ -f "$DEBUG_LOG" ]; then
    L=$(wc -l < "$DEBUG_LOG" 2>/dev/null || echo 0)
  fi
  if [ "$L" -gt 5000 ]; then
    tail -n 2000 "$DEBUG_LOG" > "${DEBUG_LOG}.tmp" 2>/dev/null && mv -f "${DEBUG_LOG}.tmp" "$DEBUG_LOG"
  fi
}

normalize_url() {
  # trim spaces + trailing slash
  local u="$1"
  u="${u%% *}"
  u="${u%/}"
  echo "$u"
}

check_update() {
  local latest
  latest=$(curl -fsS "$REPO_URL" 2>/dev/null | grep -m1 '^VERSION=' | cut -d'"' -f2)
  if [[ -n "$latest" && "$latest" != "$VERSION" ]]; then
    echo -e "${YELLOW}[UPDATE AVAILABLE]${NC} Latest: ${latest} (Current: ${VERSION})"
    read -p "Press Enter to update now, or Ctrl+C to cancel..." _
    wget -q -O /root/Install "$REPO_URL" && chmod +x /root/Install
    echo -e "${GREEN}[SUCCESS]${NC} Updated to ${latest}"
    echo -e "${CYAN}[INFO]${NC} Please run 'showon' again."
    exit 0
  else
    echo -e "${GREEN}[INFO]${NC} You are using the latest version."
  fi
}

# ==========================
# Menu
# ==========================
show_menu() {
  clear
  echo -e "==============================="
  echo -e "   ShowOn Script Manager ${VERSION}"
  echo -e "==============================="
  check_update
  echo "1) Install Script"
  echo "2) Uninstall Script"
  echo "3) Check Debug Log"
  echo "0) Exit"
  echo "==============================="
  read -p "Choose an option [0,1,2,3]: " choice
  case "$choice" in
    1) install_script ;;
    2) uninstall_script ;;
    3) check_debug_log ;;
    0) exit 0 ;;
    *) echo -e "${RED}[ERROR] Invalid choice...${NC}" ; sleep 1 ; show_menu ;;
  esac
}

# ==========================
# Install
# ==========================
install_script() {
  ensure_root
  echo -e "${CYAN}[INFO]${NC} Installing ShowOn (${VERSION})..."
  mkdir -p "$(dirname "$DEBUG_LOG")"
  touch "$DEBUG_LOG"
  log INFO "=== INSTALL START v${VERSION} ==="

  echo -e "${CYAN}[INFO]${NC} Updating system packages..."
  apt update -y >>"$DEBUG_LOG" 2>&1

  echo -e "${CYAN}[INFO]${NC} Installing dependencies..."
  apt install -y curl jq net-tools psmisc nginx iproute2 ca-certificates procps coreutils >>"$DEBUG_LOG" 2>&1

  # vnstat if missing
  if ! command -v vnstat >/dev/null 2>&1; then
    apt install -y vnstat >>"$DEBUG_LOG" 2>&1 || true
    systemctl enable --now vnstat >>"$DEBUG_LOG" 2>&1 || true
  fi

  mkdir -p "$WWW_DIR"
  chmod -R 755 "$WWW_DIR"
  chown -R www-data:www-data "$WWW_DIR"

  # -----------------------------
  # Ask 3x-ui URL & Login (optional)
  # -----------------------------
  echo -e "${CYAN}[INFO]${NC} ตั้งค่า 3x-ui (ถ้าไม่มีให้กด Enter ข้ามได้)"
  echo -e "  👉 กรุณา 'วางลิงก์หน้าล็อกอินทั้งเส้น' เช่น:"
  echo -e "     https://IP:PORT/SomeRandomPath  หรือ  http://domain:port/"
  read -p "3X-UI URL (copy login link): " PANEL_FULL
  PANEL_FULL="$(echo -n "$PANEL_FULL" | tr -d ' ' )"
  PANEL_FULL="${PANEL_FULL%/}"

  read -p "3X-UI Username: " XUI_USER
  read -p "3X-UI Password: " XUI_PASS

  read -p "Limit User Online (Default: 2000): " LIMIT
  LIMIT=${LIMIT:-2000}

  # base conf
  cat >"$CONF_FILE" <<EOF
VERSION="$VERSION"
WWW_DIR="$WWW_DIR"
LIMIT="$LIMIT"
DEBUG_LOG="$DEBUG_LOG"
EOF

  # Try login if provided
  if [[ -n "$PANEL_FULL" && -n "$XUI_USER" && -n "$XUI_PASS" ]]; then
    local_base="$(normalize_url "$PANEL_FULL")"
    log INFO "Try login PANEL_BASE=$local_base user=$XUI_USER"
    COOKIE=$(curl -sk -c - -X POST "$local_base/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" \
      2>>"$DEBUG_LOG" | awk '/3x-ui/ {print $7}' )

    if [[ -z "$COOKIE" ]]; then
      COOKIE=$(curl -sk -c - -X POST "$local_base/panel/login" \
        -H "Content-Type: application/json" \
        -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" \
        2>>"$DEBUG_LOG" | awk '/3x-ui/ {print $7}' )
    fi

    if [[ -n "$COOKIE" ]]; then
      echo -e "${GREEN}[OK]${NC} Login success. Cookie acquired."
      log INFO "Login success; cookie captured."
      cat >>"$CONF_FILE" <<EOF
PANEL_BASE="$local_base"
XUI_USER="$XUI_USER"
XUI_PASS="$XUI_PASS"
EOF
    else
      echo -e "${YELLOW}[WARN]${NC} Login failed. จะติดตั้งแบบไม่ผูก 3x-ui (ยังใช้ได้กับ Xray-core/OpenVPN/SSH/Dropbear)"
      log WARN "Login failed; continue without x-ui binding."
    fi
  else
    echo -e "${YELLOW}[INFO]${NC} ไม่ได้ระบุข้อมูล 3x-ui → ข้ามการผูก API"
    log INFO "Skip x-ui binding (no creds/url)"
  fi

  chmod 600 "$CONF_FILE"

  # -----------------------------
  # Write online-check.sh
  # -----------------------------
  cat >"$SCRIPT_ONLINE" <<'EOF'
#!/bin/bash
# Generate /var/www/html/server/online_app.json every 5s
# Robust to API errors, always writes JSON (prevents 404)
set -u
set -o pipefail

CONF="/etc/showon.conf"
source "$CONF" 2>/dev/null || true

JSON_OUT="${WWW_DIR:-/var/www/html/server}/online_app.json"
LOGF="${DEBUG_LOG:-/var/log/showon-debug.log}"

log() { echo "[$(date '+%F %T')][ONLINE] $*" >> "$LOGF"; }

mkdir -p "${WWW_DIR:-/var/www/html/server}" 2>/dev/null || true

# Defaults
SSH_ON=0; OVPN_ON=0; DB_ON=0; V2_ON=0

# SSH
SSH_ON=$(ss -nt state established 2>/dev/null | awk '$3 ~ /:22$/ {c++} END{print c+0}')

# OpenVPN
if [ -f /etc/openvpn/server/openvpn-status.log ]; then
  OVPN_ON=$(grep -c "CLIENT_LIST" /etc/openvpn/server/openvpn-status.log 2>/dev/null || echo 0)
fi

# Dropbear
DB_ON=$(pgrep dropbear 2>/dev/null | wc -l | awk '{print $1}')

# V2Ray via 3x-ui (if configured)
if grep -q '^PANEL_BASE=' "$CONF" 2>/dev/null; then
  source "$CONF" 2>/dev/null || true

  # login for fresh cookie
  COOKIE=$(curl -sk -c - -X POST "$PANEL_BASE/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" 2>/dev/null | awk '/3x-ui/ {print $7}')
  if [ -z "$COOKIE" ]; then
    COOKIE=$(curl -sk -c - -X POST "$PANEL_BASE/panel/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" 2>/dev/null | awk '/3x-ui/ {print $7}')
  fi

  if [ -n "$COOKIE" ]; then
    # new endpoint first (>=2.7.0)
    RESP=$(curl -sk --connect-timeout 5 -b "3x-ui=$COOKIE" \
      "$PANEL_BASE/panel/api/inbounds/onlines" 2>/dev/null || true)
    CNT=$(echo "$RESP" | jq -r '.obj | length' 2>/dev/null || echo "")

    if ! [[ "$CNT" =~ ^[0-9]+$ ]]; then
      # fallback old endpoint
      RESP=$(curl -sk --connect-timeout 5 -b "3x-ui=$COOKIE" \
        "$PANEL_BASE/panel/inbound/onlines" 2>/dev/null || true)
      CNT=$(echo "$RESP" | jq -r '.obj | length' 2>/dev/null || echo "")
    fi

    if [[ "$CNT" =~ ^[0-9]+$ ]]; then
      V2_ON="$CNT"
    else
      log "x-ui onlines parse fail; set V2_ON=0"
      V2_ON=0
    fi
  else
    log "x-ui login failed (cookie empty); set V2_ON=0"
    V2_ON=0
  fi
fi

TOTAL=$(( SSH_ON + OVPN_ON + DB_ON + V2_ON ))

# Write JSON (array of one object) — always
printf '%s\n' "$(jq -n \
  --argjson onlines "$TOTAL" \
  --argjson limite "${LIMIT:-2000}" \
  --argjson ssh "$SSH_ON" \
  --argjson openvpn "$OVPN_ON" \
  --argjson dropbear "$DB_ON" \
  --argjson v2ray "$V2_ON" \
  '[{onlines:$onlines, limite:$limite, ssh:$ssh, openvpn:$openvpn, dropbear:$dropbear, v2ray:$v2ray}]'
)" > "$JSON_OUT" 2>/dev/null || {
  echo '[{"onlines":0,"limite":2000,"ssh":0,"openvpn":0,"dropbear":0,"v2ray":0}]' > "$JSON_OUT"
}

log "online saved: $(cat "$JSON_OUT" 2>/dev/null)"
EOF
  chmod +x "$SCRIPT_ONLINE"

  # -----------------------------
  # Write sysinfo.sh
  # -----------------------------
  cat >"$SCRIPT_SYSINFO" <<'EOF'
#!/bin/bash
set -u
set -o pipefail
source /etc/showon.conf 2>/dev/null || true

JSON_OUT="${WWW_DIR:-/var/www/html/server}/sysinfo.json"
mkdir -p "${WWW_DIR:-/var/www/html/server}" 2>/dev/null || true

uptime=$(uptime -p 2>/dev/null | sed 's/^up //')
cpu_usage=$(top -bn1 2>/dev/null | awk -F'[, ]+' '/Cpu\(s\)/ {printf "%.1f%%", 100-$8}')
ram_usage=$(free -m 2>/dev/null | awk 'NR==2{printf "%s / %s MB",$3,$2}')
disk_usage=$(df -h / 2>/dev/null | awk 'NR==2{printf "%s / %s",$3,$2}')

jq -n --arg uptime "${uptime:-N/A}" \
      --arg cpu_usage "${cpu_usage:-N/A}" \
      --arg ram_usage "${ram_usage:-N/A}" \
      --arg disk_usage "${disk_usage:-N/A}" \
      '{uptime:$uptime, cpu_usage:$cpu_usage, ram_usage:$ram_usage, disk_usage:$disk_usage}' \
  > "$JSON_OUT" 2>/dev/null || echo '{"uptime":"N/A","cpu_usage":"N/A","ram_usage":"N/A","disk_usage":"N/A"}' > "$JSON_OUT"
EOF
  chmod +x "$SCRIPT_SYSINFO"

  # -----------------------------
  # Write netinfo.sh (VNStat + optional V2Ray traffic)
  # -----------------------------
  cat >"$SCRIPT_NETINFO" <<'EOF'
#!/bin/bash
set -u
set -o pipefail

CONF="/etc/showon.conf"
source "$CONF" 2>/dev/null || true
LOGF="${DEBUG_LOG:-/var/log/showon-debug.log}"
JSON_OUT="${WWW_DIR:-/var/www/html/server}/netinfo.json"

log() { echo "[$(date '+%F %T')][NET] $*" >> "$LOGF"; }

mkdir -p "${WWW_DIR:-/var/www/html/server}" 2>/dev/null || true

IFACE=$(ip route 2>/dev/null | awk '/default/ {print $5; exit}')
[ -z "$IFACE" ] && IFACE="eth0"

RX=$(vnstat --json 2>/dev/null | jq -r ".interfaces[]|select(.name==\"$IFACE\")|.traffic.total.rx" 2>/dev/null || echo 0)
TX=$(vnstat --json 2>/dev/null | jq -r ".interfaces[]|select(.name==\"$IFACE\")|.traffic.total.tx" 2>/dev/null || echo 0)

V_JSON=$(jq -n --argjson rx "${RX:-0}" --argjson tx "${TX:-0}" '{vnstat:{rx:$rx,tx:$tx}}')

# Try V2Ray Traffic (sum up/down) if X-UI configured
if grep -q '^PANEL_BASE=' "$CONF" 2>/dev/null; then
  source "$CONF" 2>/dev/null || true

  COOKIE=$(curl -sk -c - -X POST "$PANEL_BASE/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" 2>/dev/null | awk '/3x-ui/ {print $7}')
  if [ -z "$COOKIE" ]; then
    COOKIE=$(curl -sk -c - -X POST "$PANEL_BASE/panel/login" \
      -H "Content-Type: application/json" \
      -d "{\"username\":\"$XUI_USER\",\"password\":\"$XUI_PASS\"}" 2>/dev/null | awk '/3x-ui/ {print $7}')
  fi

  if [ -n "$COOKIE" ]; then
    # new path first
    LIST=$(curl -sk -b "3x-ui=$COOKIE" "$PANEL_BASE/panel/api/inbounds/list" 2>/dev/null || true)
    SUMU=$(echo "$LIST" | jq '[.obj[].up] | add' 2>/dev/null || echo "")
    SUMD=$(echo "$LIST" | jq '[.obj[].down] | add' 2>/dev/null || echo "")
    if [[ "$SUMU" =~ ^[0-9]+$ && "$SUMD" =~ ^[0-9]+$ ]]; then
      V_JSON=$(echo "$V_JSON" | jq --argjson up "$SUMU" --argjson down "$SUMD" '. + {v2ray:{up:$up,down:$down}}')
    else
      LIST=$(curl -sk -b "3x-ui=$COOKIE" "$PANEL_BASE/panel/inbounds/list" 2>/dev/null || true)
      SUMU=$(echo "$LIST" | jq '[.obj[].up] | add' 2>/dev/null || echo "")
      SUMD=$(echo "$LIST" | jq '[.obj[].down] | add' 2>/dev/null || echo "")
      if [[ "$SUMU" =~ ^[0-9]+$ && "$SUMD" =~ ^[0-9]+$ ]]; then
        V_JSON=$(echo "$V_JSON" | jq --argjson up "$SUMU" --argjson down "$SUMD" '. + {v2ray:{up:$up,down:$down}}')
      fi
    fi
  fi
fi

echo "$V_JSON" > "$JSON_OUT" 2>/dev/null || echo '{"vnstat":{"rx":0,"tx":0}}' > "$JSON_OUT"
log "netinfo saved: $(cat "$JSON_OUT" 2>/dev/null)"
EOF
  chmod +x "$SCRIPT_NETINFO"

  # -----------------------------
  # Systemd services
  # -----------------------------
  cat >"$SERVICE_ONLINE" <<EOF
[Unit]
Description=ShowOn Online Users JSON Generator
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/online-check.sh || true; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_SYSINFO" <<EOF
[Unit]
Description=ShowOn System Info JSON Generator
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/sysinfo.sh || true; sleep 5; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  cat >"$SERVICE_NETINFO" <<EOF
[Unit]
Description=ShowOn Network Traffic JSON Generator
After=network.target vnstat.service

[Service]
Type=simple
ExecStart=/bin/bash -lc 'while true; do /usr/local/bin/netinfo.sh || true; sleep 10; done'
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable --now online-check.service sysinfo.service netinfo.service >>"$DEBUG_LOG" 2>&1

  # -----------------------------
  # Nginx site
  # -----------------------------
  rm -f "$NGINX_SITE_AVAIL" "$NGINX_SITE_ENABL"
  cat >"$NGINX_SITE_AVAIL" <<'EOF'
server {
    listen 82 default_server;
    server_name _;

    location = / {
        return 302 /server/;
    }

    location /server/ {
        alias /var/www/html/server/;
        autoindex off;
        index index.html;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    }
}
EOF
  ln -sf "$NGINX_SITE_AVAIL" "$NGINX_SITE_ENABL"
  nginx -t && systemctl reload nginx

  # -----------------------------
  # index.html
  # -----------------------------
  cat >"$WWW_DIR/index.html" <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ShowOn Dashboard V.1.0.4</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root{--bg:#101010;--card:#1b1b1b;--fg:#ddd;--muted:#9aa;--accent:#00e676;--cyan:#13d3ff;}
    html,body{margin:0;background:var(--bg);color:var(--fg);font:16px/1.4 system-ui,Segoe UI,Arial}
    .wrap{max-width:960px;margin:24px auto;padding:0 16px}
    h1{color:var(--accent);font-weight:800;letter-spacing:.5px}
    .ver{color:var(--cyan);font-weight:700;margin-left:8px}
    .card{background:var(--card);border-radius:10px;padding:16px 18px;margin:16px 0;box-shadow:0 1px 12px rgba(0,0,0,.2)}
    table{width:100%;border-collapse:collapse;margin-top:8px}
    th,td{border:1px solid #333;padding:10px 8px;text-align:center}
    th{background:#212121;color:#cbd5e1}
    .k{color:#9ae6b4}
    .muted{color:var(--muted)}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:16px}
    @media(max-width:700px){.grid{grid-template-columns:1fr}}
    .small{font-size:13px}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>ShowOn Dashboard <span class="ver">V.1.0.4</span></h1>

    <div class="card">
      <h2>Online Summary</h2>
      <table>
        <thead><tr><th>Onlines</th><th>Limit</th><th>SSH</th><th>OpenVPN</th><th>Dropbear</th><th>V2Ray</th></tr></thead>
        <tbody><tr id="sum"><td colspan="6" class="muted">Loading...</td></tr></tbody>
      </table>
    </div>

    <div class="grid">
      <div class="card">
        <h2>System &amp; Network</h2>
        <div id="sys" class="small muted">Loading...</div>
      </div>

      <div class="card">
        <h2>Traffic</h2>
        <div id="traf" class="small muted">Loading...</div>
      </div>
    </div>

    <div class="small muted">Auto refresh every 5s</div>
  </div>

<script>
async function once() {
  // online summary
  try{
    const a = await fetch('./online_app.json?c='+Date.now());
    const d = await a.json();
    const o = Array.isArray(d) ? d[0] : d;
    document.getElementById('sum').innerHTML =
      `<td>${o.onlines ?? '0'}</td><td>${o.limite ?? '0'}</td><td>${o.ssh ?? '0'}</td><td>${o.openvpn ?? '0'}</td><td>${o.dropbear ?? '0'}</td><td>${o.v2ray ?? '0'}</td>`;
  }catch(e){ document.getElementById('sum').innerHTML = `<td colspan="6">Error</td>`; }

  // sysinfo
  try{
    const b = await fetch('./sysinfo.json?c='+Date.now());
    const s = await b.json();
    document.getElementById('sys').innerHTML =
      `<div><span class="k">Uptime:</span> ${s.uptime}</div>
       <div><span class="k">CPU:</span> ${s.cpu_usage}</div>
       <div><span class="k">RAM:</span> ${s.ram_usage}</div>
       <div><span class="k">Disk:</span> ${s.disk_usage}</div>`;
  }catch(e){ document.getElementById('sys').innerText = 'Error'; }

  // traffic (vnstat + optional v2ray)
  try{
    const c = await fetch('./netinfo.json?c='+Date.now());
    const n = await c.json();
    let html = '';
    if(n.vnstat){ html += `<div><span class="k">VNStat RX/TX:</span> ${Number(n.vnstat.rx||0).toLocaleString()} / ${Number(n.vnstat.tx||0).toLocaleString()} bytes</div>`; }
    if(n.v2ray){ html += `<div><span class="k">V2Ray Up/Down:</span> ${Number(n.v2ray.up||0).toLocaleString()} / ${Number(n.v2ray.down||0).toLocaleString()} bytes</div>`; }
    if(!html) html = 'No traffic data';
    document.getElementById('traf').innerHTML = html;
  }catch(e){ document.getElementById('traf').innerText = 'Error'; }
}
once(); setInterval(once, 5000);
</script>
</body>
</html>
EOF
  chmod 644 "$WWW_DIR/index.html"
  chown www-data:www-data "$WWW_DIR/index.html"

  # -----------------------------
  # Replace showon command (force newest)
  # -----------------------------
  rm -f /usr/bin/showon /bin/showon 2>/dev/null || true
  cat >"$SHOWON_CMD" <<'EOF'
#!/bin/bash
exec /bin/bash /root/Install
EOF
  chmod +x "$SHOWON_CMD"

  # -----------------------------
  # Final messages
  # -----------------------------
  nginx -t && systemctl reload nginx
  echo -e "${GREEN}[SUCCESS]${NC} Installed ShowOn ${VERSION}"
  echo -e "${CYAN}[INFO]${NC} Open: http://$(hostname -I | awk '{print $1}'):82/server/"
  log INFO "=== INSTALL DONE v${VERSION} ==="
  read -p "Press Enter to return to menu..." _
  show_menu
}

# ==========================
# Uninstall (clean, no reboot)
# ==========================
uninstall_script() {
  ensure_root
  echo -e "${YELLOW}[INFO]${NC} Uninstalling ShowOn (clean)..."
  log INFO "=== UNINSTALL START ==="

  systemctl stop online-check.service sysinfo.service netinfo.service 2>/dev/null || true
  systemctl disable online-check.service sysinfo.service netinfo.service 2>/dev/null || true

  rm -f "$SERVICE_ONLINE" "$SERVICE_SYSINFO" "$SERVICE_NETINFO"
  systemctl daemon-reload

  rm -f "$SCRIPT_ONLINE" "$SCRIPT_SYSINFO" "$SCRIPT_NETINFO"
  rm -f "$CONF_FILE"
  rm -rf "$WWW_DIR"

  rm -f "$NGINX_SITE_AVAIL" "$NGINX_SITE_ENABL"
  nginx -t 2>/dev/null && systemctl reload nginx || systemctl restart nginx

  rm -f "$SHOWON_CMD" /usr/bin/showon /bin/showon

  echo -e "${GREEN}[SUCCESS]${NC} Uninstalled completely. (No reboot required)"
  log INFO "=== UNINSTALL DONE ==="
  read -p "Press Enter to return to menu..." _
  show_menu
}

# ==========================
# Check Debug Log
# ==========================
check_debug_log() {
  touch "$DEBUG_LOG"
  echo -e "${CYAN}--- Last 200 lines of $DEBUG_LOG ---${NC}"
  tail -n 200 "$DEBUG_LOG" || true
  echo -e "${CYAN}-------------------------------------${NC}"
  read -p "Press Enter to return..." _
  show_menu
}

# ==========================
# Start Menu
# ==========================
ensure_root
show_menu
